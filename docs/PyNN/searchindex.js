Search.setIndex({"alltitles": {"A demonstration of the responses of different standard neuron models to current injection": [[22, "a-demonstration-of-the-responses-of-different-standard-neuron-models-to-current-injection"]], "A demonstration of the responses of different standard neuron models to synaptic input": [[30, "a-demonstration-of-the-responses-of-different-standard-neuron-models-to-synaptic-input"]], "A demonstration of the use of callbacks to vary the rate of a SpikeSourcePoisson": [[32, "a-demonstration-of-the-use-of-callbacks-to-vary-the-rate-of-a-spikesourcepoisson"]], "A network of multi-compartment cells": [[41, "a-network-of-multi-compartment-cells"]], "A selection of Izhikevich neurons": [[20, "a-selection-of-izhikevich-neurons"]], "A very simple example of using STDP": [[26, "a-very-simple-example-of-using-stdp"]], "A walk through the lifecycle of a simulation": [[13, "a-walk-through-the-lifecycle-of-a-simulation"]], "API changes": [[74, "api-changes"], [75, "api-changes"]], "API reference": [[0, "api-reference"], [34, "api-reference"]], "API simplification": [[88, "api-simplification"]], "Accessing weights and delays": [[9, "accessing-weights-and-delays"]], "Accessing, setting and saving properties of synaptic connections": [[72, "accessing-setting-and-saving-properties-of-synaptic-connections"], [76, "accessing-setting-and-saving-properties-of-synaptic-connections"]], "Adapting a different random number generator to work with PyNN": [[58, "adapting-a-different-random-number-generator-to-work-with-pynn"]], "Adaptive time step integration": [[4, "adaptive-time-step-integration"]], "Added \u201ccomposed\u201d models allowing multiple post-synaptic receptor types": [[65, "added-composed-models-allowing-multiple-post-synaptic-receptor-types"]], "Adding a new backend": [[13, "adding-a-new-backend"]], "Adding a new simulator interface": [[13, "adding-a-new-simulator-interface"]], "Adding logging to your own code": [[38, "adding-logging-to-your-own-code"]], "Additional requirements": [[45, "additional-requirements"]], "All-to-all connections": [[9, "all-to-all-connections"]], "An example to illustrate random number handling in PyNN": [[25, "an-example-to-illustrate-random-number-handling-in-pynn"]], "Array-valued parameters": [[84, "array-valued-parameters"]], "Assemblies": [[43, "assemblies"], [56, "assemblies"]], "Attribution": [[16, "attribution"]], "Backend changes": [[71, "backend-changes"]], "Backends": [[1, "backends"]], "Balanced network of excitatory and inhibitory neurons": [[21, "balanced-network-of-excitatory-and-inhibitory-neurons"]], "Base class": [[51, "base-class"], [53, "base-class"], [55, "base-class"]], "Basic plotting": [[61, "basic-plotting"]], "Beta support for Brian 2": [[87, "beta-support-for-brian-2"]], "Beta: API extensions for multicompartment neurons": [[66, "beta-api-extensions-for-multicompartment-neurons"], [69, "beta-api-extensions-for-multicompartment-neurons"]], "Brian": [[2, "brian"]], "Brian backend": [[74, "brian-backend"]], "Bug fixes": [[63, "bug-fixes"], [64, "bug-fixes"], [65, "bug-fixes"], [82, "bug-fixes"], [83, "bug-fixes"], [86, "bug-fixes"], [87, "bug-fixes"]], "Bug fixes and performance improvements": [[84, "bug-fixes-and-performance-improvements"], [85, "bug-fixes-and-performance-improvements"]], "Bug reports and feature requests": [[14, "bug-reports-and-feature-requests"]], "Building networks": [[8, "building-networks"]], "Building networks: connections": [[9, "building-networks-connections"]], "Building networks: neurons": [[43, "building-networks-neurons"]], "Built-in connectors": [[51, "built-in-connectors"]], "Cell types": [[40, "cell-types"], [43, "cell-types"]], "Changes for developers": [[65, "changes-for-developers"], [76, "changes-for-developers"]], "Citing PyNN": [[37, "citing-pynn"]], "Code checkout": [[15, "code-checkout"]], "Code modifications": [[45, "code-modifications"]], "Coding style": [[15, "coding-style"]], "Common synapse properties": [[3, "common-synapse-properties"]], "Composed models": [[53, "composed-models"], [91, "composed-models"]], "Composing synaptic plasticity models": [[13, "composing-synaptic-plasticity-models"]], "Configuration": [[38, "configuration"]], "Configuration options": [[3, "configuration-options"], [4, "configuration-options"]], "Connecting neurons": [[13, "connecting-neurons"]], "Connecting neurons with a fixed probability": [[9, "connecting-neurons-with-a-fixed-probability"]], "Connecting neurons with a position-dependent probability": [[9, "connecting-neurons-with-a-position-dependent-probability"]], "Connection algorithms": [[9, "connection-algorithms"]], "Connectors": [[40, "connectors"], [51, "module-pyNN.connectors"]], "Continuous time spiking": [[3, "continuous-time-spiking"]], "Contributing to PyNN": [[15, "contributing-to-pynn"]], "Contributions": [[16, "contributions"]], "Contributor Code of Conduct": [[16, "contributor-code-of-conduct"]], "Contributors, licence and funding": [[10, "contributors-licence-and-funding"]], "Convergent/fan-in connections": [[9, "convergent-fan-in-connections"]], "Creating a small-world network": [[9, "creating-a-small-world-network"]], "Creating connections": [[72, "creating-connections"], [76, "creating-connections"]], "Creating connectors": [[13, "creating-connectors"]], "Creating neurons": [[13, "creating-neurons"]], "Creating populations": [[72, "creating-populations"], [76, "creating-populations"]], "Current sources": [[52, "current-sources"]], "Data handling": [[11, "data-handling"]], "Dependencies": [[64, "dependencies"]], "Details": [[70, "details"], [71, "details"]], "Developers\u2019 Guide": [[34, "developers-guide"]], "Developers\u2019 guide": [[17, "developers-guide"]], "Divergent/fan-out connections": [[9, "divergent-fan-out-connections"]], "Documentation": [[15, "documentation"]], "Downloads": [[18, "downloads"]], "EIF_cond_alpha_isfa_ista": [[91, "eif-cond-alpha-isfa-ista"]], "End of support for Python 2.7 and Brian 1": [[87, "end-of-support-for-python-2-7-and-brian-1"]], "Enforcement": [[16, "enforcement"]], "Example of depressing and facilitating synapses": [[31, "example-of-depressing-and-facilitating-synapses"]], "Example of facilitating and depressing synapses in deterministic and stochastic versions": [[28, "example-of-facilitating-and-depressing-synapses-in-deterministic-and-stochastic-versions"]], "Example of simple stochastic synapses": [[29, "example-of-simple-stochastic-synapses"]], "Examples": [[19, "examples"], [46, "examples"]], "Exporting a PyNN model as XML": [[44, "exporting-a-pynn-model-as-xml"]], "Finishing up": [[89, "finishing-up"]], "Finishing up, or resetting for a new run": [[13, "finishing-up-or-resetting-for-a-new-run"]], "Fixed synaptic weight": [[9, "fixed-synaptic-weight"]], "For developers": [[74, "for-developers"]], "Funding": [[10, "funding"]], "Gap junctions": [[74, "gap-junctions"]], "Gathering data to the master node": [[45, "gathering-data-to-the-master-node"]], "Getting information about the simulation state": [[89, "getting-information-about-the-simulation-state"]], "Governance": [[16, "governance"]], "HH_cond_exp": [[91, "hh-cond-exp"]], "IF_cond_alpha": [[91, "if-cond-alpha"]], "IF_cond_exp": [[91, "if-cond-exp"]], "IF_curr_alpha": [[91, "if-curr-alpha"]], "IF_curr_exp": [[91, "if-curr-exp"]], "Illustration of the different standard random distributions and different random number generators": [[24, "illustration-of-the-different-standard-random-distributions-and-different-random-number-generators"]], "Implementing your own Shape": [[60, "implementing-your-own-shape"]], "Implementing your own Structure": [[60, "implementing-your-own-structure"]], "Import phase": [[13, "import-phase"]], "Importing from and exporting to other formats": [[33, "importing-from-and-exporting-to-other-formats"]], "Indices and tables": [[34, "indices-and-tables"]], "Initialising the simulator": [[89, "initialising-the-simulator"]], "Injecting current": [[35, "injecting-current"]], "Injecting current into neurons": [[43, "injecting-current-into-neurons"]], "Injecting time-varying current into a cell": [[23, "injecting-time-varying-current-into-a-cell"]], "Injecting time-varying current into multi-compartment cells": [[41, "injecting-time-varying-current-into-multi-compartment-cells"]], "Injecting time-varying current into two-compartment cells": [[41, "injecting-time-varying-current-into-two-compartment-cells"]], "Inspecting and modifying parameter values and initial conditions": [[43, "inspecting-and-modifying-parameter-values-and-initial-conditions"]], "Installation": [[36, "installation"], [42, "installation"]], "Installing Arbor": [[36, "installing-arbor"]], "Installing Brian2": [[36, "installing-brian2"]], "Installing NEST and PyNEST": [[36, "installing-nest-and-pynest"]], "Installing NEURON": [[36, "installing-neuron"], [42, "installing-neuron"]], "Installing PyNN": [[36, "installing-pynn"], [42, "installing-pynn"]], "Instrumenting the network": [[13, "instrumenting-the-network"]], "Integrate-and-fire neurons with adaptation": [[53, "integrate-and-fire-neurons-with-adaptation"]], "Introduction": [[37, "introduction"]], "Latest source code from GitHub": [[18, "latest-source-code-from-github"]], "Licence": [[10, "licence"], [37, "licence"]], "Logging": [[38, "logging"]], "Long-term plasticity mechanisms": [[55, "long-term-plasticity-mechanisms"]], "Mailing list": [[15, "mailing-list"]], "Maintainers": [[16, "maintainers"]], "Making a release": [[15, "making-a-release"]], "Model parameters and initial values": [[46, "model-parameters-and-initial-values"]], "Modifying weights and delays": [[9, "modifying-weights-and-delays"]], "More efficient handling of spike trains": [[64, "more-efficient-handling-of-spike-trains"]], "Morphologies": [[40, "morphologies"]], "Multi-compartment neurons": [[43, "multi-compartment-neurons"]], "Multi-compartmental models": [[88, "multi-compartmental-models"]], "Multi-simulator models with MUSIC": [[88, "multi-simulator-models-with-music"]], "Multicompartmental modelling": [[40, "multicompartmental-modelling"]], "Multicompartmental modelling with PyNN: design goals": [[39, "multicompartmental-modelling-with-pynn-design-goals"]], "Multicompartmental modelling with PyNN: examples": [[41, "multicompartmental-modelling-with-pynn-examples"]], "NEST": [[3, "nest"]], "NEST 2.10": [[78, "nest-2-10"]], "NEST 2.12": [[80, "nest-2-12"]], "NEST 2.14.0 and NEURON 7.5": [[83, "nest-2-14-0-and-neuron-7-5"]], "NEST 2.16.0": [[84, "nest-2-16-0"]], "NEST 2.18.0": [[86, "nest-2-18-0"]], "NEST 2.20.0": [[87, "nest-2-20-0"]], "NEST 2.4": [[75, "nest-2-4"]], "NEST 2.6": [[77, "nest-2-6"]], "NEST 3.1": [[63, "nest-3-1"]], "NEST 3.3, NEURON 8.1": [[64, "nest-3-3-neuron-8-1"]], "NEST 3.4 support": [[65, "nest-3-4-support"]], "NEST 3.6 support": [[66, "nest-3-6-support"]], "NEST 3.7 support": [[69, "nest-3-7-support"]], "NEURON": [[4, "neuron"]], "Native cell types": [[53, "native-cell-types"]], "Native plasticity models": [[55, "native-plasticity-models"]], "Network descriptions": [[12, "network-descriptions"]], "NeuroML": [[5, "neuroml"], [33, "neuroml"]], "NeuroML 2": [[80, "neuroml-2"]], "Neuromorphic hardware": [[7, "neuromorphic-hardware"]], "Neuron models": [[53, "neuron-models"]], "Neurons": [[91, "neurons"]], "New and improved connectors": [[74, "new-and-improved-connectors"], [76, "new-and-improved-connectors"]], "New neuron model": [[64, "new-neuron-model"]], "New spike sources": [[79, "new-spike-sources"]], "NineML": [[6, "nineml"], [33, "nineml"]], "NineML plasticity models": [[55, "nineml-plasticity-models"]], "NineML/NeuroML export": [[88, "nineml-neuroml-export"]], "NineML/NeuroML model definitions": [[88, "nineml-neuroml-model-definitions"]], "Old documents": [[34, "old-documents"]], "One-to-one connections": [[9, "one-to-one-connections"]], "Other API changes": [[71, "other-api-changes"]], "Other changes": [[74, "other-changes"], [75, "other-changes"], [77, "other-changes"], [78, "other-changes"], [79, "other-changes"], [80, "other-changes"]], "Other packages for working with Neo data": [[11, "other-packages-for-working-with-neo-data"]], "Our Pledge": [[16, "our-pledge"]], "Our Responsibilities": [[16, "our-responsibilities"]], "Our Standards": [[16, "our-standards"]], "Parameter handling": [[54, "parameter-handling"]], "Parameterization": [[40, "parameterization"]], "Performing operations during a run": [[89, "performing-operations-during-a-run"]], "Populations": [[43, "populations"], [56, "populations"]], "Populations, Views and Assemblies": [[56, "populations-views-and-assemblies"]], "Project governance and code of conduct": [[84, "project-governance-and-code-of-conduct"]], "Projections": [[9, "projections"], [40, "projections"], [57, "projections"]], "Publications about, relating to or using PyNN": [[47, "publications-about-relating-to-or-using-pynn"]], "PyNN 0.10.0 release notes": [[63, "pynn-0-10-0-release-notes"]], "PyNN 0.10.1 release notes": [[64, "pynn-0-10-1-release-notes"]], "PyNN 0.11.0 release notes": [[65, "pynn-0-11-0-release-notes"]], "PyNN 0.12.0 release notes": [[66, "pynn-0-12-0-release-notes"]], "PyNN 0.12.1 release notes": [[67, "pynn-0-12-1-release-notes"]], "PyNN 0.12.2 release notes": [[68, "pynn-0-12-2-release-notes"]], "PyNN 0.12.3 release notes": [[69, "pynn-0-12-3-release-notes"]], "PyNN 0.6 release notes": [[70, "pynn-0-6-release-notes"]], "PyNN 0.7 release notes": [[71, "pynn-0-7-release-notes"]], "PyNN 0.8 alpha 1 release notes": [[72, "pynn-0-8-alpha-1-release-notes"]], "PyNN 0.8 alpha 2 release notes": [[73, "pynn-0-8-alpha-2-release-notes"]], "PyNN 0.8 beta 1 release notes": [[74, "pynn-0-8-beta-1-release-notes"]], "PyNN 0.8 beta 2 release notes": [[75, "pynn-0-8-beta-2-release-notes"]], "PyNN 0.8.0 release candidate 1 release notes": [[77, "pynn-0-8-0-release-candidate-1-release-notes"]], "PyNN 0.8.0 release notes": [[76, "pynn-0-8-0-release-notes"]], "PyNN 0.8.1 release notes": [[78, "pynn-0-8-1-release-notes"]], "PyNN 0.8.2 release notes": [[79, "pynn-0-8-2-release-notes"]], "PyNN 0.8.3 release notes": [[80, "pynn-0-8-3-release-notes"]], "PyNN 0.9.0 release notes": [[81, "pynn-0-9-0-release-notes"]], "PyNN 0.9.1 release notes": [[82, "pynn-0-9-1-release-notes"]], "PyNN 0.9.2 release notes": [[83, "pynn-0-9-2-release-notes"]], "PyNN 0.9.3 release notes": [[84, "pynn-0-9-3-release-notes"]], "PyNN 0.9.4 release notes": [[85, "pynn-0-9-4-release-notes"]], "PyNN 0.9.5 release notes": [[86, "pynn-0-9-5-release-notes"]], "PyNN 0.9.6 release notes": [[87, "pynn-0-9-6-release-notes"]], "PyNN and NineML": [[44, "pynn-and-nineml"]], "PyNN: documentation": [[34, "pynn-documentation"]], "Python 2.6": [[83, "python-2-6"]], "Python 3": [[75, "python-3"]], "Python compatibility": [[72, "python-compatibility"], [76, "python-compatibility"]], "Questions/Bugs/Enhancements": [[37, "questions-bugs-enhancements"]], "Quickstart": [[48, "quickstart"]], "RNG classes": [[49, "rng-classes"]], "Random number generator": [[3, "random-number-generator"]], "Random number generators": [[45, "random-number-generators"]], "Random numbers": [[49, "random-numbers"], [58, "random-numbers"]], "Reading connection patterns to/from a file": [[9, "reading-connection-patterns-to-from-a-file"]], "Recording": [[13, "recording"], [72, "recording"], [76, "recording"]], "Recording injected currents": [[83, "recording-injected-currents"]], "Recording spikes and state variables": [[50, "recording-spikes-and-state-variables"]], "Recording variables and retrieving recorded data": [[43, "recording-variables-and-retrieving-recorded-data"]], "Recording with irregular sampling intervals": [[64, "recording-with-irregular-sampling-intervals"]], "Reference": [[54, "reference"], [54, "id1"]], "Release 0.7.1": [[71, "release-0-7-1"]], "Release 0.7.2": [[71, "release-0-7-2"]], "Release 0.7.3": [[71, "release-0-7-3"]], "Release 0.7.4": [[71, "release-0-7-4"]], "Release 0.7.5": [[71, "release-0-7-5"]], "Release notes": [[62, "release-notes"]], "Repeating a simulation": [[89, "repeating-a-simulation"]], "Representing spatial structure and calculating distances": [[90, "representing-spatial-structure-and-calculating-distances"]], "Requirements": [[15, "requirements"]], "Retrieving recorded data": [[11, "retrieving-recorded-data"], [72, "retrieving-recorded-data"], [76, "retrieving-recorded-data"]], "Retrieving/saving recorded data": [[13, "retrieving-saving-recorded-data"]], "Roadmap": [[88, "roadmap"]], "Running a simulation": [[13, "running-a-simulation"], [89, "running-a-simulation"]], "Running parallel simulations": [[45, "running-parallel-simulations"]], "SONATA": [[33, "sonata"], [85, "sonata"]], "Scope": [[16, "scope"]], "Selecting points and regions": [[40, "selecting-points-and-regions"]], "Setting initial values": [[46, "setting-initial-values"]], "Setting parameters as a function of spatial position": [[46, "setting-parameters-as-a-function-of-spatial-position"]], "Setting parameters from an array": [[46, "setting-parameters-from-an-array"]], "Setting parameters to random values": [[46, "setting-parameters-to-random-values"]], "Setting spike times": [[72, "setting-spike-times"], [76, "setting-spike-times"]], "Setting the same value for all neurons in a population": [[46, "setting-the-same-value-for-all-neurons-in-a-population"]], "Setting up a development environment": [[15, "setting-up-a-development-environment"]], "Setup phase": [[13, "setup-phase"]], "Shape classes": [[60, "shape-classes"]], "Short-term plasticity mechanisms": [[55, "short-term-plasticity-mechanisms"]], "Short-term synaptic plasticity": [[9, "short-term-synaptic-plasticity"]], "Simple integrate-and-fire neurons": [[53, "simple-integrate-and-fire-neurons"]], "Simple plotting": [[11, "simple-plotting"], [74, "simple-plotting"], [76, "simple-plotting"]], "Simplified use of random number generators": [[84, "simplified-use-of-random-number-generators"]], "Simulating an entire NineML model with NEST or NEURON": [[44, "simulating-an-entire-nineml-model-with-nest-or-neuron"]], "Simulation control": [[59, "simulation-control"], [76, "simulation-control"], [89, "simulation-control"]], "Small network created with the Population and Projection classes": [[27, "small-network-created-with-the-population-and-projection-classes"]], "Source distributions": [[18, "source-distributions"]], "Spatial structure": [[60, "module-pyNN.space"]], "Specifying a list of connections": [[9, "specifying-a-list-of-connections"]], "Specifying an explicit connection matrix": [[9, "specifying-an-explicit-connection-matrix"]], "Specifying heterogeneous parameter values": [[72, "specifying-heterogeneous-parameter-values"], [76, "specifying-heterogeneous-parameter-values"]], "Specifying heterogeneous synapse parameters": [[72, "specifying-heterogeneous-synapse-parameters"], [76, "specifying-heterogeneous-synapse-parameters"]], "Spike sources": [[53, "spike-sources"], [91, "spike-sources"]], "Spike-timing-dependent plasticity": [[9, "spike-timing-dependent-plasticity"]], "SpikeSourceArray": [[91, "spikesourcearray"]], "SpikeSourcePoisson": [[49, "spikesourcepoisson"], [91, "spikesourcepoisson"]], "Standard cell types": [[53, "standard-cell-types"]], "Standard models": [[91, "standard-models"]], "Standard synapse types": [[55, "standard-synapse-types"]], "Standardization of random distributions": [[75, "standardization-of-random-distributions"], [76, "standardization-of-random-distributions"]], "Static/fixed synapses": [[55, "static-fixed-synapses"]], "Stochastic synapses": [[82, "stochastic-synapses"]], "Structure classes": [[60, "structure-classes"]], "Structure of the codebase": [[13, "structure-of-the-codebase"]], "Submitting code": [[15, "submitting-code"]], "Support for NEURON \u201cARTIFICIAL_CELL\u201d models": [[84, "support-for-neuron-artificial-cell-models"]], "Supported backends": [[76, "supported-backends"]], "Synapse models": [[55, "synapse-models"]], "Synapse types": [[9, "synapse-types"]], "Testing": [[15, "testing"]], "The Brian interface": [[13, "the-brian-interface"]], "The LazyArray class": [[54, "the-lazyarray-class"]], "The NEST interface": [[13, "the-nest-interface"]], "The NEURON interface": [[13, "the-neuron-interface"]], "The ParameterSpace class": [[54, "the-parameterspace-class"]], "The RandomDistribution class": [[49, "the-randomdistribution-class"]], "The Sequence class": [[54, "the-sequence-class"]], "The Space class": [[60, "the-space-class"]], "The common implementation": [[13, "the-common-implementation"]], "The next() method": [[49, "the-next-method"]], "Time series and array-valued parameters": [[46, "time-series-and-array-valued-parameters"]], "Timing-dependence components": [[55, "timing-dependence-components"]], "Todo": [[3, "id1"], [4, "id1"], [4, "id2"], [9, "id1"], [9, "id2"], [9, "id3"], [9, "id4"], [11, "id1"], [35, "id1"], [38, "id1"], [43, "id1"], [44, "id1"], [46, "id1"], [46, "id2"], [53, "id9"], [58, "id1"], [60, "id1"], [60, "id2"], [89, "id1"]], "Units": [[92, "units"]], "User-defined connection algorithms": [[9, "user-defined-connection-algorithms"]], "Using a NineML abstraction layer model in a NEST or NEURON simulation": [[44, "using-a-nineml-abstraction-layer-model-in-a-nest-or-neuron-simulation"]], "Using a function to calculate parameter values": [[46, "using-a-function-to-calculate-parameter-values"]], "Using multiple parameter types": [[46, "using-multiple-parameter-types"]], "Using native cell models": [[3, "using-native-cell-models"], [4, "using-native-cell-models"]], "Using native synaptic plasticity models": [[3, "using-native-synaptic-plasticity-models"]], "Using the Connection Set Algebra": [[9, "using-the-connection-set-algebra"]], "Utility classes and functions": [[61, "utility-classes-and-functions"]], "Utility functions": [[53, "utility-functions"]], "Views": [[43, "views"]], "Views (sub-populations)": [[56, "views-sub-populations"]], "Weight-dependence components": [[55, "weight-dependence-components"]], "Working with individual neurons": [[43, "working-with-individual-neurons"]], "Writing data to file": [[11, "writing-data-to-file"]], "native_electrode_type": [[83, "native-electrode-type"]]}, "docnames": ["api_reference", "backends", "backends/Brian", "backends/NEST", "backends/NEURON", "backends/NeuroML", "backends/NineML", "backends/neuromorphic", "building_networks", "connections", "contributors", "data_handling", "descriptions", "developers/adding_backend", "developers/bug_reports", "developers/contributing", "developers/governance", "developers_guide", "download", "examples", "examples/Izhikevich", "examples/VAbenchmarks", "examples/cell_type_demonstration", "examples/current_injection", "examples/random_distributions", "examples/random_numbers", "examples/simple_STDP", "examples/small_network", "examples/stochastic_deterministic_comparison", "examples/stochastic_synapses", "examples/synaptic_input", "examples/tsodyksmarkram", "examples/varying_poisson", "import_export", "index", "injecting_current", "installation", "introduction", "logging", "mc_aims", "mc_api", "mc_examples", "mc_installation", "neurons", "nineml", "parallel", "parameters", "publications", "quickstart", "random_numbers", "recording", "reference/connectors", "reference/electrodes", "reference/neuronmodels", "reference/parameters", "reference/plasticitymodels", "reference/populations", "reference/projections", "reference/random", "reference/simulationcontrol", "reference/space", "reference/utility", "release_notes", "releases/0.10.0", "releases/0.10.1", "releases/0.11.0", "releases/0.12.0", "releases/0.12.1", "releases/0.12.2", "releases/0.12.3", "releases/0.6", "releases/0.7", "releases/0.8-alpha-1", "releases/0.8-alpha-2", "releases/0.8-beta-1", "releases/0.8-beta-2", "releases/0.8.0", "releases/0.8.0-rc-1", "releases/0.8.1", "releases/0.8.2", "releases/0.8.3", "releases/0.9.0", "releases/0.9.1", "releases/0.9.2", "releases/0.9.3", "releases/0.9.4", "releases/0.9.5", "releases/0.9.6", "roadmap", "simulation_control", "space", "standardmodels", "units"], "envversion": {"sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1}, "filenames": ["api_reference.txt", "backends.txt", "backends/Brian.txt", "backends/NEST.txt", "backends/NEURON.txt", "backends/NeuroML.txt", "backends/NineML.txt", "backends/neuromorphic.txt", "building_networks.txt", "connections.txt", "contributors.txt", "data_handling.txt", "descriptions.txt", "developers/adding_backend.txt", "developers/bug_reports.txt", "developers/contributing.txt", "developers/governance.txt", "developers_guide.txt", "download.txt", "examples.txt", "examples/Izhikevich.txt", "examples/VAbenchmarks.txt", "examples/cell_type_demonstration.txt", "examples/current_injection.txt", "examples/random_distributions.txt", "examples/random_numbers.txt", "examples/simple_STDP.txt", "examples/small_network.txt", "examples/stochastic_deterministic_comparison.txt", "examples/stochastic_synapses.txt", "examples/synaptic_input.txt", "examples/tsodyksmarkram.txt", "examples/varying_poisson.txt", "import_export.txt", "index.txt", "injecting_current.txt", "installation.txt", "introduction.txt", "logging.txt", "mc_aims.txt", "mc_api.txt", "mc_examples.txt", "mc_installation.txt", "neurons.txt", "nineml.txt", "parallel.txt", "parameters.txt", "publications.txt", "quickstart.txt", "random_numbers.txt", "recording.txt", "reference/connectors.txt", "reference/electrodes.txt", "reference/neuronmodels.txt", "reference/parameters.txt", "reference/plasticitymodels.txt", "reference/populations.txt", "reference/projections.txt", "reference/random.txt", "reference/simulationcontrol.txt", "reference/space.txt", "reference/utility.txt", "release_notes.txt", "releases/0.10.0.txt", "releases/0.10.1.txt", "releases/0.11.0.txt", "releases/0.12.0.txt", "releases/0.12.1.txt", "releases/0.12.2.txt", "releases/0.12.3.txt", "releases/0.6.txt", "releases/0.7.txt", "releases/0.8-alpha-1.txt", "releases/0.8-alpha-2.txt", "releases/0.8-beta-1.txt", "releases/0.8-beta-2.txt", "releases/0.8.0.txt", "releases/0.8.0-rc-1.txt", "releases/0.8.1.txt", "releases/0.8.2.txt", "releases/0.8.3.txt", "releases/0.9.0.txt", "releases/0.9.1.txt", "releases/0.9.2.txt", "releases/0.9.3.txt", "releases/0.9.4.txt", "releases/0.9.5.txt", "releases/0.9.6.txt", "roadmap.txt", "simulation_control.txt", "space.txt", "standardmodels.txt", "units.txt"], "indexentries": {"__add__() (assembly method)": [[56, "pyNN.neuron.Assembly.__add__", false]], "__add__() (population method)": [[56, "pyNN.neuron.Population.__add__", false]], "__add__() (populationview method)": [[56, "pyNN.neuron.PopulationView.__add__", false]], "__div__() (sequence method)": [[54, "pyNN.parameters.Sequence.__div__", false]], "__getitem__() (assembly method)": [[56, "pyNN.neuron.Assembly.__getitem__", false]], "__getitem__() (lazyarray method)": [[54, "pyNN.parameters.LazyArray.__getitem__", false]], "__getitem__() (parameterspace method)": [[54, "pyNN.parameters.ParameterSpace.__getitem__", false]], "__getitem__() (population method)": [[56, "pyNN.neuron.Population.__getitem__", false]], "__getitem__() (populationview method)": [[56, "pyNN.neuron.PopulationView.__getitem__", false]], "__getitem__() (projection method)": [[57, "pyNN.neuron.Projection.__getitem__", false]], "__iadd__() (assembly method)": [[56, "pyNN.neuron.Assembly.__iadd__", false]], "__iter__() (assembly method)": [[56, "pyNN.neuron.Assembly.__iter__", false]], "__iter__() (parameterspace method)": [[54, "pyNN.parameters.ParameterSpace.__iter__", false]], "__iter__() (population method)": [[56, "pyNN.neuron.Population.__iter__", false]], "__iter__() (populationview method)": [[56, "pyNN.neuron.PopulationView.__iter__", false]], "__iter__() (projection method)": [[57, "pyNN.neuron.Projection.__iter__", false]], "__len__() (assembly method)": [[56, "pyNN.neuron.Assembly.__len__", false]], "__len__() (population method)": [[56, "pyNN.neuron.Population.__len__", false]], "__len__() (populationview method)": [[56, "pyNN.neuron.PopulationView.__len__", false]], "__len__() (projection method)": [[57, "pyNN.neuron.Projection.__len__", false]], "__mul__() (sequence method)": [[54, "pyNN.parameters.Sequence.__mul__", false]], "acsource (class in pynn.neuron.standardmodels.electrodes)": [[52, "pyNN.neuron.standardmodels.electrodes.ACSource", false]], "additivepotentiationmultiplicativedepression (class in pynn.standardmodels.synapses)": [[55, "pyNN.standardmodels.synapses.AdditivePotentiationMultiplicativeDepression", false]], "additiveweightdependence (class in pynn.standardmodels.synapses)": [[55, "pyNN.standardmodels.synapses.AdditiveWeightDependence", false]], "adexp (class in pynn.standardmodels.cells)": [[53, "pyNN.standardmodels.cells.AdExp", false]], "all() (assembly method)": [[56, "pyNN.neuron.Assembly.all", false]], "all() (population method)": [[56, "pyNN.neuron.Population.all", false]], "all() (populationview method)": [[56, "pyNN.neuron.PopulationView.all", false]], "all_cells (assembly property)": [[56, "pyNN.neuron.Assembly.all_cells", false]], "all_cells (population attribute)": [[56, "pyNN.neuron.Population.all_cells", false]], "all_cells (populationview attribute)": [[56, "pyNN.neuron.PopulationView.all_cells", false]], "alltoallconnector (class in pynn.connectors)": [[51, "pyNN.connectors.AllToAllConnector", false]], "annotate() (population method)": [[56, "pyNN.neuron.Population.annotate", false]], "annotate() (populationview method)": [[56, "pyNN.neuron.PopulationView.annotate", false]], "annotate() (projection method)": [[57, "pyNN.neuron.Projection.annotate", false]], "apply() (lazyarray method)": [[54, "pyNN.parameters.LazyArray.apply", false]], "arrayconnector (class in pynn.connectors)": [[51, "pyNN.connectors.ArrayConnector", false]], "as_dict() (parameterspace method)": [[54, "pyNN.parameters.ParameterSpace.as_dict", false]], "assembly (class in pynn.neuron)": [[56, "pyNN.neuron.Assembly", false]], "axes (space attribute)": [[60, "pyNN.space.Space.AXES", false]], "basestructure (class in pynn.space)": [[60, "pyNN.space.BaseStructure", false]], "by_column() (lazyarray method)": [[54, "pyNN.parameters.LazyArray.by_column", false]], "calculate_size() (grid2d method)": [[60, "pyNN.space.Grid2D.calculate_size", false]], "calculate_size() (grid3d method)": [[60, "pyNN.space.Grid3D.calculate_size", false]], "can_record() (population method)": [[56, "pyNN.neuron.Population.can_record", false]], "can_record() (populationview method)": [[56, "pyNN.neuron.PopulationView.can_record", false]], "celltype (population attribute)": [[56, "pyNN.neuron.Population.celltype", false]], "celltype (populationview attribute)": [[56, "pyNN.neuron.PopulationView.celltype", false]], "check_bounds() (lazyarray method)": [[54, "pyNN.parameters.LazyArray.check_bounds", false]], "cloneconnector (class in pynn.connectors)": [[51, "pyNN.connectors.CloneConnector", false]], "columns() (parameterspace method)": [[54, "pyNN.parameters.ParameterSpace.columns", false]], "computed_parameters() (pointneuron method)": [[53, "pyNN.standardmodels.cells.PointNeuron.computed_parameters", false]], "computed_parameters() (standardcelltype method)": [[53, "pyNN.standardmodels.StandardCellType.computed_parameters", false]], "computed_parameters() (standardsynapsetype method)": [[55, "pyNN.standardmodels.StandardSynapseType.computed_parameters", false]], "computed_parameters_include() (pointneuron method)": [[53, "pyNN.standardmodels.cells.PointNeuron.computed_parameters_include", false]], "computed_parameters_include() (standardsynapsetype method)": [[55, "pyNN.standardmodels.StandardSynapseType.computed_parameters_include", false]], "condalphapostsynapticresponse (class in pynn.standardmodels.receptors)": [[53, "pyNN.standardmodels.receptors.CondAlphaPostSynapticResponse", false]], "condbetapostsynapticresponse (class in pynn.standardmodels.receptors)": [[53, "pyNN.standardmodels.receptors.CondBetaPostSynapticResponse", false]], "condexppostsynapticresponse (class in pynn.standardmodels.receptors)": [[53, "pyNN.standardmodels.receptors.CondExpPostSynapticResponse", false]], "conductance_based (assembly property)": [[56, "pyNN.neuron.Assembly.conductance_based", false]], "conductance_based (condalphapostsynapticresponse attribute)": [[53, "pyNN.standardmodels.receptors.CondAlphaPostSynapticResponse.conductance_based", false]], "conductance_based (condbetapostsynapticresponse attribute)": [[53, "pyNN.standardmodels.receptors.CondBetaPostSynapticResponse.conductance_based", false]], "conductance_based (condexppostsynapticresponse attribute)": [[53, "pyNN.standardmodels.receptors.CondExpPostSynapticResponse.conductance_based", false]], "conductance_based (currexppostsynapticresponse attribute)": [[53, "pyNN.standardmodels.receptors.CurrExpPostSynapticResponse.conductance_based", false]], "conductance_based (eif_cond_alpha_isfa_ista attribute)": [[53, "pyNN.standardmodels.cells.EIF_cond_alpha_isfa_ista.conductance_based", false]], "conductance_based (eif_cond_exp_isfa_ista attribute)": [[53, "pyNN.standardmodels.cells.EIF_cond_exp_isfa_ista.conductance_based", false]], "conductance_based (if_cond_alpha attribute)": [[53, "pyNN.standardmodels.cells.IF_cond_alpha.conductance_based", false]], "conductance_based (if_cond_exp attribute)": [[53, "pyNN.standardmodels.cells.IF_cond_exp.conductance_based", false]], "conductance_based (if_cond_exp_gsfa_grr attribute)": [[53, "pyNN.standardmodels.cells.IF_cond_exp_gsfa_grr.conductance_based", false]], "conductance_based (if_curr_alpha attribute)": [[53, "id1", false], [53, "pyNN.standardmodels.cells.IF_curr_alpha.conductance_based", false]], "conductance_based (if_curr_exp attribute)": [[53, "id0", false], [53, "pyNN.standardmodels.cells.IF_curr_exp.conductance_based", false]], "conductance_based (izhikevich attribute)": [[53, "id2", false], [53, "pyNN.standardmodels.cells.Izhikevich.conductance_based", false]], "conductance_based (pointneuron attribute)": [[53, "pyNN.standardmodels.cells.PointNeuron.conductance_based", false]], "conductance_based (pointneuron property)": [[53, "id6", false]], "conductance_based (population property)": [[56, "pyNN.neuron.Population.conductance_based", false]], "conductance_based (populationview property)": [[56, "pyNN.neuron.PopulationView.conductance_based", false]], "conductance_based (spikesourcearray attribute)": [[53, "pyNN.standardmodels.cells.SpikeSourceArray.conductance_based", false]], "conductance_based (spikesourceinhgamma attribute)": [[53, "pyNN.standardmodels.cells.SpikeSourceInhGamma.conductance_based", false]], "conductance_based (spikesourcepoisson attribute)": [[53, "pyNN.standardmodels.cells.SpikeSourcePoisson.conductance_based", false]], "connect() (connector method)": [[51, "pyNN.connectors.Connector.connect", false]], "connect() (in module pynn.neuron)": [[57, "pyNN.neuron.connect", false]], "connection_type (standardsynapsetype attribute)": [[55, "pyNN.standardmodels.StandardSynapseType.connection_type", false]], "connections (projection property)": [[57, "pyNN.neuron.Projection.connections", false]], "connector (class in pynn.connectors)": [[51, "pyNN.connectors.Connector", false]], "create() (in module pynn.neuron)": [[56, "pyNN.neuron.create", false]], "csaconnector (class in pynn.connectors)": [[51, "pyNN.connectors.CSAConnector", false]], "cuboid (class in pynn.space)": [[60, "pyNN.space.Cuboid", false]], "currexppostsynapticresponse (class in pynn.standardmodels.receptors)": [[53, "pyNN.standardmodels.receptors.CurrExpPostSynapticResponse", false]], "dcsource (class in pynn.neuron.standardmodels.electrodes)": [[52, "pyNN.neuron.standardmodels.electrodes.DCSource", false]], "default_initial_values (adexp attribute)": [[53, "pyNN.standardmodels.cells.AdExp.default_initial_values", false]], "default_initial_values (condalphapostsynapticresponse attribute)": [[53, "pyNN.standardmodels.receptors.CondAlphaPostSynapticResponse.default_initial_values", false]], "default_initial_values (condbetapostsynapticresponse attribute)": [[53, "pyNN.standardmodels.receptors.CondBetaPostSynapticResponse.default_initial_values", false]], "default_initial_values (condexppostsynapticresponse attribute)": [[53, "pyNN.standardmodels.receptors.CondExpPostSynapticResponse.default_initial_values", false]], "default_initial_values (currexppostsynapticresponse attribute)": [[53, "pyNN.standardmodels.receptors.CurrExpPostSynapticResponse.default_initial_values", false]], "default_initial_values (eif_cond_alpha_isfa_ista attribute)": [[53, "pyNN.standardmodels.cells.EIF_cond_alpha_isfa_ista.default_initial_values", false]], "default_initial_values (eif_cond_exp_isfa_ista attribute)": [[53, "pyNN.standardmodels.cells.EIF_cond_exp_isfa_ista.default_initial_values", false]], "default_initial_values (if_cond_alpha attribute)": [[53, "pyNN.standardmodels.cells.IF_cond_alpha.default_initial_values", false]], "default_initial_values (if_cond_exp attribute)": [[53, "pyNN.standardmodels.cells.IF_cond_exp.default_initial_values", false]], "default_initial_values (if_cond_exp_gsfa_grr attribute)": [[53, "pyNN.standardmodels.cells.IF_cond_exp_gsfa_grr.default_initial_values", false]], "default_initial_values (if_curr_alpha attribute)": [[53, "pyNN.standardmodels.cells.IF_curr_alpha.default_initial_values", false]], "default_initial_values (if_curr_exp attribute)": [[53, "pyNN.standardmodels.cells.IF_curr_exp.default_initial_values", false]], "default_initial_values (izhikevich attribute)": [[53, "pyNN.standardmodels.cells.Izhikevich.default_initial_values", false]], "default_initial_values (lif attribute)": [[53, "pyNN.standardmodels.cells.LIF.default_initial_values", false]], "default_initial_values (pointneuron property)": [[53, "pyNN.standardmodels.cells.PointNeuron.default_initial_values", false]], "default_initial_values (standardsynapsetype attribute)": [[55, "pyNN.standardmodels.StandardSynapseType.default_initial_values", false]], "default_initial_values (tsodyksmarkramsynapse attribute)": [[55, "pyNN.standardmodels.synapses.TsodyksMarkramSynapse.default_initial_values", false]], "default_parameters (additivepotentiationmultiplicativedepression attribute)": [[55, "pyNN.standardmodels.synapses.AdditivePotentiationMultiplicativeDepression.default_parameters", false]], "default_parameters (additiveweightdependence attribute)": [[55, "pyNN.standardmodels.synapses.AdditiveWeightDependence.default_parameters", false]], "default_parameters (adexp attribute)": [[53, "pyNN.standardmodels.cells.AdExp.default_parameters", false]], "default_parameters (condalphapostsynapticresponse attribute)": [[53, "pyNN.standardmodels.receptors.CondAlphaPostSynapticResponse.default_parameters", false]], "default_parameters (condbetapostsynapticresponse attribute)": [[53, "pyNN.standardmodels.receptors.CondBetaPostSynapticResponse.default_parameters", false]], "default_parameters (condexppostsynapticresponse attribute)": [[53, "pyNN.standardmodels.receptors.CondExpPostSynapticResponse.default_parameters", false]], "default_parameters (currexppostsynapticresponse attribute)": [[53, "pyNN.standardmodels.receptors.CurrExpPostSynapticResponse.default_parameters", false]], "default_parameters (eif_cond_alpha_isfa_ista attribute)": [[53, "pyNN.standardmodels.cells.EIF_cond_alpha_isfa_ista.default_parameters", false]], "default_parameters (eif_cond_exp_isfa_ista attribute)": [[53, "pyNN.standardmodels.cells.EIF_cond_exp_isfa_ista.default_parameters", false]], "default_parameters (gutigweightdependence attribute)": [[55, "pyNN.standardmodels.synapses.GutigWeightDependence.default_parameters", false]], "default_parameters (if_cond_alpha attribute)": [[53, "pyNN.standardmodels.cells.IF_cond_alpha.default_parameters", false]], "default_parameters (if_cond_exp attribute)": [[53, "pyNN.standardmodels.cells.IF_cond_exp.default_parameters", false]], "default_parameters (if_cond_exp_gsfa_grr attribute)": [[53, "pyNN.standardmodels.cells.IF_cond_exp_gsfa_grr.default_parameters", false]], "default_parameters (if_curr_alpha attribute)": [[53, "pyNN.standardmodels.cells.IF_curr_alpha.default_parameters", false]], "default_parameters (if_curr_exp attribute)": [[53, "pyNN.standardmodels.cells.IF_curr_exp.default_parameters", false]], "default_parameters (izhikevich attribute)": [[53, "pyNN.standardmodels.cells.Izhikevich.default_parameters", false]], "default_parameters (lif attribute)": [[53, "pyNN.standardmodels.cells.LIF.default_parameters", false]], "default_parameters (multiplicativeweightdependence attribute)": [[55, "pyNN.standardmodels.synapses.MultiplicativeWeightDependence.default_parameters", false]], "default_parameters (spikepairrule attribute)": [[55, "pyNN.standardmodels.synapses.SpikePairRule.default_parameters", false]], "default_parameters (spikesourcearray attribute)": [[53, "pyNN.standardmodels.cells.SpikeSourceArray.default_parameters", false]], "default_parameters (spikesourceinhgamma attribute)": [[53, "pyNN.standardmodels.cells.SpikeSourceInhGamma.default_parameters", false]], "default_parameters (spikesourcepoisson attribute)": [[53, "pyNN.standardmodels.cells.SpikeSourcePoisson.default_parameters", false]], "default_parameters (standardsynapsetype attribute)": [[55, "pyNN.standardmodels.StandardSynapseType.default_parameters", false]], "default_parameters (staticsynapse attribute)": [[55, "pyNN.standardmodels.synapses.StaticSynapse.default_parameters", false]], "default_parameters (tsodyksmarkramsynapse attribute)": [[55, "pyNN.standardmodels.synapses.TsodyksMarkramSynapse.default_parameters", false]], "describe() (assembly method)": [[56, "pyNN.neuron.Assembly.describe", false]], "describe() (basestructure method)": [[60, "pyNN.space.BaseStructure.describe", false]], "describe() (connector method)": [[51, "pyNN.connectors.Connector.describe", false]], "describe() (gslrng method)": [[58, "pyNN.random.GSLRNG.describe", false]], "describe() (numpyrng method)": [[58, "pyNN.random.NumpyRNG.describe", false]], "describe() (population method)": [[56, "pyNN.neuron.Population.describe", false]], "describe() (populationview method)": [[56, "pyNN.neuron.PopulationView.describe", false]], "describe() (projection method)": [[57, "pyNN.neuron.Projection.describe", false]], "describe() (spikepairrule method)": [[55, "pyNN.standardmodels.synapses.SpikePairRule.describe", false]], "describe() (standardcelltype method)": [[53, "pyNN.standardmodels.StandardCellType.describe", false]], "describe() (standardsynapsetype method)": [[55, "pyNN.standardmodels.StandardSynapseType.describe", false]], "describe() (stdpmechanism method)": [[55, "pyNN.standardmodels.synapses.STDPMechanism.describe", false]], "describe() (stdpweightdependence method)": [[55, "pyNN.standardmodels.STDPWeightDependence.describe", false]], "diff() (timer method)": [[61, "pyNN.utility.Timer.diff", false]], "displacementdependentprobabilityconnector (class in pynn.connectors)": [[51, "pyNN.connectors.DisplacementDependentProbabilityConnector", false]], "distance_generator() (space method)": [[60, "pyNN.space.Space.distance_generator", false]], "distancedependentprobabilityconnector (class in pynn.connectors)": [[51, "pyNN.connectors.DistanceDependentProbabilityConnector", false]], "distances() (space method)": [[60, "pyNN.space.Space.distances", false]], "eif_cond_alpha_isfa_ista (class in pynn.standardmodels.cells)": [[53, "pyNN.standardmodels.cells.EIF_cond_alpha_isfa_ista", false]], "eif_cond_exp_isfa_ista (class in pynn.standardmodels.cells)": [[53, "pyNN.standardmodels.cells.EIF_cond_exp_isfa_ista", false]], "elapsed_time() (timer method)": [[61, "pyNN.utility.Timer.elapsed_time", false]], "elapsedtime() (timer method)": [[61, "pyNN.utility.Timer.elapsedTime", false]], "end() (in module pynn.neuron)": [[59, "pyNN.neuron.end", false]], "environment variable": [[15, "index-0", false], [15, "index-1", false]], "evaluate() (lazyarray method)": [[54, "pyNN.parameters.LazyArray.evaluate", false]], "evaluate() (parameterspace method)": [[54, "pyNN.parameters.ParameterSpace.evaluate", false]], "expand() (parameterspace method)": [[54, "pyNN.parameters.ParameterSpace.expand", false]], "extra_parameters (standardsynapsetype attribute)": [[55, "pyNN.standardmodels.StandardSynapseType.extra_parameters", false]], "find_units() (assembly method)": [[56, "pyNN.neuron.Assembly.find_units", false]], "find_units() (population method)": [[56, "pyNN.neuron.Population.find_units", false]], "find_units() (populationview method)": [[56, "pyNN.neuron.PopulationView.find_units", false]], "first_id (assembly property)": [[56, "pyNN.neuron.Assembly.first_id", false]], "fixednumberpostconnector (class in pynn.connectors)": [[51, "pyNN.connectors.FixedNumberPostConnector", false]], "fixednumberpreconnector (class in pynn.connectors)": [[51, "pyNN.connectors.FixedNumberPreConnector", false]], "fixedprobabilityconnector (class in pynn.connectors)": [[51, "pyNN.connectors.FixedProbabilityConnector", false]], "fixedtotalnumberconnector (class in pynn.connectors)": [[51, "pyNN.connectors.FixedTotalNumberConnector", false]], "flatten() (parameterspace method)": [[54, "pyNN.parameters.ParameterSpace.flatten", false]], "fromfileconnector (class in pynn.connectors)": [[51, "pyNN.connectors.FromFileConnector", false]], "fromlistconnector (class in pynn.connectors)": [[51, "pyNN.connectors.FromListConnector", false]], "gamma() (gslrng method)": [[58, "pyNN.random.GSLRNG.gamma", false]], "generate_positions() (basestructure method)": [[60, "pyNN.space.BaseStructure.generate_positions", false]], "generate_positions() (grid2d method)": [[60, "pyNN.space.Grid2D.generate_positions", false]], "generate_positions() (grid3d method)": [[60, "pyNN.space.Grid3D.generate_positions", false]], "generate_positions() (line method)": [[60, "pyNN.space.Line.generate_positions", false]], "generate_positions() (randomstructure method)": [[60, "pyNN.space.RandomStructure.generate_positions", false]], "get() (assembly method)": [[56, "pyNN.neuron.Assembly.get", false]], "get() (population method)": [[56, "pyNN.neuron.Population.get", false]], "get() (populationview method)": [[56, "pyNN.neuron.PopulationView.get", false]], "get() (projection method)": [[57, "pyNN.neuron.Projection.get", false]], "get_annotations() (assembly method)": [[56, "pyNN.neuron.Assembly.get_annotations", false]], "get_current_time() (in module pynn.neuron)": [[59, "pyNN.neuron.get_current_time", false]], "get_data() (assembly method)": [[56, "pyNN.neuron.Assembly.get_data", false]], "get_data() (population method)": [[56, "pyNN.neuron.Population.get_data", false]], "get_data() (populationview method)": [[56, "pyNN.neuron.PopulationView.get_data", false]], "get_gsyn() (assembly method)": [[56, "pyNN.neuron.Assembly.get_gsyn", false]], "get_gsyn() (population method)": [[56, "pyNN.neuron.Population.get_gsyn", false]], "get_gsyn() (populationview method)": [[56, "pyNN.neuron.PopulationView.get_gsyn", false]], "get_max_delay() (in module pynn.neuron)": [[59, "pyNN.neuron.get_max_delay", false]], "get_min_delay() (in module pynn.neuron)": [[59, "pyNN.neuron.get_min_delay", false]], "get_native_names() (standardcelltype method)": [[53, "pyNN.standardmodels.StandardCellType.get_native_names", false]], "get_native_names() (standardsynapsetype method)": [[55, "pyNN.standardmodels.StandardSynapseType.get_native_names", false]], "get_parameter_names() (standardcelltype class method)": [[53, "pyNN.standardmodels.StandardCellType.get_parameter_names", false]], "get_parameter_names() (standardsynapsetype class method)": [[55, "pyNN.standardmodels.StandardSynapseType.get_parameter_names", false]], "get_parameter_names() (stdpmechanism method)": [[55, "pyNN.standardmodels.synapses.STDPMechanism.get_parameter_names", false]], "get_parameters() (acsource method)": [[52, "pyNN.neuron.standardmodels.electrodes.ACSource.get_parameters", false]], "get_parameters() (basestructure method)": [[60, "pyNN.space.BaseStructure.get_parameters", false]], "get_parameters() (connector method)": [[51, "pyNN.connectors.Connector.get_parameters", false]], "get_parameters() (dcsource method)": [[52, "pyNN.neuron.standardmodels.electrodes.DCSource.get_parameters", false]], "get_parameters() (noisycurrentsource method)": [[52, "pyNN.neuron.standardmodels.electrodes.NoisyCurrentSource.get_parameters", false]], "get_parameters() (stepcurrentsource method)": [[52, "pyNN.neuron.standardmodels.electrodes.StepCurrentSource.get_parameters", false]], "get_population() (assembly method)": [[56, "pyNN.neuron.Assembly.get_population", false]], "get_schema() (standardcelltype method)": [[53, "pyNN.standardmodels.StandardCellType.get_schema", false]], "get_schema() (standardsynapsetype method)": [[55, "pyNN.standardmodels.StandardSynapseType.get_schema", false]], "get_schema() (stdpmechanism method)": [[55, "pyNN.standardmodels.synapses.STDPMechanism.get_schema", false]], "get_simulator() (in module pynn.utility)": [[61, "pyNN.utility.get_simulator", false]], "get_spike_counts() (assembly method)": [[56, "pyNN.neuron.Assembly.get_spike_counts", false]], "get_spike_counts() (population method)": [[56, "pyNN.neuron.Population.get_spike_counts", false]], "get_spike_counts() (populationview method)": [[56, "pyNN.neuron.PopulationView.get_spike_counts", false]], "get_time_step() (in module pynn.neuron)": [[59, "pyNN.neuron.get_time_step", false]], "get_v() (assembly method)": [[56, "pyNN.neuron.Assembly.get_v", false]], "get_v() (population method)": [[56, "pyNN.neuron.Population.get_v", false]], "get_v() (populationview method)": [[56, "pyNN.neuron.PopulationView.get_v", false]], "getdelays() (projection method)": [[57, "pyNN.neuron.Projection.getDelays", false]], "getspikes() (assembly method)": [[56, "pyNN.neuron.Assembly.getSpikes", false]], "getspikes() (population method)": [[56, "pyNN.neuron.Population.getSpikes", false]], "getspikes() (populationview method)": [[56, "pyNN.neuron.PopulationView.getSpikes", false]], "getsynapsedynamics() (projection method)": [[57, "pyNN.neuron.Projection.getSynapseDynamics", false]], "getweights() (projection method)": [[57, "pyNN.neuron.Projection.getWeights", false]], "grandparent (populationview property)": [[56, "pyNN.neuron.PopulationView.grandparent", false]], "grid2d (class in pynn.space)": [[60, "pyNN.space.Grid2D", false]], "grid3d (class in pynn.space)": [[60, "pyNN.space.Grid3D", false]], "gslrng (class in pynn.random)": [[58, "pyNN.random.GSLRNG", false]], "gutigweightdependence (class in pynn.standardmodels.synapses)": [[55, "pyNN.standardmodels.synapses.GutigWeightDependence", false]], "has_native_rngs (parameterspace property)": [[54, "pyNN.parameters.ParameterSpace.has_native_rngs", false]], "has_parameter() (standardcelltype class method)": [[53, "pyNN.standardmodels.StandardCellType.has_parameter", false]], "has_parameter() (standardsynapsetype class method)": [[55, "pyNN.standardmodels.StandardSynapseType.has_parameter", false]], "has_parameter() (stdpmechanism method)": [[55, "pyNN.standardmodels.synapses.STDPMechanism.has_parameter", false]], "has_presynaptic_components (standardsynapsetype attribute)": [[55, "pyNN.standardmodels.StandardSynapseType.has_presynaptic_components", false]], "id_to_index() (assembly method)": [[56, "pyNN.neuron.Assembly.id_to_index", false]], "id_to_index() (population method)": [[56, "pyNN.neuron.Population.id_to_index", false]], "id_to_index() (populationview method)": [[56, "pyNN.neuron.PopulationView.id_to_index", false]], "id_to_local_index() (population method)": [[56, "pyNN.neuron.Population.id_to_local_index", false]], "if_cond_alpha (class in pynn.standardmodels.cells)": [[53, "pyNN.standardmodels.cells.IF_cond_alpha", false]], "if_cond_exp (class in pynn.standardmodels.cells)": [[53, "pyNN.standardmodels.cells.IF_cond_exp", false]], "if_cond_exp_gsfa_grr (class in pynn.standardmodels.cells)": [[53, "pyNN.standardmodels.cells.IF_cond_exp_gsfa_grr", false]], "if_curr_alpha (class in pynn.standardmodels.cells)": [[53, "pyNN.standardmodels.cells.IF_curr_alpha", false]], "if_curr_exp (class in pynn.standardmodels.cells)": [[53, "pyNN.standardmodels.cells.IF_curr_exp", false]], "index_from_parent_index() (populationview method)": [[56, "pyNN.neuron.PopulationView.index_from_parent_index", false]], "index_in_grandparent() (populationview method)": [[56, "pyNN.neuron.PopulationView.index_in_grandparent", false]], "indexbasedprobabilityconnector (class in pynn.connectors)": [[51, "pyNN.connectors.IndexBasedProbabilityConnector", false]], "init_logging() (in module pynn.utility)": [[61, "pyNN.utility.init_logging", false]], "initial_values (population attribute)": [[56, "pyNN.neuron.Population.initial_values", false]], "initial_values (populationview attribute)": [[56, "pyNN.neuron.PopulationView.initial_values", false]], "initial_values (populationview property)": [[56, "id0", false]], "initialize() (assembly method)": [[56, "pyNN.neuron.Assembly.initialize", false]], "initialize() (in module pynn.neuron)": [[59, "pyNN.neuron.initialize", false]], "initialize() (population method)": [[56, "pyNN.neuron.Population.initialize", false]], "initialize() (populationview method)": [[56, "pyNN.neuron.PopulationView.initialize", false]], "initialize() (projection method)": [[57, "pyNN.neuron.Projection.initialize", false]], "inject() (assembly method)": [[56, "pyNN.neuron.Assembly.inject", false]], "inject() (population method)": [[56, "pyNN.neuron.Population.inject", false]], "inject() (populationview method)": [[56, "pyNN.neuron.PopulationView.inject", false]], "inject_into() (acsource method)": [[52, "pyNN.neuron.standardmodels.electrodes.ACSource.inject_into", false]], "inject_into() (dcsource method)": [[52, "pyNN.neuron.standardmodels.electrodes.DCSource.inject_into", false]], "inject_into() (noisycurrentsource method)": [[52, "pyNN.neuron.standardmodels.electrodes.NoisyCurrentSource.inject_into", false]], "inject_into() (stepcurrentsource method)": [[52, "pyNN.neuron.standardmodels.electrodes.StepCurrentSource.inject_into", false]], "injectable (adexp attribute)": [[53, "pyNN.standardmodels.cells.AdExp.injectable", false]], "injectable (assembly property)": [[56, "pyNN.neuron.Assembly.injectable", false]], "injectable (eif_cond_alpha_isfa_ista attribute)": [[53, "pyNN.standardmodels.cells.EIF_cond_alpha_isfa_ista.injectable", false]], "injectable (eif_cond_exp_isfa_ista attribute)": [[53, "pyNN.standardmodels.cells.EIF_cond_exp_isfa_ista.injectable", false]], "injectable (if_cond_alpha attribute)": [[53, "pyNN.standardmodels.cells.IF_cond_alpha.injectable", false]], "injectable (if_cond_exp attribute)": [[53, "pyNN.standardmodels.cells.IF_cond_exp.injectable", false]], "injectable (if_cond_exp_gsfa_grr attribute)": [[53, "pyNN.standardmodels.cells.IF_cond_exp_gsfa_grr.injectable", false]], "injectable (if_curr_alpha attribute)": [[53, "pyNN.standardmodels.cells.IF_curr_alpha.injectable", false]], "injectable (if_curr_exp attribute)": [[53, "pyNN.standardmodels.cells.IF_curr_exp.injectable", false]], "injectable (izhikevich attribute)": [[53, "pyNN.standardmodels.cells.Izhikevich.injectable", false]], "injectable (lif attribute)": [[53, "pyNN.standardmodels.cells.LIF.injectable", false]], "injectable (pointneuron attribute)": [[53, "pyNN.standardmodels.cells.PointNeuron.injectable", false]], "injectable (population property)": [[56, "pyNN.neuron.Population.injectable", false]], "injectable (populationview property)": [[56, "pyNN.neuron.PopulationView.injectable", false]], "injectable (spikesourcearray attribute)": [[53, "id4", false], [53, "pyNN.standardmodels.cells.SpikeSourceArray.injectable", false]], "injectable (spikesourceinhgamma attribute)": [[53, "id5", false], [53, "pyNN.standardmodels.cells.SpikeSourceInhGamma.injectable", false]], "injectable (spikesourcepoisson attribute)": [[53, "id3", false], [53, "pyNN.standardmodels.cells.SpikeSourcePoisson.injectable", false]], "is_homogeneous (lazyarray property)": [[54, "pyNN.parameters.LazyArray.is_homogeneous", false]], "is_homogeneous (parameterspace property)": [[54, "pyNN.parameters.ParameterSpace.is_homogeneous", false]], "is_local() (population method)": [[56, "pyNN.neuron.Population.is_local", false]], "is_local() (populationview method)": [[56, "pyNN.neuron.PopulationView.is_local", false]], "items() (parameterspace method)": [[54, "pyNN.parameters.ParameterSpace.items", false]], "izhikevich (class in pynn.standardmodels.cells)": [[53, "pyNN.standardmodels.cells.Izhikevich", false]], "keys() (parameterspace method)": [[54, "pyNN.parameters.ParameterSpace.keys", false]], "label (population attribute)": [[56, "pyNN.neuron.Population.label", false]], "label (populationview attribute)": [[56, "pyNN.neuron.PopulationView.label", false]], "label (projection attribute)": [[57, "pyNN.neuron.Projection.label", false]], "last_id (assembly property)": [[56, "pyNN.neuron.Assembly.last_id", false]], "lazily_evaluate() (randomdistribution method)": [[58, "pyNN.random.RandomDistribution.lazily_evaluate", false]], "lazyarray (class in pynn.parameters)": [[54, "pyNN.parameters.LazyArray", false]], "lif (class in pynn.standardmodels.cells)": [[53, "pyNN.standardmodels.cells.LIF", false]], "line (class in pynn.space)": [[60, "pyNN.space.Line", false]], "list_standard_models() (in module pynn.neuron)": [[53, "pyNN.neuron.list_standard_models", false]], "load_population() (in module pynn.utility)": [[61, "pyNN.utility.load_population", false]], "local_cells (assembly property)": [[56, "pyNN.neuron.Assembly.local_cells", false]], "local_cells (population property)": [[56, "pyNN.neuron.Population.local_cells", false]], "local_cells (populationview attribute)": [[56, "pyNN.neuron.PopulationView.local_cells", false]], "local_size (population property)": [[56, "pyNN.neuron.Population.local_size", false]], "local_size (populationview property)": [[56, "pyNN.neuron.PopulationView.local_size", false]], "mark() (timer method)": [[61, "pyNN.utility.Timer.mark", false]], "mask (populationview attribute)": [[56, "pyNN.neuron.PopulationView.mask", false]], "mean_spike_count() (assembly method)": [[56, "pyNN.neuron.Assembly.mean_spike_count", false]], "mean_spike_count() (population method)": [[56, "pyNN.neuron.Population.mean_spike_count", false]], "mean_spike_count() (populationview method)": [[56, "pyNN.neuron.PopulationView.mean_spike_count", false]], "meanspikecount() (population method)": [[56, "pyNN.neuron.Population.meanSpikeCount", false]], "meanspikecount() (populationview method)": [[56, "pyNN.neuron.PopulationView.meanSpikeCount", false]], "model (stdpmechanism property)": [[55, "pyNN.standardmodels.synapses.STDPMechanism.model", false]], "module": [[51, "module-pyNN.connectors", false], [54, "module-pyNN.parameters", false], [58, "module-pyNN.random", false], [60, "module-pyNN.space", false]], "multi_synapse_operations (projection attribute)": [[57, "pyNN.neuron.Projection.MULTI_SYNAPSE_OPERATIONS", false]], "multiplicativeweightdependence (class in pynn.standardmodels.synapses)": [[55, "pyNN.standardmodels.synapses.MultiplicativeWeightDependence", false]], "native_parameters (standardsynapsetype property)": [[55, "pyNN.standardmodels.StandardSynapseType.native_parameters", false]], "native_parameters (stdpmechanism property)": [[55, "pyNN.standardmodels.synapses.STDPMechanism.native_parameters", false]], "nativerng (class in pynn.random)": [[58, "pyNN.random.NativeRNG", false]], "ncols (lazyarray property)": [[54, "pyNN.parameters.LazyArray.ncols", false]], "nearest() (population method)": [[56, "pyNN.neuron.Population.nearest", false]], "nearest() (populationview method)": [[56, "pyNN.neuron.PopulationView.nearest", false]], "next() (gslrng method)": [[58, "pyNN.random.GSLRNG.next", false]], "next() (nativerng method)": [[58, "pyNN.random.NativeRNG.next", false]], "next() (numpyrng method)": [[58, "pyNN.random.NumpyRNG.next", false]], "next() (randomdistribution method)": [[58, "pyNN.random.RandomDistribution.next", false]], "noisycurrentsource (class in pynn.neuron.standardmodels.electrodes)": [[52, "pyNN.neuron.standardmodels.electrodes.NoisyCurrentSource", false]], "normal() (gslrng method)": [[58, "pyNN.random.GSLRNG.normal", false]], "normal_clipped() (gslrng method)": [[58, "pyNN.random.GSLRNG.normal_clipped", false]], "normal_clipped() (numpyrng method)": [[58, "pyNN.random.NumpyRNG.normal_clipped", false]], "normal_clipped_to_boundary() (numpyrng method)": [[58, "pyNN.random.NumpyRNG.normal_clipped_to_boundary", false]], "notify() (in module pynn.utility)": [[61, "pyNN.utility.notify", false]], "nrows (lazyarray property)": [[54, "pyNN.parameters.LazyArray.nrows", false]], "num_processes() (in module pynn.neuron)": [[59, "pyNN.neuron.num_processes", false]], "numpyrng (class in pynn.random)": [[58, "pyNN.random.NumpyRNG", false]], "onetooneconnector (class in pynn.connectors)": [[51, "pyNN.connectors.OneToOneConnector", false]], "parallel_safe (parameterspace property)": [[54, "pyNN.parameters.ParameterSpace.parallel_safe", false]], "parameter_checks (standardsynapsetype attribute)": [[55, "pyNN.standardmodels.StandardSynapseType.parameter_checks", false]], "parameter_names (grid2d attribute)": [[60, "pyNN.space.Grid2D.parameter_names", false]], "parameter_names (grid3d attribute)": [[60, "pyNN.space.Grid3D.parameter_names", false]], "parameter_names (line attribute)": [[60, "pyNN.space.Line.parameter_names", false]], "parameter_names (randomstructure attribute)": [[60, "pyNN.space.RandomStructure.parameter_names", false]], "parameter_space (stdpmechanism property)": [[55, "pyNN.standardmodels.synapses.STDPMechanism.parameter_space", false]], "parameterspace (class in pynn.parameters)": [[54, "pyNN.parameters.ParameterSpace", false]], "parent (populationview attribute)": [[56, "pyNN.neuron.PopulationView.parent", false]], "pointneuron (class in pynn.standardmodels.cells)": [[53, "pyNN.standardmodels.cells.PointNeuron", false]], "pop() (parameterspace method)": [[54, "pyNN.parameters.ParameterSpace.pop", false]], "population (class in pynn.neuron)": [[56, "pyNN.neuron.Population", false]], "populationview (class in pynn.neuron)": [[56, "pyNN.neuron.PopulationView", false]], "position_generator (assembly property)": [[56, "pyNN.neuron.Assembly.position_generator", false]], "position_generator (population property)": [[56, "pyNN.neuron.Population.position_generator", false]], "position_generator (populationview property)": [[56, "pyNN.neuron.PopulationView.position_generator", false]], "positions (assembly property)": [[56, "pyNN.neuron.Assembly.positions", false]], "positions (population property)": [[56, "pyNN.neuron.Population.positions", false]], "positions (populationview property)": [[56, "pyNN.neuron.PopulationView.positions", false]], "possible_models (stdpmechanism property)": [[55, "pyNN.standardmodels.synapses.STDPMechanism.possible_models", false]], "post (projection attribute)": [[57, "pyNN.neuron.Projection.post", false]], "pre (projection attribute)": [[57, "pyNN.neuron.Projection.pre", false]], "print_gsyn() (assembly method)": [[56, "pyNN.neuron.Assembly.print_gsyn", false]], "print_gsyn() (population method)": [[56, "pyNN.neuron.Population.print_gsyn", false]], "print_gsyn() (populationview method)": [[56, "pyNN.neuron.PopulationView.print_gsyn", false]], "print_v() (assembly method)": [[56, "pyNN.neuron.Assembly.print_v", false]], "print_v() (population method)": [[56, "pyNN.neuron.Population.print_v", false]], "print_v() (populationview method)": [[56, "pyNN.neuron.PopulationView.print_v", false]], "printdelays() (projection method)": [[57, "pyNN.neuron.Projection.printDelays", false]], "printspikes() (assembly method)": [[56, "pyNN.neuron.Assembly.printSpikes", false]], "printspikes() (population method)": [[56, "pyNN.neuron.Population.printSpikes", false]], "printspikes() (populationview method)": [[56, "pyNN.neuron.PopulationView.printSpikes", false]], "printweights() (projection method)": [[57, "pyNN.neuron.Projection.printWeights", false]], "progressbar (class in pynn.utility)": [[61, "pyNN.utility.ProgressBar", false]], "projection (class in pynn.neuron)": [[57, "pyNN.neuron.Projection", false]], "pynn.connectors": [[51, "module-pyNN.connectors", false]], "pynn.parameters": [[54, "module-pyNN.parameters", false]], "pynn.random": [[58, "module-pyNN.random", false]], "pynn.space": [[60, "module-pyNN.space", false]], "pythonpath": [[15, "index-0", false], [15, "index-1", false]], "randomdistribution (class in pynn.random)": [[58, "pyNN.random.RandomDistribution", false]], "randomizedelays() (projection method)": [[57, "pyNN.neuron.Projection.randomizeDelays", false]], "randomizesynapsedynamics() (projection method)": [[57, "pyNN.neuron.Projection.randomizeSynapseDynamics", false]], "randomizeweights() (projection method)": [[57, "pyNN.neuron.Projection.randomizeWeights", false]], "randomstructure (class in pynn.space)": [[60, "pyNN.space.RandomStructure", false]], "rank() (in module pynn.neuron)": [[59, "pyNN.neuron.rank", false]], "receptor_types (assembly property)": [[56, "pyNN.neuron.Assembly.receptor_types", false]], "receptor_types (pointneuron property)": [[53, "pyNN.standardmodels.cells.PointNeuron.receptor_types", false]], "receptor_types (population property)": [[56, "pyNN.neuron.Population.receptor_types", false]], "receptor_types (populationview property)": [[56, "pyNN.neuron.PopulationView.receptor_types", false]], "receptor_types (spikesourcearray attribute)": [[53, "pyNN.standardmodels.cells.SpikeSourceArray.receptor_types", false]], "receptor_types (spikesourceinhgamma attribute)": [[53, "pyNN.standardmodels.cells.SpikeSourceInhGamma.receptor_types", false]], "receptor_types (spikesourcepoisson attribute)": [[53, "pyNN.standardmodels.cells.SpikeSourcePoisson.receptor_types", false]], "record() (assembly method)": [[56, "pyNN.neuron.Assembly.record", false]], "record() (in module pynn.neuron)": [[59, "pyNN.neuron.record", false]], "record() (population method)": [[56, "pyNN.neuron.Population.record", false]], "record() (populationview method)": [[56, "pyNN.neuron.PopulationView.record", false]], "record_gsyn() (assembly method)": [[56, "pyNN.neuron.Assembly.record_gsyn", false]], "record_gsyn() (population method)": [[56, "pyNN.neuron.Population.record_gsyn", false]], "record_gsyn() (populationview method)": [[56, "pyNN.neuron.PopulationView.record_gsyn", false]], "record_v() (assembly method)": [[56, "pyNN.neuron.Assembly.record_v", false]], "record_v() (population method)": [[56, "pyNN.neuron.Population.record_v", false]], "record_v() (populationview method)": [[56, "pyNN.neuron.PopulationView.record_v", false]], "recordable (adexp attribute)": [[53, "pyNN.standardmodels.cells.AdExp.recordable", false]], "recordable (eif_cond_alpha_isfa_ista attribute)": [[53, "pyNN.standardmodels.cells.EIF_cond_alpha_isfa_ista.recordable", false]], "recordable (eif_cond_exp_isfa_ista attribute)": [[53, "pyNN.standardmodels.cells.EIF_cond_exp_isfa_ista.recordable", false]], "recordable (if_cond_alpha attribute)": [[53, "pyNN.standardmodels.cells.IF_cond_alpha.recordable", false]], "recordable (if_cond_exp attribute)": [[53, "pyNN.standardmodels.cells.IF_cond_exp.recordable", false]], "recordable (if_cond_exp_gsfa_grr attribute)": [[53, "pyNN.standardmodels.cells.IF_cond_exp_gsfa_grr.recordable", false]], "recordable (if_curr_alpha attribute)": [[53, "pyNN.standardmodels.cells.IF_curr_alpha.recordable", false]], "recordable (if_curr_exp attribute)": [[53, "pyNN.standardmodels.cells.IF_curr_exp.recordable", false]], "recordable (izhikevich attribute)": [[53, "pyNN.standardmodels.cells.Izhikevich.recordable", false]], "recordable (lif attribute)": [[53, "pyNN.standardmodels.cells.LIF.recordable", false]], "recordable (pointneuron property)": [[53, "pyNN.standardmodels.cells.PointNeuron.recordable", false]], "recordable (spikesourcearray attribute)": [[53, "pyNN.standardmodels.cells.SpikeSourceArray.recordable", false]], "recordable (spikesourceinhgamma attribute)": [[53, "pyNN.standardmodels.cells.SpikeSourceInhGamma.recordable", false]], "recordable (spikesourcepoisson attribute)": [[53, "pyNN.standardmodels.cells.SpikeSourcePoisson.recordable", false]], "reset() (in module pynn.neuron)": [[59, "pyNN.neuron.reset", false]], "reset() (timer method)": [[61, "pyNN.utility.Timer.reset", false]], "reverse_translate() (standardcelltype method)": [[53, "pyNN.standardmodels.StandardCellType.reverse_translate", false]], "reverse_translate() (standardsynapsetype method)": [[55, "pyNN.standardmodels.StandardSynapseType.reverse_translate", false]], "rng (projection attribute)": [[57, "pyNN.neuron.Projection.rng", false]], "rset() (assembly method)": [[56, "pyNN.neuron.Assembly.rset", false]], "rset() (population method)": [[56, "pyNN.neuron.Population.rset", false]], "rset() (populationview method)": [[56, "pyNN.neuron.PopulationView.rset", false]], "run() (in module pynn.neuron)": [[59, "pyNN.neuron.run", false]], "run_until() (in module pynn.neuron)": [[59, "pyNN.neuron.run_until", false]], "sample() (assembly method)": [[56, "pyNN.neuron.Assembly.sample", false]], "sample() (cuboid method)": [[60, "pyNN.space.Cuboid.sample", false]], "sample() (population method)": [[56, "pyNN.neuron.Population.sample", false]], "sample() (populationview method)": [[56, "pyNN.neuron.PopulationView.sample", false]], "sample() (sphere method)": [[60, "pyNN.space.Sphere.sample", false]], "save() (projection method)": [[57, "pyNN.neuron.Projection.save", false]], "save_population() (in module pynn.utility)": [[61, "pyNN.utility.save_population", false]], "save_positions() (assembly method)": [[56, "pyNN.neuron.Assembly.save_positions", false]], "save_positions() (population method)": [[56, "pyNN.neuron.Population.save_positions", false]], "save_positions() (populationview method)": [[56, "pyNN.neuron.PopulationView.save_positions", false]], "saveconnections() (projection method)": [[57, "pyNN.neuron.Projection.saveConnections", false]], "scale_factors (pointneuron property)": [[53, "pyNN.standardmodels.cells.PointNeuron.scale_factors", false]], "scaled_parameters() (pointneuron method)": [[53, "pyNN.standardmodels.cells.PointNeuron.scaled_parameters", false]], "scaled_parameters() (standardcelltype method)": [[53, "pyNN.standardmodels.StandardCellType.scaled_parameters", false]], "scaled_parameters() (standardsynapsetype method)": [[55, "pyNN.standardmodels.StandardSynapseType.scaled_parameters", false]], "sequence (class in pynn.parameters)": [[54, "pyNN.parameters.Sequence", false]], "set() (assembly method)": [[56, "pyNN.neuron.Assembly.set", false]], "set() (in module pynn.neuron)": [[59, "pyNN.neuron.set", false]], "set() (population method)": [[56, "pyNN.neuron.Population.set", false]], "set() (populationview method)": [[56, "pyNN.neuron.PopulationView.set", false]], "set() (projection method)": [[57, "pyNN.neuron.Projection.set", false]], "set_level() (progressbar method)": [[61, "pyNN.utility.ProgressBar.set_level", false]], "set_parameters() (acsource method)": [[52, "pyNN.neuron.standardmodels.electrodes.ACSource.set_parameters", false]], "set_parameters() (dcsource method)": [[52, "pyNN.neuron.standardmodels.electrodes.DCSource.set_parameters", false]], "set_parameters() (noisycurrentsource method)": [[52, "pyNN.neuron.standardmodels.electrodes.NoisyCurrentSource.set_parameters", false]], "set_parameters() (stepcurrentsource method)": [[52, "pyNN.neuron.standardmodels.electrodes.StepCurrentSource.set_parameters", false]], "setdelays() (projection method)": [[57, "pyNN.neuron.Projection.setDelays", false]], "setsynapsedynamics() (projection method)": [[57, "pyNN.neuron.Projection.setSynapseDynamics", false]], "setup() (in module pynn.neuron)": [[59, "pyNN.neuron.setup", false]], "setweights() (projection method)": [[57, "pyNN.neuron.Projection.setWeights", false]], "shape (lazyarray property)": [[54, "pyNN.parameters.LazyArray.shape", false]], "shape (parameterspace property)": [[54, "pyNN.parameters.ParameterSpace.shape", false]], "shape (projection property)": [[57, "pyNN.neuron.Projection.shape", false]], "simple_parameters() (pointneuron method)": [[53, "pyNN.standardmodels.cells.PointNeuron.simple_parameters", false]], "simple_parameters() (standardcelltype method)": [[53, "pyNN.standardmodels.StandardCellType.simple_parameters", false]], "simple_parameters() (standardsynapsetype method)": [[55, "pyNN.standardmodels.StandardSynapseType.simple_parameters", false]], "size (assembly property)": [[56, "pyNN.neuron.Assembly.size", false]], "size (lazyarray property)": [[54, "pyNN.parameters.LazyArray.size", false]], "size (population attribute)": [[56, "pyNN.neuron.Population.size", false]], "size (populationview attribute)": [[56, "pyNN.neuron.PopulationView.size", false]], "size() (projection method)": [[57, "pyNN.neuron.Projection.size", false]], "smallworldconnector (class in pynn.connectors)": [[51, "pyNN.connectors.SmallWorldConnector", false]], "source (projection attribute)": [[57, "pyNN.neuron.Projection.source", false]], "space (class in pynn.space)": [[60, "pyNN.space.Space", false]], "sphere (class in pynn.space)": [[60, "pyNN.space.Sphere", false]], "spikepairrule (class in pynn.standardmodels.synapses)": [[55, "pyNN.standardmodels.synapses.SpikePairRule", false]], "spikesourcearray (class in pynn.standardmodels.cells)": [[53, "pyNN.standardmodels.cells.SpikeSourceArray", false]], "spikesourceinhgamma (class in pynn.standardmodels.cells)": [[53, "pyNN.standardmodels.cells.SpikeSourceInhGamma", false]], "spikesourcepoisson (class in pynn.standardmodels.cells)": [[53, "pyNN.standardmodels.cells.SpikeSourcePoisson", false]], "standardcelltype (class in pynn.standardmodels)": [[53, "pyNN.standardmodels.StandardCellType", false]], "standardsynapsetype (class in pynn.standardmodels)": [[55, "pyNN.standardmodels.StandardSynapseType", false]], "start() (timer method)": [[61, "pyNN.utility.Timer.start", false]], "staticsynapse (class in pynn.standardmodels.synapses)": [[55, "pyNN.standardmodels.synapses.StaticSynapse", false]], "stdpmechanism (class in pynn.standardmodels.synapses)": [[55, "pyNN.standardmodels.synapses.STDPMechanism", false]], "stdptimingdependence (class in pynn.standardmodels)": [[55, "pyNN.standardmodels.STDPTimingDependence", false]], "stdpweightdependence (class in pynn.standardmodels)": [[55, "pyNN.standardmodels.STDPWeightDependence", false]], "stepcurrentsource (class in pynn.neuron.standardmodels.electrodes)": [[52, "pyNN.neuron.standardmodels.electrodes.StepCurrentSource", false]], "structure (population property)": [[56, "pyNN.neuron.Population.structure", false]], "structure (populationview property)": [[56, "pyNN.neuron.PopulationView.structure", false]], "synapse_dynamics (projection attribute)": [[57, "pyNN.neuron.Projection.synapse_dynamics", false]], "target (projection attribute)": [[57, "pyNN.neuron.Projection.target", false]], "time_in_words() (timer static method)": [[61, "pyNN.utility.Timer.time_in_words", false]], "timer (class in pynn.utility)": [[61, "pyNN.utility.Timer", false]], "translate() (standardcelltype method)": [[53, "pyNN.standardmodels.StandardCellType.translate", false]], "translate() (standardsynapsetype method)": [[55, "pyNN.standardmodels.StandardSynapseType.translate", false]], "translations (gslrng attribute)": [[58, "pyNN.random.GSLRNG.translations", false]], "translations (numpyrng attribute)": [[58, "pyNN.random.NumpyRNG.translations", false]], "translations (standardsynapsetype attribute)": [[55, "pyNN.standardmodels.StandardSynapseType.translations", false]], "tset() (population method)": [[56, "pyNN.neuron.Population.tset", false]], "tset() (populationview method)": [[56, "pyNN.neuron.PopulationView.tset", false]], "tsodyksmarkramsynapse (class in pynn.standardmodels.synapses)": [[55, "pyNN.standardmodels.synapses.TsodyksMarkramSynapse", false]], "uniform_int() (gslrng method)": [[58, "pyNN.random.GSLRNG.uniform_int", false]], "units (adexp attribute)": [[53, "pyNN.standardmodels.cells.AdExp.units", false]], "units (condalphapostsynapticresponse attribute)": [[53, "pyNN.standardmodels.receptors.CondAlphaPostSynapticResponse.units", false]], "units (condbetapostsynapticresponse attribute)": [[53, "pyNN.standardmodels.receptors.CondBetaPostSynapticResponse.units", false]], "units (condexppostsynapticresponse attribute)": [[53, "pyNN.standardmodels.receptors.CondExpPostSynapticResponse.units", false]], "units (currexppostsynapticresponse attribute)": [[53, "pyNN.standardmodels.receptors.CurrExpPostSynapticResponse.units", false]], "units (eif_cond_alpha_isfa_ista attribute)": [[53, "pyNN.standardmodels.cells.EIF_cond_alpha_isfa_ista.units", false]], "units (eif_cond_exp_isfa_ista attribute)": [[53, "pyNN.standardmodels.cells.EIF_cond_exp_isfa_ista.units", false]], "units (if_cond_alpha attribute)": [[53, "pyNN.standardmodels.cells.IF_cond_alpha.units", false]], "units (if_cond_exp attribute)": [[53, "pyNN.standardmodels.cells.IF_cond_exp.units", false]], "units (if_cond_exp_gsfa_grr attribute)": [[53, "pyNN.standardmodels.cells.IF_cond_exp_gsfa_grr.units", false]], "units (if_curr_alpha attribute)": [[53, "pyNN.standardmodels.cells.IF_curr_alpha.units", false]], "units (if_curr_exp attribute)": [[53, "pyNN.standardmodels.cells.IF_curr_exp.units", false]], "units (izhikevich attribute)": [[53, "pyNN.standardmodels.cells.Izhikevich.units", false]], "units (lif attribute)": [[53, "pyNN.standardmodels.cells.LIF.units", false]], "units (pointneuron property)": [[53, "pyNN.standardmodels.cells.PointNeuron.units", false]], "units (spikesourcearray attribute)": [[53, "pyNN.standardmodels.cells.SpikeSourceArray.units", false]], "units (spikesourceinhgamma attribute)": [[53, "pyNN.standardmodels.cells.SpikeSourceInhGamma.units", false]], "units (spikesourcepoisson attribute)": [[53, "pyNN.standardmodels.cells.SpikeSourcePoisson.units", false]], "update() (parameterspace method)": [[54, "pyNN.parameters.ParameterSpace.update", false]], "voltage_based_synapses (izhikevich attribute)": [[53, "pyNN.standardmodels.cells.Izhikevich.voltage_based_synapses", false]], "weighthistogram() (projection method)": [[57, "pyNN.neuron.Projection.weightHistogram", false]], "write_data() (assembly method)": [[56, "pyNN.neuron.Assembly.write_data", false]], "write_data() (population method)": [[56, "pyNN.neuron.Population.write_data", false]], "write_data() (populationview method)": [[56, "pyNN.neuron.PopulationView.write_data", false]]}, "objects": {"pyNN": [[51, 0, 0, "-", "connectors"], [54, 0, 0, "-", "parameters"], [58, 0, 0, "-", "random"], [60, 0, 0, "-", "space"]], "pyNN.connectors": [[51, 1, 1, "", "AllToAllConnector"], [51, 1, 1, "", "ArrayConnector"], [51, 1, 1, "", "CSAConnector"], [51, 1, 1, "", "CloneConnector"], [51, 1, 1, "", "Connector"], [51, 1, 1, "", "DisplacementDependentProbabilityConnector"], [51, 1, 1, "", "DistanceDependentProbabilityConnector"], [51, 1, 1, "", "FixedNumberPostConnector"], [51, 1, 1, "", "FixedNumberPreConnector"], [51, 1, 1, "", "FixedProbabilityConnector"], [51, 1, 1, "", "FixedTotalNumberConnector"], [51, 1, 1, "", "FromFileConnector"], [51, 1, 1, "", "FromListConnector"], [51, 1, 1, "", "IndexBasedProbabilityConnector"], [51, 1, 1, "", "OneToOneConnector"], [51, 1, 1, "", "SmallWorldConnector"]], "pyNN.connectors.Connector": [[51, 2, 1, "", "connect"], [51, 2, 1, "", "describe"], [51, 2, 1, "", "get_parameters"]], "pyNN.neuron": [[56, 1, 1, "", "Assembly"], [56, 1, 1, "", "Population"], [56, 1, 1, "", "PopulationView"], [57, 1, 1, "", "Projection"], [57, 5, 1, "", "connect"], [56, 5, 1, "", "create"], [59, 5, 1, "", "end"], [59, 5, 1, "", "get_current_time"], [59, 5, 1, "", "get_max_delay"], [59, 5, 1, "", "get_min_delay"], [59, 5, 1, "", "get_time_step"], [59, 5, 1, "", "initialize"], [53, 5, 1, "", "list_standard_models"], [59, 5, 1, "", "num_processes"], [59, 5, 1, "", "rank"], [59, 5, 1, "", "record"], [59, 5, 1, "", "reset"], [59, 5, 1, "", "run"], [59, 5, 1, "", "run_until"], [59, 5, 1, "", "set"], [59, 5, 1, "", "setup"]], "pyNN.neuron.Assembly": [[56, 2, 1, "", "__add__"], [56, 2, 1, "", "__getitem__"], [56, 2, 1, "", "__iadd__"], [56, 2, 1, "", "__iter__"], [56, 2, 1, "", "__len__"], [56, 2, 1, "", "all"], [56, 3, 1, "", "all_cells"], [56, 3, 1, "", "conductance_based"], [56, 2, 1, "", "describe"], [56, 2, 1, "", "find_units"], [56, 3, 1, "", "first_id"], [56, 2, 1, "", "get"], [56, 2, 1, "", "getSpikes"], [56, 2, 1, "", "get_annotations"], [56, 2, 1, "", "get_data"], [56, 2, 1, "", "get_gsyn"], [56, 2, 1, "", "get_population"], [56, 2, 1, "", "get_spike_counts"], [56, 2, 1, "", "get_v"], [56, 2, 1, "", "id_to_index"], [56, 2, 1, "", "initialize"], [56, 2, 1, "", "inject"], [56, 3, 1, "", "injectable"], [56, 3, 1, "", "last_id"], [56, 3, 1, "", "local_cells"], [56, 2, 1, "", "mean_spike_count"], [56, 3, 1, "", "position_generator"], [56, 3, 1, "", "positions"], [56, 2, 1, "", "printSpikes"], [56, 2, 1, "", "print_gsyn"], [56, 2, 1, "", "print_v"], [56, 3, 1, "", "receptor_types"], [56, 2, 1, "", "record"], [56, 2, 1, "", "record_gsyn"], [56, 2, 1, "", "record_v"], [56, 2, 1, "", "rset"], [56, 2, 1, "", "sample"], [56, 2, 1, "", "save_positions"], [56, 2, 1, "", "set"], [56, 3, 1, "", "size"], [56, 2, 1, "", "write_data"]], "pyNN.neuron.Population": [[56, 2, 1, "", "__add__"], [56, 2, 1, "", "__getitem__"], [56, 2, 1, "", "__iter__"], [56, 2, 1, "", "__len__"], [56, 2, 1, "", "all"], [56, 4, 1, "", "all_cells"], [56, 2, 1, "", "annotate"], [56, 2, 1, "", "can_record"], [56, 4, 1, "", "celltype"], [56, 3, 1, "", "conductance_based"], [56, 2, 1, "", "describe"], [56, 2, 1, "", "find_units"], [56, 2, 1, "", "get"], [56, 2, 1, "", "getSpikes"], [56, 2, 1, "", "get_data"], [56, 2, 1, "", "get_gsyn"], [56, 2, 1, "", "get_spike_counts"], [56, 2, 1, "", "get_v"], [56, 2, 1, "", "id_to_index"], [56, 2, 1, "", "id_to_local_index"], [56, 4, 1, "", "initial_values"], [56, 2, 1, "", "initialize"], [56, 2, 1, "", "inject"], [56, 3, 1, "", "injectable"], [56, 2, 1, "", "is_local"], [56, 4, 1, "", "label"], [56, 3, 1, "", "local_cells"], [56, 3, 1, "", "local_size"], [56, 2, 1, "", "meanSpikeCount"], [56, 2, 1, "", "mean_spike_count"], [56, 2, 1, "", "nearest"], [56, 3, 1, "", "position_generator"], [56, 3, 1, "", "positions"], [56, 2, 1, "", "printSpikes"], [56, 2, 1, "", "print_gsyn"], [56, 2, 1, "", "print_v"], [56, 3, 1, "", "receptor_types"], [56, 2, 1, "", "record"], [56, 2, 1, "", "record_gsyn"], [56, 2, 1, "", "record_v"], [56, 2, 1, "", "rset"], [56, 2, 1, "", "sample"], [56, 2, 1, "", "save_positions"], [56, 2, 1, "", "set"], [56, 4, 1, "", "size"], [56, 3, 1, "", "structure"], [56, 2, 1, "", "tset"], [56, 2, 1, "", "write_data"]], "pyNN.neuron.PopulationView": [[56, 2, 1, "", "__add__"], [56, 2, 1, "", "__getitem__"], [56, 2, 1, "", "__iter__"], [56, 2, 1, "", "__len__"], [56, 2, 1, "", "all"], [56, 4, 1, "", "all_cells"], [56, 2, 1, "", "annotate"], [56, 2, 1, "", "can_record"], [56, 4, 1, "", "celltype"], [56, 3, 1, "", "conductance_based"], [56, 2, 1, "", "describe"], [56, 2, 1, "", "find_units"], [56, 2, 1, "", "get"], [56, 2, 1, "", "getSpikes"], [56, 2, 1, "", "get_data"], [56, 2, 1, "", "get_gsyn"], [56, 2, 1, "", "get_spike_counts"], [56, 2, 1, "", "get_v"], [56, 3, 1, "", "grandparent"], [56, 2, 1, "", "id_to_index"], [56, 2, 1, "", "index_from_parent_index"], [56, 2, 1, "", "index_in_grandparent"], [56, 3, 1, "id0", "initial_values"], [56, 2, 1, "", "initialize"], [56, 2, 1, "", "inject"], [56, 3, 1, "", "injectable"], [56, 2, 1, "", "is_local"], [56, 4, 1, "", "label"], [56, 4, 1, "", "local_cells"], [56, 3, 1, "", "local_size"], [56, 4, 1, "", "mask"], [56, 2, 1, "", "meanSpikeCount"], [56, 2, 1, "", "mean_spike_count"], [56, 2, 1, "", "nearest"], [56, 4, 1, "", "parent"], [56, 3, 1, "", "position_generator"], [56, 3, 1, "", "positions"], [56, 2, 1, "", "printSpikes"], [56, 2, 1, "", "print_gsyn"], [56, 2, 1, "", "print_v"], [56, 3, 1, "", "receptor_types"], [56, 2, 1, "", "record"], [56, 2, 1, "", "record_gsyn"], [56, 2, 1, "", "record_v"], [56, 2, 1, "", "rset"], [56, 2, 1, "", "sample"], [56, 2, 1, "", "save_positions"], [56, 2, 1, "", "set"], [56, 4, 1, "", "size"], [56, 3, 1, "", "structure"], [56, 2, 1, "", "tset"], [56, 2, 1, "", "write_data"]], "pyNN.neuron.Projection": [[57, 4, 1, "", "MULTI_SYNAPSE_OPERATIONS"], [57, 2, 1, "", "__getitem__"], [57, 2, 1, "", "__iter__"], [57, 2, 1, "", "__len__"], [57, 2, 1, "", "annotate"], [57, 3, 1, "", "connections"], [57, 2, 1, "", "describe"], [57, 2, 1, "", "get"], [57, 2, 1, "", "getDelays"], [57, 2, 1, "", "getSynapseDynamics"], [57, 2, 1, "", "getWeights"], [57, 2, 1, "", "initialize"], [57, 4, 1, "", "label"], [57, 4, 1, "", "post"], [57, 4, 1, "", "pre"], [57, 2, 1, "", "printDelays"], [57, 2, 1, "", "printWeights"], [57, 2, 1, "", "randomizeDelays"], [57, 2, 1, "", "randomizeSynapseDynamics"], [57, 2, 1, "", "randomizeWeights"], [57, 4, 1, "", "rng"], [57, 2, 1, "", "save"], [57, 2, 1, "", "saveConnections"], [57, 2, 1, "", "set"], [57, 2, 1, "", "setDelays"], [57, 2, 1, "", "setSynapseDynamics"], [57, 2, 1, "", "setWeights"], [57, 3, 1, "", "shape"], [57, 2, 1, "", "size"], [57, 4, 1, "", "source"], [57, 4, 1, "", "synapse_dynamics"], [57, 4, 1, "", "target"], [57, 2, 1, "", "weightHistogram"]], "pyNN.neuron.standardmodels.electrodes": [[52, 1, 1, "", "ACSource"], [52, 1, 1, "", "DCSource"], [52, 1, 1, "", "NoisyCurrentSource"], [52, 1, 1, "", "StepCurrentSource"]], "pyNN.neuron.standardmodels.electrodes.ACSource": [[52, 2, 1, "", "get_parameters"], [52, 2, 1, "", "inject_into"], [52, 2, 1, "", "set_parameters"]], "pyNN.neuron.standardmodels.electrodes.DCSource": [[52, 2, 1, "", "get_parameters"], [52, 2, 1, "", "inject_into"], [52, 2, 1, "", "set_parameters"]], "pyNN.neuron.standardmodels.electrodes.NoisyCurrentSource": [[52, 2, 1, "", "get_parameters"], [52, 2, 1, "", "inject_into"], [52, 2, 1, "", "set_parameters"]], "pyNN.neuron.standardmodels.electrodes.StepCurrentSource": [[52, 2, 1, "", "get_parameters"], [52, 2, 1, "", "inject_into"], [52, 2, 1, "", "set_parameters"]], "pyNN.parameters": [[54, 1, 1, "", "LazyArray"], [54, 1, 1, "", "ParameterSpace"], [54, 1, 1, "", "Sequence"]], "pyNN.parameters.LazyArray": [[54, 2, 1, "", "__getitem__"], [54, 2, 1, "", "apply"], [54, 2, 1, "", "by_column"], [54, 2, 1, "", "check_bounds"], [54, 2, 1, "", "evaluate"], [54, 3, 1, "", "is_homogeneous"], [54, 3, 1, "", "ncols"], [54, 3, 1, "", "nrows"], [54, 3, 1, "", "shape"], [54, 3, 1, "", "size"]], "pyNN.parameters.ParameterSpace": [[54, 2, 1, "", "__getitem__"], [54, 2, 1, "", "__iter__"], [54, 2, 1, "", "as_dict"], [54, 2, 1, "", "columns"], [54, 2, 1, "", "evaluate"], [54, 2, 1, "", "expand"], [54, 2, 1, "", "flatten"], [54, 3, 1, "", "has_native_rngs"], [54, 3, 1, "", "is_homogeneous"], [54, 2, 1, "", "items"], [54, 2, 1, "", "keys"], [54, 3, 1, "", "parallel_safe"], [54, 2, 1, "", "pop"], [54, 3, 1, "", "shape"], [54, 2, 1, "", "update"]], "pyNN.parameters.Sequence": [[54, 2, 1, "", "__div__"], [54, 2, 1, "", "__mul__"]], "pyNN.random": [[58, 1, 1, "", "GSLRNG"], [58, 1, 1, "", "NativeRNG"], [58, 1, 1, "", "NumpyRNG"], [58, 1, 1, "", "RandomDistribution"]], "pyNN.random.GSLRNG": [[58, 2, 1, "", "describe"], [58, 2, 1, "", "gamma"], [58, 2, 1, "", "next"], [58, 2, 1, "", "normal"], [58, 2, 1, "", "normal_clipped"], [58, 4, 1, "", "translations"], [58, 2, 1, "", "uniform_int"]], "pyNN.random.NativeRNG": [[58, 2, 1, "", "next"]], "pyNN.random.NumpyRNG": [[58, 2, 1, "", "describe"], [58, 2, 1, "", "next"], [58, 2, 1, "", "normal_clipped"], [58, 2, 1, "", "normal_clipped_to_boundary"], [58, 4, 1, "", "translations"]], "pyNN.random.RandomDistribution": [[58, 2, 1, "", "lazily_evaluate"], [58, 2, 1, "", "next"]], "pyNN.space": [[60, 1, 1, "", "BaseStructure"], [60, 1, 1, "", "Cuboid"], [60, 1, 1, "", "Grid2D"], [60, 1, 1, "", "Grid3D"], [60, 1, 1, "", "Line"], [60, 1, 1, "", "RandomStructure"], [60, 1, 1, "", "Space"], [60, 1, 1, "", "Sphere"]], "pyNN.space.BaseStructure": [[60, 2, 1, "", "describe"], [60, 2, 1, "", "generate_positions"], [60, 2, 1, "", "get_parameters"]], "pyNN.space.Cuboid": [[60, 2, 1, "", "sample"]], "pyNN.space.Grid2D": [[60, 2, 1, "", "calculate_size"], [60, 2, 1, "", "generate_positions"], [60, 4, 1, "", "parameter_names"]], "pyNN.space.Grid3D": [[60, 2, 1, "", "calculate_size"], [60, 2, 1, "", "generate_positions"], [60, 4, 1, "", "parameter_names"]], "pyNN.space.Line": [[60, 2, 1, "", "generate_positions"], [60, 4, 1, "", "parameter_names"]], "pyNN.space.RandomStructure": [[60, 2, 1, "", "generate_positions"], [60, 4, 1, "", "parameter_names"]], "pyNN.space.Space": [[60, 4, 1, "", "AXES"], [60, 2, 1, "", "distance_generator"], [60, 2, 1, "", "distances"]], "pyNN.space.Sphere": [[60, 2, 1, "", "sample"]], "pyNN.standardmodels": [[55, 1, 1, "", "STDPTimingDependence"], [55, 1, 1, "", "STDPWeightDependence"], [53, 1, 1, "", "StandardCellType"], [55, 1, 1, "", "StandardSynapseType"]], "pyNN.standardmodels.STDPWeightDependence": [[55, 2, 1, "", "describe"]], "pyNN.standardmodels.StandardCellType": [[53, 2, 1, "", "computed_parameters"], [53, 2, 1, "", "describe"], [53, 2, 1, "", "get_native_names"], [53, 2, 1, "", "get_parameter_names"], [53, 2, 1, "", "get_schema"], [53, 2, 1, "", "has_parameter"], [53, 2, 1, "", "reverse_translate"], [53, 2, 1, "", "scaled_parameters"], [53, 2, 1, "", "simple_parameters"], [53, 2, 1, "", "translate"]], "pyNN.standardmodels.StandardSynapseType": [[55, 2, 1, "", "computed_parameters"], [55, 2, 1, "", "computed_parameters_include"], [55, 4, 1, "", "connection_type"], [55, 4, 1, "", "default_initial_values"], [55, 4, 1, "", "default_parameters"], [55, 2, 1, "", "describe"], [55, 4, 1, "", "extra_parameters"], [55, 2, 1, "", "get_native_names"], [55, 2, 1, "", "get_parameter_names"], [55, 2, 1, "", "get_schema"], [55, 2, 1, "", "has_parameter"], [55, 4, 1, "", "has_presynaptic_components"], [55, 3, 1, "", "native_parameters"], [55, 4, 1, "", "parameter_checks"], [55, 2, 1, "", "reverse_translate"], [55, 2, 1, "", "scaled_parameters"], [55, 2, 1, "", "simple_parameters"], [55, 2, 1, "", "translate"], [55, 4, 1, "", "translations"]], "pyNN.standardmodels.cells": [[53, 1, 1, "", "AdExp"], [53, 1, 1, "", "EIF_cond_alpha_isfa_ista"], [53, 1, 1, "", "EIF_cond_exp_isfa_ista"], [53, 1, 1, "", "IF_cond_alpha"], [53, 1, 1, "", "IF_cond_exp"], [53, 1, 1, "", "IF_cond_exp_gsfa_grr"], [53, 1, 1, "", "IF_curr_alpha"], [53, 1, 1, "", "IF_curr_exp"], [53, 1, 1, "", "Izhikevich"], [53, 1, 1, "", "LIF"], [53, 1, 1, "", "PointNeuron"], [53, 1, 1, "", "SpikeSourceArray"], [53, 1, 1, "", "SpikeSourceInhGamma"], [53, 1, 1, "", "SpikeSourcePoisson"]], "pyNN.standardmodels.cells.AdExp": [[53, 4, 1, "", "default_initial_values"], [53, 4, 1, "", "default_parameters"], [53, 4, 1, "", "injectable"], [53, 4, 1, "", "recordable"], [53, 4, 1, "", "units"]], "pyNN.standardmodels.cells.EIF_cond_alpha_isfa_ista": [[53, 4, 1, "", "conductance_based"], [53, 4, 1, "", "default_initial_values"], [53, 4, 1, "", "default_parameters"], [53, 4, 1, "", "injectable"], [53, 4, 1, "", "recordable"], [53, 4, 1, "", "units"]], "pyNN.standardmodels.cells.EIF_cond_exp_isfa_ista": [[53, 4, 1, "", "conductance_based"], [53, 4, 1, "", "default_initial_values"], [53, 4, 1, "", "default_parameters"], [53, 4, 1, "", "injectable"], [53, 4, 1, "", "recordable"], [53, 4, 1, "", "units"]], "pyNN.standardmodels.cells.IF_cond_alpha": [[53, 4, 1, "", "conductance_based"], [53, 4, 1, "", "default_initial_values"], [53, 4, 1, "", "default_parameters"], [53, 4, 1, "", "injectable"], [53, 4, 1, "", "recordable"], [53, 4, 1, "", "units"]], "pyNN.standardmodels.cells.IF_cond_exp": [[53, 4, 1, "", "conductance_based"], [53, 4, 1, "", "default_initial_values"], [53, 4, 1, "", "default_parameters"], [53, 4, 1, "", "injectable"], [53, 4, 1, "", "recordable"], [53, 4, 1, "", "units"]], "pyNN.standardmodels.cells.IF_cond_exp_gsfa_grr": [[53, 4, 1, "", "conductance_based"], [53, 4, 1, "", "default_initial_values"], [53, 4, 1, "", "default_parameters"], [53, 4, 1, "", "injectable"], [53, 4, 1, "", "recordable"], [53, 4, 1, "", "units"]], "pyNN.standardmodels.cells.IF_curr_alpha": [[53, 4, 1, "id1", "conductance_based"], [53, 4, 1, "", "default_initial_values"], [53, 4, 1, "", "default_parameters"], [53, 4, 1, "", "injectable"], [53, 4, 1, "", "recordable"], [53, 4, 1, "", "units"]], "pyNN.standardmodels.cells.IF_curr_exp": [[53, 4, 1, "id0", "conductance_based"], [53, 4, 1, "", "default_initial_values"], [53, 4, 1, "", "default_parameters"], [53, 4, 1, "", "injectable"], [53, 4, 1, "", "recordable"], [53, 4, 1, "", "units"]], "pyNN.standardmodels.cells.Izhikevich": [[53, 4, 1, "id2", "conductance_based"], [53, 4, 1, "", "default_initial_values"], [53, 4, 1, "", "default_parameters"], [53, 4, 1, "", "injectable"], [53, 4, 1, "", "recordable"], [53, 4, 1, "", "units"], [53, 4, 1, "", "voltage_based_synapses"]], "pyNN.standardmodels.cells.LIF": [[53, 4, 1, "", "default_initial_values"], [53, 4, 1, "", "default_parameters"], [53, 4, 1, "", "injectable"], [53, 4, 1, "", "recordable"], [53, 4, 1, "", "units"]], "pyNN.standardmodels.cells.PointNeuron": [[53, 2, 1, "", "computed_parameters"], [53, 2, 1, "", "computed_parameters_include"], [53, 3, 1, "id6", "conductance_based"], [53, 3, 1, "", "default_initial_values"], [53, 4, 1, "", "injectable"], [53, 3, 1, "", "receptor_types"], [53, 3, 1, "", "recordable"], [53, 3, 1, "", "scale_factors"], [53, 2, 1, "", "scaled_parameters"], [53, 2, 1, "", "simple_parameters"], [53, 3, 1, "", "units"]], "pyNN.standardmodels.cells.SpikeSourceArray": [[53, 4, 1, "", "conductance_based"], [53, 4, 1, "", "default_parameters"], [53, 4, 1, "id4", "injectable"], [53, 4, 1, "", "receptor_types"], [53, 4, 1, "", "recordable"], [53, 4, 1, "", "units"]], "pyNN.standardmodels.cells.SpikeSourceInhGamma": [[53, 4, 1, "", "conductance_based"], [53, 4, 1, "", "default_parameters"], [53, 4, 1, "id5", "injectable"], [53, 4, 1, "", "receptor_types"], [53, 4, 1, "", "recordable"], [53, 4, 1, "", "units"]], "pyNN.standardmodels.cells.SpikeSourcePoisson": [[53, 4, 1, "", "conductance_based"], [53, 4, 1, "", "default_parameters"], [53, 4, 1, "id3", "injectable"], [53, 4, 1, "", "receptor_types"], [53, 4, 1, "", "recordable"], [53, 4, 1, "", "units"]], "pyNN.standardmodels.receptors": [[53, 1, 1, "", "CondAlphaPostSynapticResponse"], [53, 1, 1, "", "CondBetaPostSynapticResponse"], [53, 1, 1, "", "CondExpPostSynapticResponse"], [53, 1, 1, "", "CurrExpPostSynapticResponse"]], "pyNN.standardmodels.receptors.CondAlphaPostSynapticResponse": [[53, 4, 1, "", "conductance_based"], [53, 4, 1, "", "default_initial_values"], [53, 4, 1, "", "default_parameters"], [53, 4, 1, "", "units"]], "pyNN.standardmodels.receptors.CondBetaPostSynapticResponse": [[53, 4, 1, "", "conductance_based"], [53, 4, 1, "", "default_initial_values"], [53, 4, 1, "", "default_parameters"], [53, 4, 1, "", "units"]], "pyNN.standardmodels.receptors.CondExpPostSynapticResponse": [[53, 4, 1, "", "conductance_based"], [53, 4, 1, "", "default_initial_values"], [53, 4, 1, "", "default_parameters"], [53, 4, 1, "", "units"]], "pyNN.standardmodels.receptors.CurrExpPostSynapticResponse": [[53, 4, 1, "", "conductance_based"], [53, 4, 1, "", "default_initial_values"], [53, 4, 1, "", "default_parameters"], [53, 4, 1, "", "units"]], "pyNN.standardmodels.synapses": [[55, 1, 1, "", "AdditivePotentiationMultiplicativeDepression"], [55, 1, 1, "", "AdditiveWeightDependence"], [55, 1, 1, "", "GutigWeightDependence"], [55, 1, 1, "", "MultiplicativeWeightDependence"], [55, 1, 1, "", "STDPMechanism"], [55, 1, 1, "", "SpikePairRule"], [55, 1, 1, "", "StaticSynapse"], [55, 1, 1, "", "TsodyksMarkramSynapse"]], "pyNN.standardmodels.synapses.AdditivePotentiationMultiplicativeDepression": [[55, 4, 1, "", "default_parameters"]], "pyNN.standardmodels.synapses.AdditiveWeightDependence": [[55, 4, 1, "", "default_parameters"]], "pyNN.standardmodels.synapses.GutigWeightDependence": [[55, 4, 1, "", "default_parameters"]], "pyNN.standardmodels.synapses.MultiplicativeWeightDependence": [[55, 4, 1, "", "default_parameters"]], "pyNN.standardmodels.synapses.STDPMechanism": [[55, 2, 1, "", "describe"], [55, 2, 1, "", "get_parameter_names"], [55, 2, 1, "", "get_schema"], [55, 2, 1, "", "has_parameter"], [55, 3, 1, "", "model"], [55, 3, 1, "", "native_parameters"], [55, 3, 1, "", "parameter_space"], [55, 3, 1, "", "possible_models"]], "pyNN.standardmodels.synapses.SpikePairRule": [[55, 4, 1, "", "default_parameters"], [55, 2, 1, "", "describe"]], "pyNN.standardmodels.synapses.StaticSynapse": [[55, 4, 1, "", "default_parameters"]], "pyNN.standardmodels.synapses.TsodyksMarkramSynapse": [[55, 4, 1, "", "default_initial_values"], [55, 4, 1, "", "default_parameters"]], "pyNN.utility": [[61, 1, 1, "", "ProgressBar"], [61, 1, 1, "", "Timer"], [61, 5, 1, "", "get_simulator"], [61, 5, 1, "", "init_logging"], [61, 5, 1, "", "load_population"], [61, 5, 1, "", "notify"], [61, 5, 1, "", "save_population"]], "pyNN.utility.ProgressBar": [[61, 2, 1, "", "set_level"]], "pyNN.utility.Timer": [[61, 2, 1, "", "diff"], [61, 2, 1, "", "elapsedTime"], [61, 2, 1, "", "elapsed_time"], [61, 2, 1, "", "mark"], [61, 2, 1, "", "reset"], [61, 2, 1, "", "start"], [61, 2, 1, "", "time_in_words"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:attribute", "5": "py:function"}, "terms": {"": [3, 9, 10, 11, 16, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 38, 41, 43, 45, 47, 49, 50, 52, 53, 54, 56, 58, 61, 70, 71, 72, 73, 74, 75, 76, 77, 85, 91, 92], "0": [3, 4, 9, 10, 11, 12, 13, 15, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 88, 89, 90, 91], "00000005": 26, "0000001": 26, "00011": 47, "0002": 4, "0003": [4, 41], "00034": 47, "00043": 47, "001": 4, "00112": 47, "00113": 3, "002": [27, 28, 30], "004": 9, "005": [43, 47], "006": 47, "008": [28, 47], "0086313719119562281": 9, "0094": 9, "0094460775218037779": 9, "0097": 9, "01": [4, 9, 11, 20, 21, 22, 25, 26, 28, 29, 30, 31, 40, 47, 55, 72, 76, 91], "0102": 9, "011": [37, 47], "0113": 9, "012": [9, 26], "0127": 9, "014": 20, "015": 3, "015879": 10, "017": 47, "01d": 88, "02": [9, 20, 21, 29, 53], "025": [41, 88], "027203": 60, "028": 47, "03": 30, "03056844": 90, "031324546935146": 46, "03132455": 46, "036": [4, 41, 47], "04": [9, 28, 31, 53, 72, 76], "0435": 47, "05": [3, 10, 11, 40, 41, 72, 76, 88], "06": 47, "062": 44, "07": 40, "07577787": 49, "08": 47, "0805": [53, 91], "09": [10, 42], "09777627": 46, "1": [3, 4, 9, 10, 11, 12, 16, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 35, 36, 39, 40, 41, 43, 44, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 70, 73, 75, 76, 83, 84, 88, 89, 90, 91], "10": [3, 4, 9, 10, 11, 18, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 37, 41, 43, 46, 47, 50, 54, 56, 62, 65, 70, 71, 72, 76, 84, 88, 89, 90, 91], "100": [4, 9, 11, 12, 20, 21, 22, 24, 25, 26, 28, 29, 30, 31, 32, 40, 41, 43, 44, 46, 53, 55, 56, 72, 74, 76, 84, 88, 89, 90], "1000": [9, 12, 21, 27, 28, 31, 32, 41, 44, 46, 72, 76, 88, 89], "100000": 24, "10000000000": 53, "10000000000000001": 12, "1001": 89, "1007": 47, "101": 43, "1016": 47, "104": 47, "105": 10, "1073": 47, "10744555": 57, "11": [10, 18, 34, 35, 36, 37, 42, 47, 54, 62, 64], "110": 35, "1109": 47, "111": [47, 90], "112": 47, "113": 3, "1186": 47, "119": 70, "12": [4, 9, 10, 30, 34, 36, 37, 46, 62, 71, 72, 76, 83, 88, 90], "120": [41, 71], "12000": 70, "122": 43, "123": [9, 61], "12345": 3, "12875371": 49, "129": 43, "12952503": 49, "12th": 81, "13": [9, 10, 30, 43, 54], "1303053111": 47, "131": 90, "136": [43, 70], "1370": 42, "13886": 90, "139": 53, "13969087": 90, "13th": 64, "14": [9, 10, 20, 22, 30, 46, 53, 54], "140": 53, "143": [43, 90], "144": [53, 54, 91], "147": [43, 70], "1471": 47, "148": 70, "149": 43, "14th": 70, "15": [9, 10, 25, 36, 46, 53, 65, 71, 91], "150": [24, 35, 40, 41, 43], "15159309": 90, "152": 70, "15914942": 43, "15th": 74, "16": [10, 46, 61], "160": 53, "164": 71, "16a7055d4a86": 42, "17": [9, 10, 46, 47, 71], "172": 71, "17281502": 90, "173": 43, "17th": [69, 87], "18": [9, 10, 40, 41, 46, 64], "180": [23, 35, 43], "181": 43, "18242977": 90, "188": 43, "19": [10, 43, 46, 53, 90], "193": 43, "1984": [36, 42], "19th": 77, "1d": [46, 54, 72, 76, 90], "1e": [4, 9, 21, 26], "2": [3, 4, 5, 9, 10, 11, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 53, 54, 56, 57, 58, 60, 61, 62, 72, 74, 76, 88, 91], "20": [3, 9, 10, 11, 12, 21, 26, 27, 32, 35, 41, 43, 46, 53, 54, 55, 56, 65, 72, 76, 88, 90, 91], "200": [3, 28, 29, 31, 32, 40, 41, 43, 74, 76, 83, 89, 90], "2000": 55, "20000": 21, "2003": 53, "2004": 36, "2005": [21, 53, 91], "2006": [10, 21], "2007": [10, 21, 47, 53, 60], "2008": [37, 47], "2009": [37, 43, 47], "2010": [3, 47, 70], "2011": [47, 71], "2012": [9, 37, 41, 51, 72], "2013": [10, 47, 53, 73, 74], "2014": 47, "2015": [42, 75, 76, 77], "2016": [78, 79], "2017": [80, 81, 82, 83], "2018": 84, "2019": [85, 86], "2020": [10, 87], "2021": 63, "2022": [36, 64], "2023": [65, 66, 67], "2024": [68, 69], "2081": 47, "2086": 47, "20version": 41, "21": [3, 10, 54], "210": [23, 35], "212": 43, "21412264": 90, "21st": 68, "22": 47, "2202": 47, "223": 43, "22nd": [83, 85], "23": [21, 43, 90], "23rd": 65, "24": 61, "240": 43, "249": 43, "249856": 45, "24th": 73, "25": [10, 30, 43, 90], "250": [3, 23, 28, 40], "25th": 78, "261": 43, "26278342": 27, "263": 47, "269921": 10, "27": [21, 35, 61, 90], "28": 43, "281": [53, 91], "28th": 66, "2958": 53, "296": 47, "298": 43, "29th": 67, "2d": [9, 54, 57, 60, 70, 90], "2e": 26, "2f": 9, "3": [3, 9, 10, 11, 15, 20, 21, 24, 25, 26, 28, 29, 31, 34, 35, 36, 37, 41, 42, 43, 44, 46, 47, 49, 51, 53, 54, 56, 57, 60, 61, 62, 72, 76, 90, 91], "30": [4, 9, 10, 30, 72, 76, 90], "300": [41, 74, 76, 89, 90], "3000": 53, "30000000000000004": 57, "3010": 53, "307": 43, "31st": 72, "32": 43, "3205": 47, "3212": 47, "321245": 24, "33": 90, "3389": [3, 37, 47], "34": [47, 54], "3401892507507171": 57, "341": 43, "34534": 90, "348": 43, "349": 21, "35": 46, "350": 28, "3600": 61, "3637": [53, 91], "3642": [53, 91], "3667": [53, 91], "3676134": 57, "37": 46, "370": 43, "382": 43, "38268343": 46, "39": 46, "39033263": 90, "398": 21, "3d": [9, 60, 90], "3x1": 90, "3xn": [56, 90], "4": [3, 4, 9, 10, 16, 21, 22, 23, 24, 26, 27, 28, 30, 31, 35, 36, 42, 46, 53, 54, 56, 57, 58, 62, 66, 69, 72, 74, 76, 83, 84, 89, 91], "40": [22, 41, 44, 46, 53, 90, 91], "400": [23, 28, 88, 90], "4000": 21, "406": 43, "41": 46, "410": 23, "41463193": 57, "416": 43, "42": 46, "4242": [9, 43], "426482": [75, 76], "42863916": 57, "43": 47, "4314059": 90, "4325809": 49, "4329354": 57, "44": 46, "444": 43, "44786923": 46, "45": [22, 25, 43, 46, 90], "450": [23, 35, 83], "4507": 47, "456": 43, "46": 46, "467": 43, "47": [43, 46], "48": 22, "484": 43, "486": 43, "4863944": 49, "48th": 43, "49": [21, 46], "492": 43, "4928947": 46, "496": 43, "499": 43, "4d": 43, "4f": 9, "4th": [71, 82, 84], "5": [3, 4, 9, 10, 11, 12, 18, 21, 23, 24, 25, 27, 28, 29, 31, 35, 40, 41, 42, 43, 44, 46, 47, 49, 53, 54, 55, 56, 57, 58, 62, 64, 65, 66, 72, 75, 76, 81, 84, 88, 90, 91], "50": [3, 12, 21, 23, 24, 26, 27, 28, 30, 32, 35, 40, 41, 43, 44, 46, 53, 58, 72, 76, 83, 88, 90, 91], "500": [9, 11, 23, 40, 41, 43, 83, 90], "51": [20, 21, 46], "52": 46, "52020946027308368": 49, "53": [43, 54], "53500179": 43, "54": [41, 46, 54], "540": 47, "54557088": 57, "55": [23, 24, 25, 30, 54], "56": [46, 90], "57": 44, "57434871": 57, "58": 43, "58482943": 57, "58510406": 49, "59": 23, "5e": [21, 26], "5th": [76, 86], "6": [3, 9, 10, 11, 18, 20, 21, 23, 30, 31, 35, 36, 42, 43, 46, 47, 53, 54, 56, 62, 69, 76, 91], "60": [21, 22, 26, 27, 41, 43, 65, 91], "600": [43, 90], "604102": 10, "61104097": 49, "6180841812877726": 57, "63": [43, 90, 91], "6443": 47, "64655001": 43, "64754": 9, "65": [4, 12, 20, 24, 30, 41, 43, 44, 46, 47, 53, 56, 72, 76, 88, 91], "6538": 43, "65866423": 49, "66": [22, 30], "66210438": 57, "668454": 24, "67": 30, "67070498": 90, "6758149775627305": 57, "6889847": 47, "6th": [63, 75, 79], "6x2": 90, "7": [3, 9, 10, 11, 15, 18, 25, 31, 34, 35, 36, 42, 43, 46, 47, 53, 54, 56, 62, 72, 74, 76, 90], "70": [3, 12, 20, 27, 30, 41, 43, 44, 53, 56, 57, 58, 65, 91], "7000000000000001": 57, "70710678": 46, "709": 43, "71": 30, "7166906726862953": 57, "72": 43, "720270": 10, "72386": 49, "73": [5, 90], "73007": 47, "73583484": 90, "75": [22, 28, 31, 46, 53], "75015": 10, "7513628": 49, "75794": 10, "77": [41, 61], "78": 90, "78153": 10, "78455022": 90, "785907": 10, "79": 90, "7990713166233654": 57, "8": [9, 10, 11, 15, 18, 21, 24, 26, 27, 28, 29, 31, 34, 36, 40, 41, 43, 45, 46, 47, 49, 54, 62, 84, 88, 90], "80": [11, 21, 22, 30, 35, 41, 43, 53, 91], "800": [9, 31], "80321881": 46, "81182457": 49, "824756": 49, "83086026": 49, "8498": 70, "85": 46, "85524": 46, "86": 43, "86422999": 90, "8658764": 58, "87": 43, "87072741": 49, "87354762": 25, "87500017": 49, "88": 46, "88348228": 90, "89": 54, "89071845": 90, "8th": 80, "9": [3, 9, 10, 18, 26, 34, 36, 41, 46, 47, 53, 54, 56, 57, 62, 69, 70, 72, 76, 90, 91], "90": [30, 43, 65, 91], "90755753": 49, "91": 43, "92": 20, "922843": [75, 76], "92387953": 46, "93793779": 49, "93d41fafd": 36, "94": [53, 91], "945539": 10, "945645645": 27, "94839735": 49, "95": 90, "96": 23, "97079318": 46, "97246906": 46, "97408513": 90, "978": 47, "984527": 24, "98497627": 25, "987": 61, "98765": 21, "99": 46, "9x3": 90, "A": [3, 4, 5, 9, 10, 11, 19, 33, 38, 40, 43, 47, 52, 53, 54, 55, 56, 57, 60, 63, 64, 65, 71, 74, 75, 76, 80, 82, 83, 84, 85, 86, 87, 90], "AND": 10, "As": [9, 11, 40, 43, 46, 49, 55, 72, 76, 83, 84], "At": [3, 9, 36, 38, 40, 43], "Ates": 10, "BY": 90, "Being": 16, "By": [9, 11, 13, 40, 50, 57, 71], "For": [1, 4, 9, 10, 13, 35, 36, 38, 40, 43, 44, 45, 46, 49, 51, 52, 53, 54, 55, 56, 57, 58, 61, 65, 66, 69, 70, 71, 72, 73, 75, 76, 77, 81, 85, 88, 89], "If": [4, 9, 10, 11, 13, 14, 15, 16, 18, 25, 36, 37, 40, 42, 43, 45, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 70, 72, 75, 76, 84, 89, 91], "In": [3, 9, 10, 11, 13, 15, 16, 25, 33, 37, 38, 40, 43, 45, 47, 49, 53, 54, 55, 56, 57, 59, 60, 66, 71, 72, 74, 76, 81, 84, 85], "It": [4, 9, 11, 13, 36, 37, 40, 42, 43, 44, 46, 49, 50, 53, 56, 71, 72, 76, 83, 90], "No": [10, 71], "Not": 91, "OF": 10, "Of": 53, "On": [13, 88], "One": [10, 44, 56, 74, 76, 89], "Such": [10, 38, 46], "THE": 10, "TO": [10, 51, 57], "The": [0, 1, 3, 4, 6, 9, 10, 11, 15, 16, 17, 18, 21, 25, 26, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 50, 51, 52, 53, 55, 56, 57, 59, 61, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 83, 84, 88, 89, 90, 91], "Their": [10, 72, 76], "Then": [40, 71], "There": [15, 17, 23, 35, 40, 43, 45, 49, 51, 54, 70, 71, 72, 74, 75, 76, 82], "These": [10, 11, 13, 43, 72, 76], "To": [3, 9, 11, 15, 38, 40, 42, 43, 45, 46, 50, 54, 70, 71, 84, 90, 91], "WITH": 10, "Will": 70, "With": [9, 51, 57, 71, 72, 75], "_": [13, 24, 47], "__add__": 56, "__call__": [26, 32], "__class__": 43, "__div__": 54, "__file__": [20, 21, 22, 23, 26, 27, 28, 29, 30, 31], "__getitem__": [0, 54, 56, 57, 71], "__iadd__": 56, "__init__": [4, 13, 15, 26, 32, 71, 90], "__iter__": [0, 54, 56, 57], "__len__": [0, 13, 27, 46, 56, 57, 70], "__mul__": 54, "__name__": 43, "_assembly_class": 13, "_convergent_connect": 13, "_create_cel": 13, "_dimension": 11, "_get": 13, "_get_all_sign": 13, "_get_gnabar": 4, "_get_paramet": 13, "_get_spiketim": 13, "_get_view": 13, "_local_count": 13, "_partially_evalu": 58, "_record": 13, "_recorder_class": 13, "_ref_v": 4, "_set_gnabar": 4, "_set_initial_value_arrai": 13, "_set_paramet": 13, "_simul": 13, "_weight": 26, "a1": 56, "a2": 56, "a_cel": 43, "a_eta": 46, "a_minu": [9, 26, 55, 74, 76], "a_plu": [9, 26, 55, 74, 76], "ab": 51, "abbott": [21, 55], "abid": 16, "abil": [71, 72, 76], "abl": [9, 15, 36, 44, 71], "about": [9, 11, 15, 17, 34, 37, 38, 43, 45, 54, 57, 71, 73, 74, 75, 77], "abov": [9, 11, 15, 16, 40, 43, 45, 46, 49, 55, 72, 76, 83, 91], "absolut": [4, 59, 74, 76], "abstract": [9, 37, 39, 43, 47, 54], "abstraction_lay": 41, "abstractrng": [49, 58], "abus": 16, "academi": 47, "accept": [9, 10, 16, 49, 54, 56, 57, 59, 70, 71, 72, 76, 89], "access": [1, 10, 37, 39, 43, 45, 54, 56], "accompani": 10, "accord": [10, 36, 42, 51, 53, 54, 60, 84, 91], "account": [14, 15, 16, 21, 55], "accumul": [27, 46, 72, 76], "accuraci": [53, 74, 76], "accurari": 74, "achiev": [16, 45], "acknowledg": 10, "acquir": 10, "across": [9, 43, 49, 52, 70, 71, 72, 76, 84], "acsourc": [0, 23, 35, 52, 70], "act": [10, 16, 70], "action": [9, 16, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 40, 43, 50, 57], "activ": [10, 53, 76, 91], "actual": [41, 43, 45], "ad": [4, 9, 10, 11, 15, 17, 33, 36, 43, 56, 59, 64, 70, 71, 72, 73, 74, 75, 76, 79, 84], "adapt": [0, 10, 16, 22, 39, 43, 46, 72, 75, 76, 91], "add": [3, 4, 9, 11, 13, 14, 15, 27, 28, 29, 31, 33, 36, 38, 40, 42, 46, 51, 54, 71, 72, 75, 76, 82, 89], "add_synaps": 4, "addit": [10, 11, 15, 39, 40, 42, 43, 51, 54, 61, 71, 72, 74, 76, 81], "additivepotentiationmultiplicativedepress": 55, "additiveweightdepend": [9, 26, 55], "addr": 54, "address": [10, 16, 40, 43, 54, 61, 71], "adexp": [11, 22, 42, 43, 53, 65, 70, 91], "adjust": 60, "adopt": [11, 79, 81, 84], "advanc": [16, 26, 59, 72, 74, 76, 89], "advantag": [13, 25, 72, 74, 76], "aeif_cond_alpha": 36, "affect": [16, 26, 70, 75, 76], "affili": [10, 15], "after": [9, 10, 11, 15, 36, 46, 55, 71, 72, 76, 79, 91], "after_branch_point": 41, "ag": 16, "again": [15, 44, 51], "against": [10, 26, 54], "agg": [28, 29, 41], "aggreg": 43, "agre": [10, 16, 71], "agreement": [10, 70], "aim": [1, 15, 17, 37, 39, 49, 71, 72, 76, 84], "al": [21, 53, 55, 82], "albert": 10, "alexand": 47, "alexandr": 10, "algebra": [21, 37, 51, 71], "algorithm": [8, 37, 40, 43, 47, 49, 57], "alia": [43, 53, 65, 74, 76, 89], "align": 16, "all": [4, 10, 11, 13, 15, 16, 21, 26, 33, 35, 36, 37, 38, 40, 41, 43, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 70, 71, 72, 76, 85, 88, 91], "all_cel": [21, 43, 56], "all_neuron": [22, 30], "all_spik": 32, "allow": [9, 10, 13, 16, 37, 38, 39, 40, 41, 43, 51, 53, 54, 55, 59, 70, 71, 72, 74, 75, 76, 84, 89], "allow_self_connect": [9, 51], "alltoallconnector": [0, 3, 4, 9, 26, 28, 29, 30, 31, 40, 41, 51, 70, 72, 76], "almost": [9, 38, 71], "along": [40, 41, 43], "alpha": [30, 53, 62, 65, 74, 75, 77, 91], "alpha_isfa": 71, "alphaisyn": 42, "alphapsr": [65, 91], "alphasyn": 42, "alreadi": [15, 36, 40, 42, 72, 76, 90], "also": [3, 4, 9, 10, 11, 15, 33, 36, 37, 40, 42, 43, 44, 45, 46, 53, 54, 55, 56, 65, 66, 69, 71, 72, 76, 83, 84, 89, 90], "alter": 10, "altern": [49, 50, 89], "although": [9, 16, 43, 45, 53, 71, 72, 73, 74, 76, 89], "alwai": [9, 11, 25, 51, 64, 71, 84, 89], "ambigu": 46, "amend": 10, "amic": 10, "among": [16, 71], "amount": [26, 38], "amp": 11, "ampa": [3, 4, 40, 41, 43, 44, 65, 91], "ampa_e_rev": 3, "ampa_g_peak": 3, "ampa_tau_1": 3, "ampa_tau_2": 3, "amplitud": [3, 11, 20, 23, 35, 40, 41, 43, 52, 55], "an": [3, 4, 10, 11, 13, 14, 15, 16, 19, 21, 26, 37, 38, 39, 40, 43, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 84, 89, 90, 91], "anaconda": 15, "analog": 9, "analogsign": [3, 11, 26, 28, 41, 43, 81, 83], "analogsignalarrai": 81, "analysi": [11, 43, 72, 76], "analyz": 47, "andrea": 47, "andrei": 10, "andrew": [10, 21, 41], "ang": 10, "angl": 92, "angu": 47, "ani": [9, 10, 13, 15, 16, 23, 37, 40, 43, 44, 49, 50, 51, 54, 55, 56, 57, 59, 60, 70, 71, 72, 74, 75, 76, 89, 92], "anisotrop": 47, "ankur": 10, "annex": 10, "annot": [0, 11, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 41, 56, 57, 59], "annotation_kei": 56, "announc": 15, "anoth": [21, 22, 23, 25, 26, 27, 30, 31, 32, 45, 54, 56], "anticipatori": 47, "antipoli": 10, "antolik": 10, "antol\u00edk": 47, "anyon": [16, 18, 74], "anyth": 54, "ap": [37, 47], "apart": 49, "api": [1, 13, 18, 35, 37, 39, 40, 47, 49, 54, 55, 70, 72, 76, 81, 89], "apic": 40, "apical_dendrit": [40, 41], "appar": 49, "appear": [16, 71, 76], "append": [24, 26, 28, 29, 31, 45], "appli": [10, 16, 45, 54, 58, 60, 84], "applic": [10, 70], "appoint": 16, "appreci": 37, "approach": [3, 40, 43, 79], "appropri": [11, 16, 38, 56, 58], "approv": 16, "appukuttan": 10, "april": [60, 69, 81], "ar": [1, 3, 4, 9, 10, 11, 13, 15, 16, 17, 23, 26, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 65, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 89, 90, 91, 92], "arang": [20, 26, 28, 29, 31, 43], "arbitrari": [51, 65], "arbor": [37, 39, 43, 66, 69], "architectur": 17, "archiv": 42, "area": [21, 47], "arg": [56, 57, 59], "argpars": 61, "argument": [4, 9, 15, 21, 22, 23, 25, 26, 27, 30, 31, 32, 40, 43, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 70, 71, 72, 74, 75, 76, 79, 89], "aris": [10, 49, 68], "around": [9, 15, 54], "arr": [72, 76], "arrai": [9, 11, 25, 26, 28, 43, 49, 51, 52, 53, 54, 56, 57, 58, 64, 70, 71, 72, 76, 79, 90, 91], "arrang": [10, 12], "array_annot": [26, 28], "arrayconnector": [0, 9, 51, 74, 76], "arrayparamet": [46, 54], "arriv": 3, "art": 10, "articl": 10, "artificial_cel": 4, "as_dict": 54, "ascii": 43, "ask": [43, 54, 72, 76, 90], "aspect_ratio": [12, 60, 90], "aspect_ratioxi": 60, "aspect_ratioxz": 60, "assembli": [0, 8, 9, 11, 13, 21, 34, 35, 45, 46, 50, 52, 57, 71], "assembly_default": 56, "assert": [21, 24, 27, 32, 56], "assign": 3, "assist": 10, "associ": [10, 11, 51, 53, 55, 56, 57, 60], "assort": [11, 75, 77, 78, 79], "assum": [36, 42, 51], "at_dist": 40, "atol": [4, 59, 71], "atomiqu": 10, "attach": 10, "attack": [10, 16], "attempt": [71, 84], "attent": [10, 16], "attribut": [4, 9, 10, 13, 17, 43, 50, 55, 57, 61, 70, 81, 90], "attribute_nam": 57, "august": [21, 77], "austria": 10, "autaps": 9, "authent": 10, "author": [10, 15], "auto": [56, 59, 75, 76], "autogener": 9, "automat": [9, 10, 45, 46, 50, 56, 74, 76, 82, 91], "automatiqu": 10, "avail": [1, 3, 9, 10, 11, 16, 33, 36, 40, 43, 44, 50, 53, 54, 55, 58, 66, 71, 74, 76, 82, 89, 90, 91], "available_distribut": 58, "avoid": [9, 26, 46, 50, 54, 64, 71], "awai": 45, "awar": 46, "ax": [3, 9, 11, 24, 60], "axi": 28, "axon": [9, 40, 55, 57], "b": [11, 20, 43, 47, 53, 54, 58, 60, 70, 91], "ba": 47, "back": [61, 70, 74, 76], "backend": [4, 6, 9, 15, 17, 21, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 44, 49, 53, 54, 59, 61, 66, 70, 72, 75, 79, 80, 88], "backward": [39, 43, 51, 56, 71, 72, 76], "bad": 70, "balanc": 19, "ban": 16, "bangalor": 10, "bar": [32, 51, 61, 71], "bartosz": 70, "basal": 40, "basal_dendrit": 40, "base": [0, 9, 11, 13, 15, 16, 17, 21, 30, 43, 44, 47, 52, 54, 56, 57, 58, 60, 61, 65, 70, 71, 72, 75, 76, 91], "base_valu": 54, "basecelltyp": [53, 56, 72, 76], "basestructur": [0, 60, 90], "basesynapsetyp": 55, "basi": [10, 11, 13, 43, 71], "basic": [0, 74, 76], "becaus": [9, 49, 71, 72], "becom": [10, 15, 17, 72, 76], "bednar": 47, "been": [10, 36, 37, 42, 50, 51, 53, 54, 56, 63, 64, 65, 69, 70, 71, 72, 74, 75, 76, 80, 81, 82, 83, 84, 85, 86, 87, 89], "befor": [9, 11, 40, 42, 51, 59, 60, 71, 72, 76, 89], "begin": [13, 51, 52, 59], "begun": 89, "behav": [43, 71], "behavior": 16, "behaviour": [37, 51, 55, 56, 70], "behind": 10, "beij": 47, "being": [9, 10, 13, 33, 40, 43, 45, 72, 75, 76], "belong": [16, 55, 71], "below": [9, 10, 11, 13, 16, 18, 36, 42, 43, 44, 45, 49, 53, 55, 72], "benchmark": 21, "benefit": 37, "berlin": 10, "bernhard": 10, "bernstein": 10, "besid": 10, "best": [15, 16, 26, 65, 84], "beta": [24, 44, 49, 53, 58, 62, 72, 77], "betapsr": 65, "better": [4, 38, 49, 71, 72, 76], "between": [9, 10, 11, 13, 16, 25, 26, 30, 37, 39, 45, 46, 49, 51, 52, 53, 54, 55, 57, 59, 60, 61, 70, 71, 72, 75, 76, 79, 88, 90], "beyond": [9, 53], "bg": 11, "bhalla": 47, "big": 73, "biggest": [72, 76], "bin": [24, 36, 42], "binari": [10, 11, 70, 71], "bind": 10, "binomi": [9, 49, 58], "biocomput": 10, "bioengin": 10, "biolog": [43, 47], "biologi": [10, 47], "biophys": [10, 33, 39, 40, 43, 66], "bit": [9, 89], "black": 3, "block": [11, 43, 56, 75], "blog": 15, "blue": 10, "bluebrain": [36, 42], "bmc": 47, "bodi": 16, "boilerpl": 11, "bool": [9, 53, 54], "boolean": [9, 51, 54, 56, 58, 74, 76, 84], "both": [10, 13, 15, 16, 17, 25, 38, 39, 40, 41, 43, 46, 54, 55, 58, 65, 70, 72, 76], "bottleneck": 47, "bound": 54, "boundari": [9, 41, 43, 60, 70, 90], "bp": 10, "brain": [9, 10], "brainscal": [10, 39, 64], "branch": [15, 40, 42, 57, 72], "breach": 10, "break": 89, "breakpoint": 41, "breitwies": [10, 47], "brett": [21, 47, 53, 91], "brian": [1, 10, 11, 21, 22, 23, 25, 26, 27, 30, 31, 32, 36, 37, 39, 40, 44, 47, 70, 71, 72, 75, 76, 79, 81, 91], "brian2": 15, "brianmorphologi": 40, "briansimul": 36, "bring": [65, 71], "brizzi": 47, "broad": 10, "broken": 75, "brought": 10, "bruederl": 47, "br\u00fcderl": [10, 37, 47], "btmorph": 40, "bug": [12, 15, 16, 17, 34, 67, 68, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81], "build": [15, 20, 21, 22, 26, 27, 28, 29, 30, 31, 34, 37, 39, 40, 41, 45, 46, 47, 70, 71, 82, 91], "build_connect": 13, "build_creat": 13, "build_record": 13, "build_reset": 13, "build_run": 13, "build_spike_sequ": 26, "build_state_queri": 13, "buildcputim": 21, "built": [0, 9, 26, 35, 41, 44, 49, 53, 57], "builtin": 53, "bunch": [72, 74, 76], "burst": 26, "busi": 10, "by_column": 54, "by_dist": [40, 41], "c": [9, 10, 20, 36, 47, 53, 54, 71], "c_m": [3, 12], "cagnol": 10, "calcul": [8, 9, 21, 26, 30, 43, 51, 54, 60, 75, 76, 89], "calculate_s": 60, "call": [3, 4, 9, 10, 11, 13, 44, 45, 46, 49, 50, 51, 53, 56, 58, 59, 61, 71, 72, 74, 76, 81, 89], "callabl": [59, 74, 76], "callback": [19, 21, 26, 51, 59, 74, 75, 76, 89], "can": [3, 4, 5, 9, 10, 11, 13, 15, 18, 23, 25, 33, 36, 37, 38, 40, 42, 43, 44, 45, 46, 49, 54, 55, 56, 57, 60, 61, 64, 70, 71, 72, 74, 75, 76, 79, 84, 85, 89, 90, 91, 92], "can_record": 56, "cancel": 10, "candid": 62, "cannot": [16, 51, 53], "capabl": 3, "capac": 91, "capacit": 92, "capit": 10, "care": [11, 45, 88, 89], "carri": [10, 11, 43], "cartesian": 60, "case": [9, 10, 13, 16, 24, 25, 36, 37, 38, 40, 42, 43, 45, 54, 55, 56, 60, 71, 89, 91], "caus": [10, 13, 44], "caveat": 16, "cd": [36, 42], "ce": 10, "cea": 10, "cecil": [10, 37], "cedex": 10, "cell": [0, 1, 8, 9, 11, 12, 13, 19, 21, 27, 30, 33, 35, 44, 46, 51, 52, 55, 56, 57, 60, 65, 70, 71, 72, 76, 85, 91], "cell_class": [40, 41], "cell_param": [21, 27], "cell_paramet": [12, 26, 88], "cell_typ": [25, 40, 41, 46, 72, 76], "cell_type_demonstr": 22, "cellclass": 56, "cellparam": 56, "cells_for_plot": 43, "celltyp": [9, 12, 21, 32, 43, 44, 46, 50, 56, 65, 91], "celltype_cl": 44, "center": 10, "centr": [10, 40, 60], "certain": [10, 36, 37, 46, 53, 71], "cf": [55, 71], "cgconnect": [75, 76], "chanc": 45, "chang": [3, 9, 11, 15, 32, 38, 39, 43, 46, 49, 52, 53, 55, 56, 59, 64, 68, 69, 70, 72, 73, 89, 92], "changelog": [11, 15], "channel": [30, 40, 41, 43, 91], "channel_index": [26, 28], "char": [32, 61], "characterist": 10, "charg": 10, "charl": 10, "check": [13, 14, 15, 21, 36, 39, 40, 42, 51, 54, 70], "check_bound": 54, "check_weight": 55, "checker": 65, "checklist": 15, "checkout": 17, "cheetah": [12, 36, 42, 71], "chemic": 9, "chesnai": 10, "china": 47, "chip": [39, 47], "chirp": 35, "choic": [10, 40, 49, 89], "choos": [3, 10, 72, 76], "chosen": [9, 40, 50, 51], "christian": 10, "ci": 77, "circuit": 47, "circuit_config": 33, "circumfer": 9, "circumst": [10, 16, 83], "claim": 10, "clamp": [3, 21], "clarifi": [9, 16, 85], "class": [0, 3, 4, 9, 11, 13, 19, 25, 26, 32, 34, 35, 40, 43, 44, 45, 46, 50, 52, 56, 57, 58, 64, 65, 70, 71, 72, 73, 74, 75, 76, 81, 89, 90], "classif": 47, "classmethod": [53, 55], "clean": [20, 22, 26, 27, 28, 29, 30, 31, 59, 65], "cleaner": 71, "clear": [11, 13, 56], "cleft": [9, 55], "click": [14, 37], "clock": 61, "clone": 15, "cloneconnector": [0, 51, 73, 76], "close": [10, 15, 43, 73], "closest": 56, "cm": [3, 12, 21, 26, 27, 41, 43, 44, 46, 53, 56, 72, 76, 88, 91], "cmap": 25, "cm\u00b2": 21, "cng": [40, 41], "cng_alt": 41, "cnr": [10, 21], "co": 46, "coba": 21, "coba_alpha": 30, "coba_exp": 30, "coba_syn": 44, "code": [10, 11, 13, 17, 21, 37, 44, 54, 65, 70, 71, 72, 75, 76, 89], "codebas": [15, 17], "codemeta": 15, "cognit": 10, "coher": 10, "col": 24, "collect": 43, "colleg": 10, "color": 3, "colour": [11, 38], "column": [9, 13, 37, 39, 51, 54, 56], "column_nam": [9, 51], "com": [5, 14, 15, 16, 42, 73, 76], "combin": [9, 40, 43, 55, 59, 79, 91], "come": [10, 40, 54], "command": [38, 45, 61, 72, 76], "commenc": 10, "comment": [16, 37, 49, 58], "commerci": 10, "commissariat": 10, "commit": [10, 15, 16], "common": [11, 37, 38, 40, 43, 47, 54, 56, 70, 71, 72, 76], "commonli": 37, "commun": [10, 16, 17], "compar": [3, 40, 49], "compart": [36, 40, 91], "compartment": [72, 76], "compat": [10, 33, 37, 39, 43, 51, 56, 71, 74, 85], "compatible_output": [13, 59, 70], "compens": 10, "compil": [10, 36, 42, 45], "compilestd_unix": [36, 42], "complaint": 16, "complet": [11, 15, 38, 46, 80], "complex": [17, 36, 38, 40, 47, 61, 71, 72, 76, 89], "complexit\u00e9": 10, "compli": 10, "complianc": 10, "compliant": 13, "complic": 10, "compon": [9, 10, 15, 40, 43, 44, 47, 54, 71, 72, 74, 76, 91], "compos": [0, 40, 43], "composit": 9, "comprehens": 47, "compris": 10, "compromis": [74, 76], "comput": [3, 10, 21, 39, 45, 47, 49, 53, 55], "computation": 49, "computed_paramet": [53, 55], "computed_parameters_includ": [53, 55], "concept": 88, "conceptu": 9, "concern": [10, 84], "concis": [4, 9], "concret": 38, "conda": [36, 42], "condalphapostsynapticrespons": [53, 65], "condbetapostsynapticrespons": [53, 65], "condexppostsynapticrespons": [40, 41, 43, 53, 65], "condit": [8, 9, 10, 25, 59, 70], "conduct": [9, 11, 17, 21, 27, 28, 29, 30, 31, 43, 47, 53, 55, 56, 57, 70, 71, 72, 74, 76, 91, 92], "conductance_bas": [53, 56, 70], "conductance_dens": 41, "conf": [15, 47], "confer": 47, "confidenti": 16, "config": 36, "configur": [1, 10, 20, 21, 22, 23, 25, 26, 28, 29, 30, 31, 36, 41, 42, 45, 47, 55, 61], "configure_log": 38, "confirm": 15, "conflict": [10, 45], "conform": [10, 54], "conn": 21, "conn_list": 51, "connect": [0, 3, 8, 10, 11, 20, 21, 25, 26, 30, 33, 37, 39, 40, 41, 43, 46, 47, 51, 54, 55, 56, 57, 70, 71, 73, 74, 75, 79, 85, 88], "connection_data": 9, "connection_typ": 55, "connectionmanag": 70, "connector": [0, 3, 8, 9, 21, 28, 29, 30, 31, 34, 41, 57, 70, 71, 72, 75, 88], "connector_default": 51, "connector_n": 25, "connector_python": 25, "consensu": 16, "consequ": 3, "consequenti": 10, "conserv": 3, "consid": [9, 16, 40, 71], "consider": [10, 11, 49, 54, 71], "consist": [9, 12, 21, 53, 56, 70, 71, 72, 76, 92], "consol": 38, "constant": [9, 26, 30, 43, 46, 51, 52, 54, 55, 71, 84, 91], "constitu": 10, "constitut": 10, "constrain": [3, 71], "construct": [9, 16, 25, 26, 43, 44, 54, 72, 76], "constructor": [9, 13, 40, 43, 49, 53, 56, 70, 71, 72, 76, 90], "consum": [13, 75, 84], "consumpt": 49, "contact": [10, 15, 16], "contain": [4, 9, 10, 11, 15, 17, 25, 36, 38, 41, 43, 44, 49, 51, 53, 54, 55, 56, 57, 59, 60, 61, 64, 71, 72, 76, 90, 91], "contan": 54, "content": [13, 54, 56, 58, 84], "context": [51, 53, 54, 55, 56, 57, 60], "continu": [40, 52, 71], "contrast": 56, "contribut": [10, 17, 18, 34, 72, 76], "contributor": [17, 34, 84], "control": [0, 9, 34, 38, 51, 57, 70, 72, 75, 79], "conveni": [43, 70], "convent": [3, 92], "convers": 70, "convert": [9, 21, 54, 64], "convieni": 43, "coordin": [9, 10, 51, 56, 60], "copi": [10, 43, 52, 53, 55, 71], "copyright": [36, 42, 71], "core": 71, "corner": 60, "correct": [10, 15, 16, 26, 58], "correctli": 38, "correspond": [4, 53, 54, 55], "cortic": 43, "cortical_typ": 43, "cost": 10, "costli": 49, "could": [13, 16, 38, 40, 44, 45, 54, 56, 57, 70, 72, 74, 76], "count": [13, 24, 32, 43, 56], "coupl": [11, 80], "cours": [9, 11, 13, 43, 46, 53, 56], "court": 10, "cov": 15, "coven": 16, "cover": [9, 15], "coverag": 15, "creat": [0, 11, 14, 15, 16, 19, 21, 23, 25, 30, 32, 33, 38, 39, 40, 41, 43, 45, 46, 49, 50, 51, 53, 54, 56, 61, 71, 73, 89], "creation": [9, 10, 46, 61, 71, 72, 76], "credit": [36, 42], "critic": 16, "crook": 47, "cross": [3, 25, 39], "crow": 40, "csa": [9, 21, 36, 42, 71, 75, 76], "csaconnector": [0, 9, 21, 51, 71, 74, 75, 76], "cset": [9, 21, 51], "ctx_cell": 43, "ctx_paramet": 43, "cuba": 21, "cuba_alpha": 30, "cuba_exp": [22, 30], "cuboid": [0, 60, 90], "current": [0, 3, 8, 9, 10, 15, 19, 21, 25, 26, 30, 33, 34, 37, 40, 44, 46, 49, 53, 55, 56, 57, 59, 60, 65, 70, 71, 72, 74, 75, 76, 81, 85, 89, 90, 91, 92], "current_inject": 23, "current_injection_mc_": 41, "current_injection_mc_swc_alt_": 41, "current_sourc": [23, 56], "currentsourc": [35, 43, 83], "currexppostsynapticrespons": [53, 65], "curv": [3, 26, 55, 74, 76], "custom": [10, 11, 51, 53, 55, 56, 57, 60, 74, 76], "cut": 43, "cvode": [4, 59, 64, 71], "cybernet": 47, "czechia": 10, "d": [9, 10, 11, 20, 21, 37, 40, 41, 47, 51, 53, 54, 55, 57, 71, 88], "d_express": [9, 51], "da": 37, "dablefil": 41, "dai": [10, 61], "damag": 10, "danger": 71, "daniel": [10, 47], "darken": 15, "data": [8, 9, 10, 20, 21, 27, 28, 30, 32, 33, 34, 41, 44, 47, 50, 54, 56, 59, 64, 74, 75, 81, 85], "data_block": 43, "data_label": [22, 26, 28, 29, 30, 31], "data_out": 11, "dataset": 13, "datat": 26, "date": [10, 13, 15, 65], "davi": 47, "davison": [10, 21, 37, 41, 47], "dcsourc": [0, 11, 20, 23, 35, 40, 41, 43, 52], "ddpc": [9, 74, 76, 88], "de": [10, 47], "deal": [45, 46, 49], "debeissat": 10, "debug": [20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 38, 61], "decai": [9, 21, 43, 53, 55, 71, 91], "decemb": [63, 79, 84, 86, 87], "decid": [9, 10, 72, 84], "decis": [16, 74, 76], "declar": 44, "decor": 15, "deem": [10, 16], "def": [3, 4, 11, 26, 27, 28, 32, 46, 72, 74, 76, 89, 90], "default": [3, 4, 9, 11, 13, 15, 26, 40, 43, 45, 46, 49, 50, 51, 53, 55, 56, 57, 58, 59, 60, 70, 71, 74, 75, 76, 79, 90, 91], "default_file_format": 43, "default_initial_valu": [4, 13, 43, 53, 55], "default_maxstep": [59, 71], "default_paramet": [4, 25, 43, 53, 55], "defect": 10, "defens": 10, "defin": [4, 10, 11, 16, 21, 25, 27, 40, 41, 43, 46, 58, 65, 70, 88, 90], "definit": [10, 40], "deg": 92, "degre": [51, 52, 60, 71], "dejan": 10, "delai": [4, 10, 20, 21, 25, 26, 27, 28, 29, 30, 31, 40, 41, 51, 54, 55, 57, 59, 70, 71, 72, 73, 74, 75, 76, 79, 88, 89, 91], "delet": [11, 56, 75], "deliber": [74, 76], "delpolaris": 21, "delta": [26, 53], "delta_t": [26, 43, 53, 91], "demonstr": [19, 82], "dend": [40, 41], "dendrit": [9, 26, 40, 41, 55], "dendritic_delay_fract": [26, 55], "dendrodendrit": 57, "densiti": [40, 41, 60], "depart": 10, "depend": [30, 36, 37, 40, 42, 45, 49, 51, 54, 67, 68, 70, 71, 72, 74, 76, 92], "depolar": 30, "deprec": [15, 56, 57, 59, 61, 72, 76], "depress": [9, 19, 26, 41, 55, 72, 76, 82], "depressing_synaps": 9, "depth": [10, 60], "deriv": [10, 21], "derogatori": 16, "describ": [0, 3, 4, 6, 9, 12, 13, 40, 43, 44, 47, 51, 53, 55, 56, 57, 58, 60, 71, 74, 76], "descript": [13, 35, 40, 44, 47, 51, 53, 55, 56, 57, 60, 71, 91], "design": [9, 40, 43, 66], "desir": [45, 49], "destexh": [43, 47], "destin": [38, 54], "destroi": [70, 89], "detail": [4, 9, 11, 16, 17, 33, 37, 38, 39, 40, 43, 44, 45, 49, 66, 72, 76], "detect": [10, 91], "determin": [9, 10, 13, 16, 17, 43, 51, 56, 58, 70, 71, 84], "determinist": [19, 82], "detist": 10, "dev": 42, "develop": [9, 10, 16, 37, 38, 39, 42, 53, 71, 72, 73], "deviat": [3, 52], "diam": 4, "diamet": [40, 41], "dict": [4, 28, 52, 53, 54, 56, 60], "dictionari": [13, 40, 51, 53, 55, 56, 57, 60, 72, 76], "did": [10, 72, 76], "diesmann": [3, 47], "diff": [0, 21, 61], "differ": [0, 1, 3, 9, 11, 16, 19, 25, 26, 37, 39, 40, 43, 45, 46, 49, 51, 53, 54, 55, 56, 57, 60, 70, 72, 75, 76, 81, 88, 89, 90], "digit": 49, "dilig": 10, "dimens": [9, 51, 54, 56, 57, 60, 90], "dimension": [54, 60, 71], "dimensionless": 53, "dirac": 53, "direct": [10, 17, 43, 60], "directli": [10, 11, 13, 61], "directori": [4, 15, 36, 42, 70], "disabl": 16, "disagr": [10, 16], "disast": 10, "disclaim": 10, "discov": 71, "discret": 40, "discuss": [10, 13, 15, 16, 43, 46, 60], "disk": [9, 11, 45], "disp_funct": 51, "displac": 51, "displacementdependentprobabilityconnector": [0, 51], "displai": [10, 49, 51, 71], "disput": 10, "disregard": [58, 84], "dissent": 16, "dissert": 47, "dist": 15, "distal": [40, 41], "distanc": [8, 9, 37, 40, 43, 46, 51, 54, 57, 60, 70, 71, 72, 74, 76, 92], "distance_gener": 60, "distancedependentprobabiblityconnector": 71, "distancedependentprobabilityconnector": [0, 9, 41, 51, 74, 76, 88], "distinct": 71, "distinguish": 40, "distr_npost": 9, "distr_npr": 9, "distribut": [9, 10, 11, 19, 36, 37, 42, 43, 45, 46, 49, 51, 52, 54, 58, 60, 70, 72, 79, 90], "disturb": 10, "divid": 54, "djurfeldt": [9, 10, 37, 47, 51], "do": [9, 10, 11, 13, 15, 16, 36, 38, 40, 43, 44, 45, 49, 51, 59, 70, 71, 72, 76, 89], "doc": [15, 36], "docker": 42, "docstr": 60, "doctest": 15, "doctor": 47, "document": [4, 9, 10, 17, 43, 44, 45, 54, 57, 59, 85, 89], "doe": [4, 9, 10, 11, 13, 15, 37, 44, 53, 55, 70, 74, 89, 92], "doi": [3, 37, 47], "domain": 10, "don": [13, 37, 45, 75], "done": [37, 46, 71, 72, 75, 76, 82], "double_exponenti": 26, "down": [15, 75, 76], "download": [10, 36, 37, 42, 45], "dpi": 24, "draft": [10, 71], "draw": [32, 58, 84], "drawn": [9, 10, 46, 51, 52, 54, 58, 71, 72, 76, 79, 84], "drift": 21, "drive": 26, "driven": [3, 33, 85], "driver": 26, "driver_connect": 26, "drop": [72, 76], "dt": [13, 21, 23, 27, 35, 52, 53, 83], "dtype": [9, 54], "du": 53, "dual": 10, "due": [10, 26, 40, 67, 72], "duke": [36, 42], "duli": 10, "dummi": 15, "duplic": [9, 10, 51, 71], "durat": [10, 21, 26, 53, 91], "dure": [10, 59, 70, 74, 76, 79, 82], "dutt": 47, "dv": 53, "dx": [9, 12, 43, 46, 51, 60, 90], "dy": [12, 43, 46, 51, 60, 90], "dynam": [9, 44, 47, 50, 55, 57, 71, 72, 76], "dz": [51, 60], "e": [3, 4, 9, 10, 13, 15, 16, 21, 25, 33, 35, 36, 37, 39, 40, 42, 43, 44, 45, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 60, 61, 64, 65, 70, 71, 72, 74, 76, 80, 83, 84, 85, 89, 90, 91], "e2": [21, 88], "e2i": [21, 88], "e_count": 21, "e_ex": 12, "e_in": 12, "e_k": 3, "e_l": 12, "e_leak": 21, "e_na": 3, "e_rev": 41, "e_rev_": [12, 21, 27, 43, 53, 91], "e_rev_i": [12, 21, 27, 28, 31, 43, 53, 91], "e_rev_k": 91, "e_rev_leak": 91, "e_rev_na": 91, "e_rev_rr": 53, "e_rev_sfa": 53, "e_syn": [41, 53, 65, 91], "each": [1, 4, 9, 10, 11, 13, 17, 23, 25, 26, 28, 29, 30, 31, 32, 37, 38, 40, 43, 44, 45, 46, 49, 51, 53, 54, 56, 57, 58, 59, 60, 70, 72, 76, 79, 82, 84, 88, 89], "earli": [72, 76], "earlier": [34, 36, 40, 72, 76], "earliest": [75, 76], "earthquak": 10, "eas": [43, 47], "easi": [11, 37, 39, 40], "easier": [11, 65, 70, 72, 76], "easiest": [36, 42], "ecol": 10, "econom": 10, "ecosystem": 39, "edg": [9, 51, 74], "edit": [15, 16], "edu": [36, 42], "effect": [9, 10, 49, 53, 74, 76, 91], "effer": 51, "effici": [3, 9, 43, 47, 54, 71], "egg": 90, "ehrlich": 47, "eif_cond_alpha_isfa_ista": [3, 50, 53], "eif_cond_exp": 71, "eif_cond_exp_isfa_ista": [11, 22, 43, 53, 72, 76, 91], "eight": 45, "eighti": 43, "eilif": 10, "either": [9, 10, 11, 21, 35, 36, 37, 42, 43, 46, 50, 51, 54, 55, 56, 58, 60, 71, 72, 76, 90], "el": 4, "elabor": 9, "elaps": 61, "elapsed_tim": [0, 61], "elapsedtim": [0, 61], "elect": 10, "electr": [9, 10], "electrod": [13, 20], "electron": 16, "element": [10, 54, 57], "elif": 21, "ellips": 71, "elodi": 10, "els": [21, 24, 27, 30, 46], "emerg": 10, "emiss": 4, "emit": [3, 30, 91], "empathi": 16, "emphas": 71, "emploi": 53, "employ": 15, "empti": [4, 53, 58], "empty_v": 54, "en": [10, 36, 40, 71], "enabl": [10, 36, 42, 45, 71], "encapsul": [9, 43, 49, 57, 71], "encod": [26, 27, 28, 29, 31, 41], "encount": 10, "encourag": [10, 40, 74], "end": [0, 11, 13, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 36, 41, 42, 43, 44, 50, 52, 56, 59, 65, 70, 74, 76, 89], "endeavor": 10, "energi": 10, "enforc": [10, 17], "engin": [12, 36, 39, 42, 51, 53, 55, 56, 57, 60, 71, 91], "english": 10, "enhanc": 71, "enlarg": 3, "enough": [58, 71], "ensembl": 53, "ensur": [10, 26, 36, 45, 49, 50], "entir": [10, 13, 15, 40, 46, 49, 51, 54, 89], "entireti": 10, "entiti": 10, "entitl": 10, "enumer": 24, "environ": [16, 17, 36, 42, 47, 84], "envisag": 44, "eppler": [10, 37, 47], "epsp": 30, "equal": [9, 38, 40, 54], "equat": [9, 43], "equidist": 3, "equip": 10, "equival": [9, 10, 37, 43, 44, 46, 56, 59], "erev_exc": 21, "erev_inh": 21, "eric": 47, "error": [4, 10, 15, 17, 54, 59, 70, 71, 91], "especi": [75, 76, 89], "essenti": [72, 76], "establish": [10, 47, 71], "et": [10, 21, 53, 55, 82], "etc": [4, 10, 11, 13, 20, 33, 35, 39, 43, 44, 45, 51, 55, 56, 57, 59, 60, 70, 71, 72, 73, 76, 90], "ethnic": 16, "europ": 10, "european": 10, "evalu": [51, 54, 58], "even": [36, 37, 45], "evenli": 60, "event": [10, 16, 56, 57], "everi": [9, 11, 32, 43, 46, 50, 54, 56, 71, 72, 76], "everyon": 16, "everyth": [36, 38, 42], "evid": 10, "evolut": 26, "evolv": 13, "exact": 26, "exactli": [3, 9, 11, 43, 51, 54, 72, 76], "exampl": [3, 4, 9, 11, 13, 15, 16, 23, 34, 38, 40, 43, 44, 45, 51, 53, 54, 56, 57, 58, 61, 65, 71, 72, 74, 75, 76, 82, 83, 84, 91], "examplemulticompartmentneuron": 41, "exc": 21, "exc_cel": 21, "exc_conn": [72, 76], "exc_syn": 21, "exc_weight": [72, 76], "exce": 10, "except": [9, 15, 16, 24, 30, 32, 36, 40, 42, 43, 49, 56, 58, 71], "exchang": 47, "excitatori": [9, 11, 12, 19, 20, 30, 44, 53, 57, 65, 72, 76, 88, 91], "excitatory_cel": [21, 44], "excitatory_connect": 9, "exclus": 10, "excurs": 3, "excus": [10, 75], "execut": [10, 33, 45, 54, 61, 85, 88], "exercis": [10, 15], "exhibit": [55, 82], "exist": [9, 10, 14, 16, 37, 40, 43, 44, 51, 54, 56, 57, 65, 72, 73, 76], "exit": [21, 22, 23, 25, 26, 27, 30, 31, 32, 59], "exp": [9, 26, 41, 51, 53, 88], "exp2syn": 4, "expand": [54, 60, 91], "expect": [9, 15, 16, 32, 40, 45, 54, 71], "expected_spike_count": 32, "expens": 25, "experi": [16, 44, 65], "experienc": 10, "experiment": [33, 36, 40, 43, 66, 85], "expisyn": 42, "explain": [1, 9, 17], "explic": [33, 85], "explicit": [10, 16, 40, 51, 74, 76, 92], "explicitli": [4, 9, 40, 84], "exploit": 10, "explos": 10, "expoisson": 21, "expon": 24, "exponenti": [9, 21, 24, 27, 30, 43, 46, 49, 53, 58, 65, 71, 72, 76, 79, 91], "export": [5, 34, 64, 80, 85], "export_to_sonata": 33, "expos": [13, 75], "exppsr": [65, 91], "express": [9, 10, 16, 46, 51, 54, 56, 57, 70, 71, 72, 74, 76], "expressli": 10, "expsyncond": 41, "ext": 21, "ext2": 21, "ext2i": 21, "ext_conn": 21, "ext_stim": 21, "ext_syn": 21, "extend": [40, 70, 71, 74, 76], "extens": [11, 36, 40, 43, 71, 72, 76, 82], "extent": [11, 60], "extern": 10, "extra": 21, "extra_param": [59, 71], "extra_paramet": 55, "ey": 72, "f": [41, 43, 54, 60], "f_v_thresh": 46, "face": 16, "facet": 10, "facil": [10, 49], "facilit": [9, 19, 39, 55, 71, 72, 76, 82], "facilitating_synaps": 9, "fact": [10, 71], "factor": [70, 91], "factori": 71, "faculti": 10, "fail": 10, "failur": 10, "fair": [16, 38], "fairli": [15, 40], "faith": [10, 16], "fake": 15, "fals": [3, 4, 9, 11, 13, 24, 26, 28, 29, 31, 45, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 70, 72, 76, 84], "fast": [54, 72, 76], "faster": 49, "fault": 10, "featur": [1, 9, 15, 17, 34, 37, 40, 44, 45, 54, 71, 74, 75, 76, 77], "februari": [68, 70, 71], "fee": 10, "fetpi": 10, "few": [15, 40, 72, 85, 87], "fewer": 16, "fget": 4, "field": 10, "fier": 47, "fifth": 54, "fig": 24, "fig_set": 11, "figsiz": [11, 24], "figur": [11, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 38, 41, 74, 76], "figure_filenam": [20, 22, 23, 26, 27, 28, 29, 30, 31], "file": [4, 10, 13, 15, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 38, 40, 41, 42, 43, 44, 45, 51, 56, 57, 70, 71, 72, 76, 80], "filenam": [11, 13, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 38, 41, 43, 44, 45, 50, 51, 56, 61, 70], "filesystem": 45, "fill": [37, 58, 60, 71, 90], "fill_ord": [12, 60, 90], "filter": [9, 11, 20, 22, 23, 26, 27, 28, 29, 30, 31, 40, 41, 74, 76], "final": [13, 15, 26, 28, 29, 30, 31, 52, 72, 75, 76], "final_weight": 26, "financi": 10, "find": [12, 14, 15, 37, 38, 50, 72], "find_unit": [13, 56], "fine": 38, "finish": [9, 21, 61], "fire": [0, 10, 26, 27, 32, 39, 43, 65, 72, 75, 76, 84, 91, 92], "firing_period": 26, "first": [3, 9, 10, 11, 12, 14, 15, 18, 30, 36, 38, 40, 41, 43, 45, 51, 52, 54, 57, 60, 61, 71, 72, 74, 76, 77, 79, 81, 90], "first_id": [12, 56], "firstli": 10, "fit": 26, "fit_curv": 26, "five": 40, "fix": [0, 4, 15, 16, 17, 26, 32, 52, 53, 61, 67, 68, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 91], "fixednumberpostconnector": [0, 9, 51, 75, 76], "fixednumberpreconnector": [0, 9, 51], "fixedprobabilityconnector": [0, 9, 11, 13, 21, 25, 27, 51, 70, 72, 76], "fixedtotalnumberconnector": [0, 51], "flag": [13, 45, 51, 71, 79], "flake8": 65, "flat": [9, 54, 58], "flatten": [54, 71], "flexibl": [38, 49, 71], "fli": 40, "float": [26, 40, 51, 54, 57, 58, 72, 76], "fncom": 47, "fnin": 47, "fninf": [3, 47], "focu": 15, "focus": 16, "follow": [3, 9, 10, 13, 15, 16, 17, 33, 36, 37, 42, 43, 46, 49, 51, 53, 55, 57, 59, 60, 72, 76, 79, 84, 92], "font": [11, 24], "fontsiz": [11, 24], "forc": 10, "fork": 15, "form": [4, 10, 37, 44, 54, 59, 71, 72, 76], "format": [5, 9, 11, 15, 25, 26, 28, 30, 32, 34, 36, 40, 41, 42, 43, 44, 51, 53, 56, 57, 61, 70, 71, 72, 76, 79, 80, 85], "former": [13, 71], "forth": 10, "forum": [36, 42], "foster": [16, 84], "foundat": 10, "four": [15, 23, 35, 46, 49], "fourfold": [72, 76], "fp6": 10, "fp7": 10, "fraction": [26, 51], "fraction_along": [40, 41], "framework": [1, 10, 47], "franc": 10, "francesco": 47, "free": [10, 13, 16], "freeli": [10, 59], "freiburg": 10, "freie": 10, "french": 10, "frequenc": [21, 23, 35, 46, 50, 52, 53, 55, 75, 91], "from": [1, 3, 4, 10, 11, 13, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 37, 38, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 64, 65, 68, 70, 71, 72, 73, 74, 75, 76, 79, 80, 83, 84, 88, 89, 90, 91], "fromfileconnector": [0, 9, 33, 41, 51, 71, 74, 76, 85], "fromlistconnector": [0, 9, 33, 51, 74, 76, 85], "front": [3, 37, 47], "frontier": 47, "fset": 4, "ftol": 26, "fulfil": 10, "full": [4, 9, 10, 35, 36, 49, 54, 73, 74, 75, 77], "fulli": 47, "function": [0, 3, 4, 9, 10, 11, 13, 15, 26, 32, 34, 38, 43, 49, 50, 51, 54, 55, 56, 57, 59, 70, 71, 72, 74, 75, 76, 84, 89, 91], "fund": 34, "furber": 47, "further": [10, 11, 16, 40, 43, 59, 76], "furthermor": 45, "futur": [4, 10, 17, 39, 44, 55, 72, 75, 76, 89, 90, 91], "f\u00e9d\u00e9rale": 10, "g": [3, 4, 9, 13, 15, 21, 24, 25, 35, 36, 37, 39, 40, 43, 44, 45, 46, 47, 49, 50, 51, 53, 54, 56, 57, 60, 64, 65, 70, 71, 72, 74, 76, 83, 84, 89, 90, 91], "g2p": 41, "g_": 53, "g_kl": 3, "g_l": 12, "g_leak": [4, 21, 91], "g_nal": 3, "g_r": 53, "gaba_a": [3, 40, 41, 43, 91], "gaba_a_e_rev": 3, "gaba_a_g_peak": 3, "gaba_a_tau_1": 3, "gaba_a_tau_2": 3, "gaba_b": 3, "gaba_b_e_rev": 3, "gaba_b_g_peak": 3, "gaba_b_tau_1": 3, "gaba_b_tau_2": 3, "gabaa": [41, 44, 65, 91], "gabab": [65, 91], "galluppi": 47, "gamma": [0, 9, 24, 44, 49, 53, 58, 79], "gap": 42, "gather": [11, 43, 56, 57, 70, 71], "gauss_rate_ipn": 36, "gaussian": [49, 52, 75, 76], "gbar_k": 91, "gbar_na": [46, 91], "gbar_na_distr": 46, "gca": 11, "gen": [27, 46], "gender": 16, "gener": [0, 9, 10, 15, 19, 25, 26, 38, 40, 43, 44, 46, 47, 49, 52, 53, 54, 55, 56, 71, 72, 74, 75, 76, 83, 90, 91], "generate_posit": [60, 90], "generate_spike_tim": [27, 46, 72, 76], "germani": 10, "gerstner": [53, 91], "get": [0, 3, 9, 13, 15, 25, 26, 36, 37, 38, 43, 44, 46, 49, 54, 56, 57, 70, 71, 72, 76, 79, 90], "get_annot": 56, "get_current_tim": [0, 13, 59, 89], "get_data": [3, 4, 11, 20, 22, 23, 26, 27, 28, 29, 30, 31, 32, 41, 43, 45, 56, 74, 76, 81, 83], "get_gsyn": 56, "get_max_delai": [0, 13, 59, 89], "get_min_delai": [0, 13, 59, 89], "get_native_nam": [53, 55], "get_paramet": [0, 51, 52, 60], "get_parameter_nam": [43, 53, 55], "get_popul": [43, 56], "get_schema": [53, 55], "get_simul": [0, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 41, 61, 88], "get_spike_count": 56, "get_time_step": [0, 13, 59, 89], "get_v": [56, 70], "get_weight": 26, "get_xticklabel": 11, "getdelai": [0, 57, 70, 72, 76], "gethostnam": 21, "getlogg": 38, "getspik": 56, "getstd": [36, 42], "getsynapsedynam": [0, 57, 72, 76], "getweight": [0, 57, 70, 72, 76], "gexc": 21, "gid": 43, "gif": 10, "gif_cond_exp": [46, 84], "ginh": 21, "git": [15, 37, 44, 73, 76], "github": [5, 14, 15, 42, 73, 74, 76], "give": [9, 11, 38, 40, 43, 45, 46, 53, 54, 55, 56, 60, 70, 72, 74, 76], "given": [9, 10, 11, 36, 40, 42, 43, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 70, 71, 72, 75, 76, 89, 90, 91], "gkbar": 4, "gl": [4, 44], "gleeson": 47, "global": [3, 43, 49], "glomerulu": 90, "gmax": 44, "gmbh": 10, "gnabar": 4, "gnu": [10, 36, 49], "go": [14, 15, 37], "goal": [40, 66], "god": 10, "goe": 60, "gonin": 10, "good": [10, 16, 53], "goodman": 47, "googl": [15, 37], "govern": [10, 17, 34], "gpl": [10, 37], "gracefulli": [16, 71], "gradual": [15, 44], "grai": 3, "grain": 38, "grandpar": 56, "grant": 10, "granul": 41, "graphic": 47, "gravier": 10, "gray_r": 25, "graz": 10, "great": [49, 56], "greater": [9, 51, 55], "greatli": [75, 76], "grid": [3, 12, 46, 56, 60, 71, 90], "grid2d": [0, 12, 41, 43, 46, 56, 60, 71, 90], "grid3d": [0, 60], "gridspec": 24, "group": [9, 10, 15, 21, 28, 29, 31, 37, 43, 46, 52, 56], "gr\u00fcbl": 47, "gsfa_grr": 42, "gsl": [58, 71, 75, 76], "gslrng": [0, 24, 49, 58, 71, 75, 76], "gsyn": [11, 27, 28, 53, 74, 76], "gsyn_exc": [11, 13, 27, 43, 50, 53, 56, 72, 74, 76], "gsyn_inh": [13, 28, 29, 31, 43, 50, 53, 56, 72, 76], "gsyn_inh_mean": 28, "gsyn_mean": 28, "guid": [9, 10, 71], "guidanc": [9, 72, 76], "guidelin": [17, 84], "gutigweightdepend": 55, "gz": [36, 42], "h": [21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 41], "h5": [11, 41, 43], "h5file": 43, "h5py": 36, "h_e_rev": 3, "h_g_peak": 3, "ha": [1, 3, 9, 10, 11, 13, 16, 36, 39, 42, 43, 45, 46, 49, 51, 53, 54, 55, 56, 61, 69, 71, 72, 74, 75, 76, 80, 81, 83, 84], "had": [16, 39, 72, 76], "hand": [51, 71, 91], "handl": [0, 4, 9, 19, 34, 40, 43, 46, 61, 70, 71, 72, 75, 76, 91], "hanuschkin": 3, "happen": 13, "happi": 15, "harass": 16, "hardwar": [1, 37, 39, 47], "harm": 16, "harmon": 13, "has_native_rng": 54, "has_paramet": [53, 55], "has_presynaptic_compon": 55, "hasattr": [27, 46], "hasn": 72, "hatfield": 10, "have": [3, 4, 9, 10, 15, 16, 26, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 49, 50, 51, 53, 54, 55, 56, 57, 60, 63, 64, 65, 70, 71, 72, 73, 74, 75, 76, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91], "have_gsl": 24, "have_nrn": 24, "hbp": 10, "hdf5": [9, 11, 43, 72, 76], "hdf5arrayfil": 70, "headach": 15, "header": [9, 38, 51], "heavi": 71, "heidelberg": [10, 47], "height": [24, 30, 60], "helia": 3, "help": [13, 21, 22, 23, 25, 26, 27, 30, 31, 32, 38], "help_text": 61, "henc": [54, 58], "here": [3, 4, 9, 11, 13, 25, 38, 40, 43, 54, 55, 56, 60, 76, 88, 90], "herebi": 10, "herefrom": 10, "hereinabov": 10, "hereinaft": 10, "hereof": 10, "hereund": 10, "hertfordshir": 10, "heterogen": [3, 9, 43, 56], "hh": [4, 22], "hh_cond_exp": [11, 22, 46, 53, 71, 75], "hh_traub": 42, "hide": [40, 49], "hierarch": 40, "high": [3, 21, 24, 37, 38, 39, 47, 49, 58], "higher": [38, 49], "highli": [11, 47, 49, 74, 76], "hine": 47, "hist": 24, "histogram": [57, 79], "hoc": [4, 36, 42, 70], "hodgkin": [53, 91], "hold": 43, "holder": 10, "home": [15, 42], "homogen": [3, 43, 54, 72, 76], "honda": 10, "hopefulli": 71, "horizon": 10, "host": [15, 21], "host_nam": 21, "hour": 61, "how": [1, 3, 9, 10, 15, 16, 44, 45, 58, 71, 74, 75, 76, 79, 84], "howev": [3, 9, 10, 13, 36, 38, 40, 43, 46, 49, 54, 72, 76], "hspace": 24, "hstack": [28, 32], "ht_neuron": 3, "html": [10, 15, 36, 42, 60], "http": [5, 10, 14, 15, 16, 36, 41, 42, 43, 45, 60, 71, 73, 76], "huge": 70, "human": [10, 51, 53, 55, 56, 57, 60], "husmann": 47, "huxlei": [53, 91], "hz": [21, 27, 52, 53], "h\u00e5kon": 10, "i": [3, 4, 6, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 24, 25, 26, 27, 30, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92], "i2": 21, "i2i": [21, 88], "i2p": 41, "i_": 12, "i_count": 21, "i_offset": [3, 12, 20, 22, 30, 43, 46, 53, 72, 76, 91], "i_rang": [72, 76], "iadd": 57, "iaf": 44, "ibr": 10, "id": [12, 13, 41, 43, 51, 52, 56, 70, 71, 75, 79], "id_to_index": [43, 56], "id_to_local_index": 56, "idea": [10, 41, 70], "ident": [10, 16, 43, 49], "identifi": [40, 64], "ieee": [47, 53], "if_cond_alpha": [27, 30, 46, 53], "if_cond_exp": [9, 12, 21, 25, 26, 28, 29, 30, 31, 43, 46, 53, 71, 72, 76, 88], "if_cond_exp_gsfa_grr": [22, 53, 71, 75, 91], "if_curr_alpha": [30, 53], "if_curr_delta": [30, 64], "if_curr_exp": [3, 21, 22, 23, 30, 53], "if_facets_hardware1": 91, "ignor": [9, 44], "ii": [10, 16], "iii": 10, "ijcnn": 47, "illustr": [3, 11, 19], "imageri": 16, "immedi": [13, 54, 55, 56], "immeubl": 10, "immut": 53, "impact": 45, "imperi": 10, "implement": [0, 3, 9, 21, 23, 35, 38, 40, 43, 44, 45, 47, 54, 55, 58, 70, 71, 79, 82, 90, 92], "implic": 3, "import": [3, 4, 9, 11, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 38, 40, 41, 42, 43, 44, 45, 46, 49, 54, 61, 71, 74, 75, 76, 80, 84, 88, 90, 91], "import_from_sonata": 33, "importerror": 24, "improv": [4, 17, 65, 71, 75], "ina": 4, "inappropri": 16, "inc": 10, "incid": [16, 75, 76], "includ": [9, 10, 16, 40, 44, 51, 54, 56, 57, 71, 72, 76, 84], "inclus": 16, "incom": 30, "incompat": [72, 76], "inconsist": 71, "inconveni": 4, "incorpor": 3, "increas": [32, 53, 54, 71], "increment": [37, 46, 74, 76], "incur": 10, "indent": 15, "independ": [9, 13, 37, 38, 39, 40, 45, 47, 49, 55, 72, 74, 76, 79], "index": [9, 10, 11, 15, 18, 34, 36, 43, 46, 50, 51, 56, 60, 71, 72, 76, 79], "index_express": 51, "index_from_parent_index": 56, "index_in_grandpar": 56, "indexbasedprobabilityconnector": [0, 9, 51, 74, 76], "india": 10, "indic": [9, 10, 15, 26, 43, 46, 51, 54, 56, 57, 58, 70, 71, 74, 76, 84], "indirectli": 10, "individu": [8, 9, 10, 15, 16, 37, 39, 40, 46, 54], "industri": 10, "ineffect": 10, "inf": 58, "infer": 41, "infinit": [40, 43], "info": [10, 38], "inform": [9, 10, 15, 16, 17, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 38, 43, 44, 47, 57, 59, 66, 73, 74, 75, 77, 81, 85], "informatiqu": 10, "infring": 10, "inh": 21, "inh_cel": 21, "inh_syn": 21, "inherit": [9, 11, 43, 53, 55, 56, 58, 60, 90], "inhibitori": [9, 19, 28, 29, 31, 53, 57, 65, 72, 76, 88, 91], "inhibitory_cel": 21, "inhibitory_connect": 9, "inhomogen": [53, 84], "init_log": [0, 20, 21, 22, 26, 27, 28, 29, 30, 31, 61, 71], "initi": [0, 3, 4, 8, 9, 10, 13, 20, 21, 25, 26, 34, 36, 40, 53, 56, 57, 59, 70, 71, 72, 76, 91, 92], "initial_valu": [13, 25, 26, 27, 30, 41, 43, 56, 57, 71], "initialis": 21, "inject": [8, 19, 30, 33, 34, 40, 52, 53, 56, 74, 75, 81, 85], "inject_into": [0, 11, 20, 35, 40, 41, 43, 52], "inlin": 71, "inm": 10, "inner": 46, "innov": 10, "input": [3, 11, 16, 19, 40, 41, 51, 53, 91], "input_conn": 27, "input_r": [27, 46], "inria": 10, "insert": [30, 40, 41], "insid": [15, 40, 70], "inspect": [8, 50], "instal": [9, 15, 34, 45, 72, 74, 82], "instanc": [4, 9, 13, 16, 46, 49, 51, 52, 53, 56, 70, 72, 76, 88, 90], "instantan": 21, "instanti": 40, "instead": [38, 45, 56, 57, 59, 61, 70, 71, 72, 76, 80, 84, 92], "institut": [10, 16, 47], "instruct": [10, 36, 42], "instrument": [10, 20, 22, 26, 28, 29, 30, 31], "insult": 16, "int": [21, 27, 32, 43, 46, 53, 54], "integ": [43, 46, 50, 51, 54, 56, 58, 72, 76, 84], "integr": [0, 3, 10, 39, 40, 43, 47, 59, 65, 71, 72, 74, 75, 76, 84, 89, 91], "intellectu": 10, "intend": [54, 56, 65, 72, 74, 76], "intent": [44, 54], "inter": 79, "interact": 15, "interest": [9, 10, 15, 16, 40, 71], "interfac": [1, 15, 37, 39, 40, 47, 69], "intern": [10, 13, 17, 40, 43, 45, 47, 52, 64, 65, 71, 72, 76], "interneuron": 41, "interoper": [47, 72, 74, 76], "interpret": [9, 10, 55], "interrupt": 10, "interv": [3, 11, 26, 32, 43, 50, 52, 72, 74, 75, 76, 79], "intervent": 10, "interview": [36, 42], "intfire1": [4, 84], "intfire2": [4, 84], "intfire4": [4, 84], "intro": 12, "introduc": [15, 64, 66, 78, 80], "introduct": 34, "invalid": 10, "investig": 16, "invis": 71, "invok": 10, "involv": 51, "io": [11, 15, 36, 43, 56], "ion": [40, 41, 43, 91], "ion_channel": [40, 41, 43], "ionic_speci": 41, "ionicspeci": 41, "irregularlysampledsign": 64, "is_homogen": 54, "is_loc": 56, "isfa": 53, "isinst": 32, "isn": 38, "isnan": [9, 25], "isol": [15, 71], "issu": [5, 10, 14, 16, 37, 74], "ista": [53, 71], "isyn": 53, "isyn_exc": 53, "isyn_inh": 53, "item": [28, 29, 31, 46, 53, 54, 67], "iter": [32, 43, 53, 54, 56, 57, 90], "ith": 57, "its": [4, 9, 10, 11, 16, 17, 43, 44, 45, 49, 54, 56, 58, 60, 72, 75, 76, 82, 84], "itself": [9, 10, 51, 54, 56, 75, 76], "izh": 22, "izhikevich": [19, 22, 30, 42, 53, 74, 75, 76], "j": [9, 21, 24, 26, 27, 37, 46, 47, 51, 53, 54, 74, 76, 91], "ja": 47, "jan": 10, "janni": 10, "januari": 75, "japan": 10, "jeltsch": 47, "jen": 10, "jinja2": [12, 36, 42, 71], "jm": 37, "jochen": 10, "joffrei": 10, "johann": [47, 71], "join": [16, 71], "joint": [10, 47], "journal": [21, 55], "json": [15, 33], "jth": 57, "juggl": 71, "juli": 72, "jurisdict": 10, "just": [4, 11, 13, 21, 36, 43, 46, 54, 56, 70, 71, 73, 74, 76, 89, 90], "j\u00fclich": 10, "k": [3, 24, 41, 47, 49, 53, 58], "ka": 41, "ka_channel": 41, "kaplan": [10, 47], "kappa": [49, 58], "karlheinz": 47, "kd": 41, "kdr": [40, 41, 43], "kdr_channel": 41, "kdr_conductance_density_ap": 40, "kdr_conductance_density_bas": 40, "kdrchannel": [40, 41, 43], "keep": [13, 15, 53, 61, 71], "kei": [9, 21, 44, 53, 54, 56], "kernel": 71, "keyerror": 56, "keyword": [9, 15, 49, 51, 53, 56, 58, 59, 72, 74, 76], "khoei": 47, "kingdom": 10, "kirchhoff": [10, 47], "kisvardai": 41, "kna_e_rev": 3, "kna_g_peak": 3, "know": [3, 72], "knowledg": 10, "known": [72, 76], "kremkow": [10, 37, 47], "krichmar": 47, "krishnamurthi": 47, "kth": 10, "kunkel": 3, "kwarg": [53, 56, 57, 59, 61], "l": [4, 10, 37, 47], "l1": 47, "l1doi": 47, "la": 10, "label": [0, 3, 9, 11, 12, 21, 22, 26, 27, 28, 29, 30, 31, 40, 41, 43, 56, 57, 61, 71, 88], "labels": [11, 24], "labor": 10, "laboratori": 10, "lag": 26, "lam": 58, "lambda": [3, 9, 13, 27, 40, 41, 46, 49, 54, 56, 57, 58], "lambda_": [9, 58], "languag": [10, 16, 37, 43, 44, 47], "lansner": 47, "larg": [13, 25, 47, 54, 71, 75, 76], "larger": [70, 75, 76], "larrai": 54, "last": [3, 9, 15, 57, 61, 79, 87], "last_id": [12, 56], "later": [13, 36, 39, 43, 63, 64], "latest": [5, 36, 42, 63, 64, 65, 66, 69, 71, 83, 84, 86, 87], "latter": [15, 49, 54], "launch": [45, 88], "laurent": 10, "lausann": 10, "law": 10, "layer": [37, 39, 56], "layout": 13, "lazi": 54, "lazili": 58, "lazily_evalu": [0, 58], "lazyarrai": [0, 36, 42, 58, 71], "le": 10, "lead": [71, 75, 76], "leadership": 16, "leak": 91, "leaki": [53, 65, 91], "least": [10, 13, 15, 16, 36, 72, 74, 91], "leblanc": 10, "lectur": 47, "left": [3, 11], "legal": 10, "legend": [3, 11, 24, 26], "legisl": 10, "legou\u00e9": 10, "lem": [40, 41], "len": [9, 24, 26, 28], "length": [9, 40, 41, 51, 54, 60], "less": [9, 38, 40, 51, 54, 55, 70, 71, 72, 76], "let": [71, 72], "letter": 10, "level": [9, 11, 13, 16, 37, 38, 39, 43, 44, 46, 47, 50, 54, 61, 70, 71, 75, 76], "lgn": 9, "liabil": 10, "liabl": 10, "lib": 42, "libneuroml": 40, "libnrnmech": 42, "librari": [9, 36, 37, 39, 40, 41, 42, 43, 49, 53, 55, 74, 75, 76], "licenc": 34, "licens": 10, "license": 10, "licensor": 10, "lie": 15, "lif": [53, 65], "life": 10, "like": [9, 14, 36, 38, 40, 42, 43, 45, 54, 71, 80], "limit": [10, 39, 49, 53, 55, 75, 76], "lin_rate_ipn": 36, "line": [0, 9, 10, 11, 16, 24, 43, 51, 60, 61, 90], "linear": 53, "linewidth": [3, 11, 24], "link": [11, 15, 18, 47, 89], "linspac": [9, 24, 46], "linux": [15, 36, 42], "list": [3, 4, 11, 17, 26, 36, 40, 43, 46, 50, 51, 52, 53, 54, 55, 56, 57, 59, 64, 67, 71, 72, 76, 84, 89, 91], "list_standard_model": [0, 13, 53, 91], "liter": 12, "littl": 56, "lnc": 47, "load": [10, 42, 51, 61], "load_lem": 41, "load_mechan": 4, "load_morphologi": [40, 41], "load_popul": [0, 61], "load_sonata_simulation_plan": 33, "loader": 41, "loc": [11, 24, 58], "local": [9, 11, 12, 15, 45, 51, 56, 57, 70, 71], "local_cel": 56, "local_first_id": 12, "local_mask": 13, "local_s": 56, "locat": [4, 15, 36, 40, 41, 42, 52, 53, 56, 90], "location_selector": [40, 41, 51], "log": [61, 70, 71], "logfil": [61, 71], "logger": [38, 70], "logic": [54, 71], "lognorm": [49, 58], "london": 10, "long": [0, 26, 38, 54, 61, 72, 76], "longer": [10, 71, 72, 75, 76, 77, 78, 80, 83], "longest_dendrit": 41, "look": 38, "loss": 10, "lot": [11, 13, 54, 65], "low": [3, 13, 21, 24, 49, 58, 71], "lower": [49, 50], "lower_case_with_underscor": 15, "lu": 47, "ludwig": 10, "luescher": 49, "lundqvist": 47, "lungsi": 10, "m": [3, 4, 11, 15, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 41, 46, 47, 51, 52, 53, 54, 55, 59, 70, 71, 74, 76, 84, 91, 92], "ma": 47, "mac": [15, 36, 42], "machin": 15, "machinefil": 45, "machineri": 71, "made": [9, 10, 51, 70, 71, 74, 76, 79, 84], "magnitud": 32, "mai": [4, 9, 10, 11, 13, 15, 16, 18, 36, 37, 40, 41, 43, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 72, 73, 76, 78, 82, 89], "mail": [16, 17, 61, 72, 76], "main": [10, 13, 39, 40, 54, 74, 75, 76, 77, 81], "mainli": 54, "maintain": [13, 17, 39, 84], "mainten": 10, "majeur": 10, "major": [15, 16, 17, 70, 71], "make": [1, 3, 9, 10, 11, 16, 17, 36, 37, 39, 40, 42, 43, 45, 49, 51, 56, 65, 70, 71, 72, 74, 76, 79], "make_panel": 28, "manag": [15, 70], "mani": [15, 43, 45, 58, 71, 72, 84], "manner": 10, "manual": [3, 9, 36, 42, 90], "map": [3, 9, 40, 47, 53, 54, 55, 56, 57], "march": [80, 85], "mark": [0, 15, 61], "markers": 26, "market": 10, "markram": [55, 70, 71, 82], "marseil": 10, "martin": 47, "mask": [43, 54, 56, 58, 84], "mask_loc": 84, "masson": 47, "master": [11, 15, 56], "mat": 11, "match": [10, 43, 53, 65, 66, 69, 70, 71, 74], "math": [21, 26], "mathemat": [10, 43, 44], "matlab": [11, 47, 72, 76], "matplotlib": [3, 11, 15, 24, 28, 29, 41], "matric": 25, "matrix": [25, 51, 57, 60, 73, 74, 76], "max": [24, 26, 27, 30, 57, 79], "max_delai": [3, 21, 26, 27, 89], "maximilian": 10, "maximum": [55, 59, 89], "mayb": 13, "mayr": 47, "mc": [42, 43], "mc_network_": 41, "mean": [9, 10, 15, 21, 23, 27, 28, 32, 35, 41, 43, 45, 49, 51, 52, 53, 54, 56, 58, 71, 75, 76, 83, 91], "mean_spike_count": [21, 27, 56], "meanspikecount": 56, "meantim": [72, 76, 89], "measur": [3, 10, 26], "mechan": [0, 4, 9, 36, 40, 42, 53, 57, 65, 70, 72, 76, 84, 91, 92], "media": 16, "medicin": 10, "medium": 10, "meet": 10, "meier": 47, "memb_init": 4, "member": 16, "membran": [3, 4, 11, 13, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 36, 40, 41, 42, 43, 46, 50, 56, 59, 64, 65, 70, 72, 74, 76, 91], "memorandum": 10, "memori": [3, 11, 54], "mention": [12, 37], "menu": 65, "merg": 75, "mersenn": [49, 58], "messag": [15, 21, 22, 23, 25, 26, 27, 30, 31, 32, 36, 37, 54, 71, 91], "metadata": [11, 43, 56, 72, 76], "method": [3, 4, 9, 11, 13, 15, 35, 40, 43, 45, 46, 50, 51, 53, 54, 55, 57, 58, 60, 70, 71, 72, 74, 76, 89, 90], "mf": 41, "mgconc": 44, "michael": [10, 47], "michel": 10, "micron": [9, 92], "microsiemen": [9, 56, 57, 92], "might": [4, 40], "mihai": 47, "mikael": 10, "millisecond": [9, 55, 56, 57, 59, 89], "millivolt": [56, 57], "millner": 47, "min": [26, 57, 79], "min_delai": [3, 20, 21, 22, 26, 30, 59, 75, 76, 89], "minim": [9, 39, 75, 76], "minimum": [9, 43, 55, 59, 89], "minor": [15, 71], "minut": 61, "miscellan": 10, "mislead": 56, "miss": [67, 90], "mistak": 17, "mit": 53, "mix": [39, 47, 91], "mixedcas": 15, "mock": [15, 71], "mod": [4, 42], "mode": [3, 15, 61, 70], "model": [0, 1, 5, 8, 9, 10, 11, 17, 19, 21, 25, 33, 34, 36, 37, 38, 42, 43, 47, 49, 50, 54, 56, 57, 66, 69, 71, 72, 74, 75, 76, 79, 81, 82, 83, 85], "modeltype_default": [53, 55], "modif": [10, 37, 59], "modifi": [8, 10, 13, 40, 59, 76], "modul": [9, 10, 13, 15, 34, 38, 42, 45, 52, 58, 61, 69, 70, 71, 79, 80, 81, 88, 90], "mois": 10, "moment": 40, "monitor": 4, "month": 10, "moos": [39, 47, 72], "more": [4, 9, 10, 11, 15, 36, 38, 40, 43, 45, 46, 53, 54, 55, 56, 61, 66, 70, 71, 72, 74, 75, 76, 81, 83, 85, 89, 91], "morph": 41, "morphio": [40, 41], "morpholog": [33, 39, 40, 43], "morphologi": [8, 41, 43], "morrison": 3, "most": [3, 9, 15, 40, 43, 44, 45, 46, 54, 56, 65, 69, 70, 71, 72, 75, 76, 83], "mostli": 73, "motion": 47, "move": [65, 70, 71, 72, 74, 76], "mpi": [4, 11, 36, 37, 42, 43, 45, 49, 51, 54, 56, 57, 59, 71, 75, 84, 88, 89], "mpi4pi": [36, 42, 45, 71], "mpi_host": 45, "mpich2": 45, "mpiexec": 45, "mpirun": 45, "msg": 61, "mt19937": 58, "mu": [24, 25, 49, 58, 75, 76], "mu_minu": 55, "mu_plu": 55, "much": [1, 71, 72, 76, 89], "muller": [10, 37, 47, 53], "multaps": [75, 76], "multi": [36, 40, 72, 76], "multi_synapse_oper": [0, 57], "multicompart": 39, "multicompartment": [8, 34, 42, 57, 66], "multicompartmentneuron": [40, 41, 43], "multipl": [9, 11, 15, 26, 37, 43, 45, 49, 50, 51, 52, 54, 56, 57, 59, 71, 72, 75, 76, 79, 82, 84, 89], "multiple_synaps": [57, 79], "multipli": [9, 54], "multiplicativeweightdepend": 55, "multiquantalsynaps": 82, "multivari": 47, "must": [4, 9, 13, 16, 33, 43, 45, 49, 51, 52, 53, 54, 55, 56, 57, 58, 71, 74, 84, 85, 89, 90], "mutabl": 53, "mv": [3, 4, 11, 13, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 41, 53, 74, 76, 91, 92], "my_cell_typ": 43, "my_data": [11, 43], "my_model": 44, "my_network_model": 44, "my_neuron_typ": 44, "myneuronmodel": [40, 43], "myprogressbar": 32, "myscript": 45, "mysimul": 38, "mystructur": 90, "m\u00e9diterran\u00e9": 10, "m\u00f8rk": 10, "m\u00fcller": 47, "m\u03c9": 21, "n": [9, 21, 24, 26, 27, 36, 40, 41, 43, 46, 47, 49, 51, 53, 56, 58, 60, 71, 74, 76, 84, 90, 91], "n_connect": [51, 71], "n_exc": 21, "n_inh": 21, "n_panel": 11, "na": [4, 11, 21, 22, 26, 40, 41, 43, 46, 52, 53, 55, 57, 91, 92], "na_channel": 41, "nachannel": [40, 41, 43], "nactual": 32, "nageswaran": 47, "name": [4, 9, 10, 11, 12, 13, 15, 20, 22, 23, 26, 27, 28, 29, 30, 31, 40, 41, 43, 44, 49, 50, 51, 53, 54, 55, 56, 57, 58, 61, 70, 72, 74, 75, 76, 91], "nan": [9, 25, 54, 57], "nanoamp": [9, 56, 57, 92], "nanofarad": [56, 57], "nap_e_rev": 3, "nap_g_peak": 3, "nation": [10, 16, 47], "nativ": [0, 1, 25, 43, 45, 58, 71, 72, 76, 83, 89], "native_cell_typ": [3, 71], "native_paramet": [53, 55], "native_rng": 25, "native_rng_basese": [4, 59], "native_synapse_typ": 3, "nativecelltyp": [3, 4, 72, 76], "nativemodeltyp": 71, "nativerng": [0, 24, 25, 49, 52, 54, 58, 75, 76], "nativesynapsetyp": [72, 76], "natschlaeg": 10, "natschl\u00e4ger": 47, "natur": 10, "nawrot": 47, "nbin": 24, "ncb": 10, "ncol": 54, "ndarrai": [72, 76], "nearest": 56, "necessari": [10, 11, 13, 15, 38, 45, 59, 72, 89], "need": [3, 4, 9, 11, 14, 15, 17, 18, 26, 36, 40, 41, 42, 43, 45, 49, 54, 57, 61, 65, 66, 69, 70, 71, 72, 74, 76, 88, 90, 91], "neg": [9, 55], "neighbour": [9, 26], "neither": 10, "neo": [26, 28, 33, 36, 41, 42, 43, 56, 63, 64, 72, 76, 81, 83], "neohdf5io": 43, "nest": [1, 10, 11, 15, 20, 21, 22, 23, 25, 26, 27, 30, 31, 32, 37, 40, 43, 45, 47, 70, 71, 72, 74, 76, 79, 82, 88, 91], "nest_synapse_typ": 71, "net": 33, "netstim2": 42, "network": [10, 11, 19, 20, 22, 25, 26, 28, 29, 30, 31, 33, 34, 37, 38, 39, 40, 44, 45, 46, 47, 50, 51, 53, 55, 59, 60, 70, 71, 72, 76, 80, 85, 89], "neunet": 47, "neural": [47, 53], "neuralensembl": [14, 15, 37, 42, 47, 71, 73, 76], "neurit": 40, "neuro": [37, 47], "neurobiologi": 10, "neuroinform": [3, 37, 47], "neuroinformat": [10, 47], "neurom": 41, "neuroml": [1, 21, 39, 40, 41, 47, 53, 72], "neuroml2": 5, "neuromlmorphologi": [40, 41], "neuromorph": [1, 37, 39, 47], "neuromorpho": 41, "neuron": [0, 1, 3, 8, 10, 11, 12, 15, 19, 23, 24, 25, 26, 27, 31, 32, 33, 34, 37, 39, 40, 41, 45, 47, 50, 51, 54, 55, 56, 57, 59, 60, 70, 71, 72, 74, 75, 76, 79, 82, 85, 88, 89, 90], "neuron_model": 44, "neuroncurrentsourc": 52, "neurophysiol": [53, 91], "neurophysiologi": [11, 72, 76], "neurosci": [10, 21, 39, 47, 55], "neuroscientif": 47, "neuroscientist": 53, "never": 54, "nevertheless": [1, 10], "new": [10, 11, 14, 15, 16, 37, 49, 52, 53, 54, 55, 56, 59, 65, 66, 70, 71, 72, 73, 75, 77, 81, 82, 89], "new_shap": 54, "newer": 36, "newli": 56, "next": [0, 3, 24, 30, 32, 36, 40, 43, 58, 59, 72, 76, 84, 89], "nf": [21, 26, 27, 45, 53, 91, 92], "nice": [13, 71], "nicer": 71, "nicola": 10, "nicolau": 47, "nineml": [0, 1, 40, 41, 53], "nineml2nmodl": 44, "nineml_celltyp": 44, "ninemlnetwork": 44, "nixio": 11, "nmda": [3, 9, 44, 57, 65, 91], "nmda_e_rev": 3, "nmda_g_peak": 3, "nmda_sact": 3, "nmda_syn": 44, "nmda_tau_1": 3, "nmda_tau_2": 3, "nmda_vact": 3, "nmodl": [4, 42], "node": [11, 12, 21, 43, 49, 51, 56, 57, 59, 70, 71, 75, 84, 89], "node_id": 21, "node_model": 36, "nois": [35, 41, 52, 83], "noise_gener": 83, "noisycurrentsourc": [0, 23, 35, 41, 52, 83], "nomenclatur": [53, 75, 76], "nomin": 16, "non": [3, 9, 10, 13, 53, 56, 57, 72, 76, 88], "none": [9, 12, 13, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 41, 43, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 71], "nonexistentparametererror": 3, "nor": [10, 43, 59, 89], "norm": 24, "normal": [0, 9, 16, 24, 25, 40, 41, 43, 46, 49, 54, 58, 71, 75, 76, 88], "normal_clip": [0, 24, 49, 58], "normal_clipped_to_boundari": [0, 49, 58], "normalized_filenam": [20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32], "norwai": 10, "norwegian": 10, "nose": [65, 71], "notabl": [10, 11, 43, 72, 76], "notat": 43, "note": [9, 11, 15, 34, 36, 40, 43, 44, 45, 47, 49, 51, 53, 54, 55, 56, 57, 89], "notic": 10, "notifi": [0, 61], "notimplementederror": 30, "novel": 47, "novemb": [74, 83], "now": [3, 4, 11, 13, 15, 30, 36, 39, 41, 42, 45, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 81, 83, 84, 86, 87], "np": [3, 11, 21, 24, 25, 26, 27, 28, 29, 31, 32, 45, 46, 54, 57, 58, 84], "nr": 10, "nria": 10, "nrn": [3, 36, 42], "nrniv": [36, 42, 45], "nrnivmodl": 42, "nrnpython": [36, 42], "nrnutil": 4, "nrow": 54, "nseg": 41, "nuclei": 56, "num": [24, 46], "num_process": [0, 13, 20, 21, 27, 59, 61, 71, 89], "number": [0, 4, 9, 10, 13, 15, 19, 21, 26, 27, 34, 36, 40, 41, 43, 46, 51, 52, 54, 56, 57, 59, 60, 61, 63, 64, 65, 70, 71, 72, 75, 76, 81, 82, 83, 85, 86, 87, 88, 89, 90], "numer": [9, 13, 49, 53, 54, 56, 57], "numpi": [3, 9, 11, 20, 24, 25, 26, 27, 28, 29, 31, 32, 36, 42, 43, 46, 49, 54, 56, 57, 58, 60, 64, 72, 75, 76, 84, 90, 91], "numpybinaryfil": [70, 71], "numpyrng": [0, 9, 21, 24, 25, 27, 43, 45, 46, 49, 52, 58, 75, 76, 90], "nx3": 90, "o": [15, 36, 42, 47], "object": [4, 9, 10, 11, 15, 26, 32, 43, 45, 46, 51, 52, 53, 54, 56, 57, 58, 60, 70, 71, 72, 74, 75, 76, 81, 83, 88], "oblig": [10, 16, 84], "observ": [3, 10], "obtain": [9, 42, 89, 91], "obviou": 15, "obvious": 45, "occas": 10, "occasion": 43, "occur": [55, 79], "occurr": 10, "octob": [64, 76], "off": [3, 13, 45, 71], "off_grid": [3, 74, 76], "offenbach": 10, "offens": 16, "offer": 10, "offici": [15, 16, 72, 74, 76], "offlin": 16, "offset": [9, 23, 35, 52, 60, 91], "often": [9, 38, 45, 54], "ogiciel": 10, "ohm": 41, "ohm_cm": 41, "oi15rpy4": [40, 41], "oist": 10, "okinawa": 10, "old": [15, 65], "older": [18, 65, 66, 69, 72, 76], "oliv": 10, "oliveira": 47, "on_grid": 3, "on_or_off_grid": 3, "onc": [9, 13, 15, 37, 38, 43, 51, 54], "one": [3, 10, 11, 14, 15, 16, 23, 25, 30, 36, 37, 38, 39, 40, 41, 43, 45, 46, 49, 51, 52, 53, 54, 55, 56, 57, 61, 64, 71, 72, 74, 76, 79, 91], "ones": 9, "ones_lik": 11, "onetoon": 9, "onetooneconnector": [0, 3, 9, 20, 26, 51], "onli": [3, 9, 10, 11, 13, 15, 16, 36, 38, 39, 40, 43, 45, 49, 50, 51, 53, 54, 55, 56, 57, 58, 66, 70, 71, 72, 76, 84, 91], "onlin": 16, "onna": 10, "onset": 52, "onto": [15, 40], "onur": 10, "op": 88, "open": [10, 15, 16, 17, 39, 40, 51, 65, 84], "openelectrophi": 11, "openmpi": 45, "oper": [10, 15, 54, 56, 71, 72, 76], "opportun": [10, 72, 76], "optim": 84, "optimis": 54, "option": [1, 9, 15, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 36, 38, 41, 42, 43, 45, 49, 51, 52, 54, 55, 59, 65, 71, 73, 75, 76, 89], "oral": 10, "order": [10, 39, 40, 43, 49, 51, 54, 56, 57, 58, 71], "org": [15, 16, 36, 41, 43, 45, 47, 60, 71], "orient": 16, "origin": [9, 10, 39, 40, 43, 53, 54, 60, 72, 76], "other": [1, 4, 9, 10, 13, 16, 17, 23, 34, 37, 39, 40, 43, 45, 46, 50, 51, 52, 53, 55, 56, 57, 59, 60, 64, 70, 72, 73, 76, 84, 89], "otherwis": [16, 43, 53, 56], "ought": 49, "our": [17, 40, 43, 45], "out": [10, 36, 38, 40, 42, 50, 70, 71, 75, 76], "outcom": 3, "outlin": [49, 72], "output": [3, 4, 11, 13, 15, 33, 41, 43, 44, 45, 51, 53, 55, 56, 57, 60, 85], "output_data": 50, "outsid": [10, 49, 58], "over": [10, 40, 43, 45, 54, 56, 57, 74, 76, 88, 90], "overal": 17, "overhead": 64, "overlap": 40, "overrid": [9, 71], "overview": [38, 54], "own": [0, 9, 10, 11, 13, 15, 35, 37, 49, 54, 58, 71, 72, 76, 90], "owner": 10, "p": [9, 28, 29, 31, 32, 37, 38, 40, 41, 43, 46, 47, 49, 54, 56, 58, 71, 72, 76, 82], "p0": 26, "p1": [3, 4, 12, 25, 26, 51, 72, 76, 84], "p2": [3, 25, 26, 47, 51, 72, 76], "p2g": 41, "p2g_connector": 41, "p3": 26, "p_connect": [9, 11, 25, 51, 70, 72, 76], "p_in": 11, "p_out": 11, "pa": [40, 41, 43], "pack": 65, "packag": [4, 13, 15, 18, 36, 42, 43, 44, 54, 71, 72, 76], "padraig": 47, "page": [15, 34], "painless": 14, "pair": [9, 51, 53, 54, 55, 57, 64, 74, 75, 76, 79], "panel": [3, 11, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 41, 74, 76], "paper": 37, "paragraph": 10, "parallel": [11, 34, 47, 54, 56, 58, 84], "parallel_saf": [21, 45, 49, 54, 58, 84], "paralysi": 10, "param": [72, 76], "paramet": [0, 3, 4, 8, 9, 12, 13, 15, 21, 24, 26, 27, 34, 40, 41, 44, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 70, 71, 74, 75, 79, 89, 91, 92], "parameter": [8, 43, 74, 76], "parameter_check": 55, "parameter_nam": [4, 43, 53, 55, 56, 57, 60, 90], "parameter_spac": 55, "parameteris": [49, 84], "parameternam": 56, "parameters_nam": 58, "parameters_po": 58, "parameterspac": [0, 55], "parametr": 15, "paramt": 71, "paranrn": [36, 42], "parent": [40, 41, 43, 54, 56, 70, 71], "pari": 10, "pariti": 71, "part": [9, 10, 13, 53, 54, 55, 74, 75, 76], "parti": 10, "partial": [10, 71], "particip": 16, "particular": [10, 15, 25, 40], "partzsch": [47, 71], "pass": [9, 11, 13, 15, 32, 43, 45, 54, 56, 57, 70, 71, 72, 75, 76, 90], "passant": 40, "passiveleak": [40, 41, 43], "past": 72, "patch": 71, "patent": 10, "path": [4, 15, 36, 40, 42, 70], "pattern": 51, "paul": 47, "pb": 32, "pconn": 21, "pcov": 26, "pcsim": [47, 72, 76], "pdb": 41, "pdc": 10, "pdf": 24, "pe": 88, "pecevski": [10, 37, 47], "pecuniari": 10, "peopl": [10, 72], "pep8": 15, "per": [3, 16, 41, 46, 51, 56, 57, 60, 64], "percentag": 71, "perfectli": [10, 46], "perform": [3, 10, 17, 45, 49, 54, 71, 74, 76, 91], "performac": 49, "perhap": [40, 72, 76, 89], "period": [3, 9, 10, 26, 60, 70, 71, 75, 79, 91], "periodic_boundari": [9, 60], "perman": [10, 16], "permiss": [15, 16], "perrinet": [10, 37, 47], "person": [10, 16], "perturb": 26, "petkov": 47, "petrovici": 47, "pfeil": 47, "phase": [23, 35, 52, 92], "philosophi": [74, 76], "philox_32": 3, "physic": [10, 16, 46, 47, 92], "pi": [43, 46, 88], "pick": 9, "picklefil": [70, 71], "piec": [15, 37], "pierr": [9, 10], "pill": 15, "pine": 37, "pip": [15, 36, 42, 82], "pipermail": 60, "pkj_morph": 41, "pkl": [20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 50], "place": [10, 15, 40, 43, 44, 54, 73, 76, 85], "placement": 40, "plain": [43, 46, 53, 54], "plan": [36, 40, 72, 76, 90], "plastic": [0, 1, 37, 44, 51, 57, 71, 72, 74, 76], "plasticity_data": 26, "platform": 39, "pleas": [9, 10, 14, 15, 37, 72], "pledg": 17, "plot": [0, 3, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 41, 79], "plot_data": 3, "plot_figur": [20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32], "plot_sign": 11, "plot_spiketrain": 11, "plt": [3, 11, 24], "plural": 10, "pn": 51, "pna": 47, "png": [11, 15, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 41, 74, 76], "po": [3, 46], "point": [9, 33, 36, 38, 39, 44, 54, 55, 56, 60, 70, 85, 89], "point3dwithdiam": [40, 41], "pointneuron": [53, 65, 91], "poisson": [3, 9, 32, 45, 49, 53, 58, 72, 76, 79, 91], "poisson_gener": 3, "polici": 16, "polit": 16, "polytechniqu": 10, "ponant": 10, "pop": [54, 71], "pop1": 33, "pop2": 33, "popt": 26, "popul": [0, 3, 4, 8, 9, 11, 12, 13, 19, 20, 21, 22, 23, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 44, 45, 50, 51, 52, 54, 57, 59, 60, 61, 70, 71, 74, 75, 81, 84, 88, 90], "population1": 9, "population_default": 56, "populationmixin": 56, "populationview": [0, 9, 13, 35, 41, 43, 50, 52, 56, 57, 71], "populationview_default": 56, "port": [37, 88], "posit": [3, 16, 21, 22, 23, 25, 26, 27, 30, 31, 32, 40, 51, 54, 55, 56, 60, 61, 71, 90], "position_gener": [46, 56], "possess": 43, "possibl": [1, 4, 9, 10, 11, 15, 25, 36, 38, 39, 40, 42, 43, 44, 45, 46, 49, 50, 51, 53, 54, 55, 56, 59, 70, 71, 72, 74, 76, 83, 84, 91], "possible_model": 55, "possibli": [10, 56], "post": [0, 3, 9, 15, 16, 26, 30, 37, 40, 43, 45, 46, 51, 53, 55, 56, 57, 60, 71, 72, 74, 75, 76, 91, 92], "post_idx": 51, "post_synaptic_ent": [40, 41, 43], "post_synaptic_receptor": 53, "postprocess": 70, "postsynapt": [26, 51, 57, 74, 76], "postsynaptic_data": 26, "postsynaptic_neuron": 57, "postsynaptic_popul": 57, "potassium": 91, "potenti": [3, 4, 9, 11, 13, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 40, 41, 43, 45, 46, 50, 51, 54, 55, 56, 57, 59, 70, 72, 74, 76, 89, 91], "potjan": 47, "power": [3, 37, 72, 76, 89], "pp": [47, 53], "pp58": 47, "practic": [65, 72, 76, 84], "pragu": 10, "pre": [0, 9, 26, 40, 46, 51, 55, 57, 60, 72, 74, 76], "pre_idx": 51, "preambl": 10, "precis": [3, 49, 74, 76], "predict": 47, "prefer": [11, 36, 45], "prefix": [36, 42], "prepar": [72, 76], "presenc": 10, "present": [1, 36, 40, 49, 58, 92], "preserv": 10, "press": 53, "presynapt": [26, 51, 57, 74, 76], "presynaptic_data": 26, "presynaptic_neuron": 57, "presynaptic_popul": 57, "prevail": 10, "prevent": 26, "preview": 87, "previou": [10, 11, 18, 51, 70, 72, 75, 76, 77, 78, 80, 89], "previous": [56, 70, 84], "primari": 39, "primarili": 68, "princip": [10, 39, 46], "principl": [10, 40], "print": [9, 12, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 38, 41, 43, 54, 57, 74, 76, 89], "print_gsyn": 56, "print_v": [56, 70], "print_x": 70, "printdelai": [0, 57, 72, 76], "printspik": 56, "printweight": [0, 57, 72, 76], "prior": [10, 49], "priorit": [74, 76], "privat": 16, "privileg": 36, "prj": [3, 4, 21, 57, 72, 76], "prj1": 33, "prj2": 33, "prj_ampa": 3, "prj_nmda": 3, "prj_plastic": 3, "prng": 58, "probabilist": 47, "probabl": [11, 13, 21, 51, 53, 71, 72, 74, 76, 82], "problem": [10, 13, 15, 36, 38, 42, 68, 70, 71, 74], "procedur": 71, "proceed": [10, 47], "process": [11, 32, 43, 45, 47, 53, 54, 59, 70, 79, 84, 88, 89, 91], "processor": [45, 47, 49], "produc": [45, 51, 52, 58, 65, 71, 74, 76], "product": 10, "profession": [10, 16], "profit": 10, "program": [10, 12, 36, 37, 47], "programm": 10, "progress": [32, 38, 51, 61, 71], "progress_bar": [21, 51], "progressbar": [0, 21, 32, 61], "project": [0, 3, 4, 8, 10, 11, 13, 15, 16, 19, 20, 21, 25, 26, 28, 29, 30, 31, 33, 34, 36, 39, 41, 42, 43, 46, 51, 54, 56, 60, 65, 70, 71, 72, 73, 76, 79, 88], "projection_default": 57, "projection_n": 25, "projection_python": 25, "pronounc": 37, "propag": [9, 26], "proper": 44, "properli": [4, 15, 44, 75], "properti": [4, 9, 10, 13, 53, 54, 55, 56, 57, 65], "propos": 40, "protect": 10, "protocol": [33, 85], "protonmail": 16, "prove": 75, "provid": [1, 9, 10, 11, 13, 33, 37, 38, 39, 40, 43, 44, 45, 46, 49, 51, 53, 58, 61, 72, 76, 84, 85, 90, 92], "provis": 10, "proxi": 88, "proxim": [40, 41], "prudent": 72, "ps2d": 54, "pseudo": 49, "public": [3, 10, 11, 16, 34, 74, 76], "publish": [10, 16, 37, 40], "pull": [15, 16], "puls": [35, 43, 52], "pure": 55, "purpos": [10, 15, 25, 43, 47], "pursuant": 10, "push": [15, 74, 76], "put": [38, 44, 70], "pv": 56, "pwd": [36, 42], "py": [13, 15, 20, 21, 22, 23, 25, 26, 27, 30, 31, 32, 36, 42, 45, 65, 70, 71, 82], "pygsl": 71, "pymoos": 47, "pynest": [75, 76], "pynn": [0, 1, 3, 4, 5, 6, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 38, 40, 43, 45, 46, 49, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 88, 89, 90, 91, 92], "pynn_dev": 15, "pypi": [15, 44, 71], "pyplot": [3, 11, 24], "pyproject": [15, 65], "pyr_morph": [40, 41], "pyramid": [40, 41], "pyramidal_cel": [40, 41], "pyramidal_cell_class": 41, "pyramidal_cell_typ": 40, "pyramidalcel": 40, "pyramidalneuron": 41, "pytest": [15, 65], "pytest_": 15, "python": [4, 9, 11, 15, 18, 20, 21, 22, 25, 26, 30, 36, 37, 38, 39, 40, 42, 43, 45, 47, 51, 58, 65, 71], "python_rng": 25, "pythonpath": 15, "q_rr": 53, "q_sfa": 53, "qif_cond_delta_etc_etc": 53, "quadrat": 53, "qualiti": [11, 49, 74, 76], "quantal": 82, "quantiti": [11, 23, 26, 30, 41, 92], "queri": 71, "queu": 54, "quick": [11, 16, 54, 75, 76], "quickest": 13, "quit": [20, 22, 26, 27, 28, 29, 30, 31], "quit_on_end": [28, 29, 31], "quorum": 16, "r": [24, 47, 53, 91], "r_ei": 21, "ra": 41, "race": 16, "radiu": [41, 43, 60, 90], "rai": [10, 47], "rais": [9, 43, 56, 58, 71], "rand_distr": [56, 57, 72, 76], "randint": 58, "random": [0, 9, 11, 19, 21, 27, 34, 37, 40, 41, 43, 50, 51, 52, 54, 60, 71, 72, 90], "random_distribut": 24, "random_loc": 41, "random_numb": 25, "random_plac": [40, 41], "random_sect": 41, "randomdistribut": [0, 9, 21, 24, 25, 27, 40, 41, 43, 46, 51, 54, 56, 57, 58, 72, 75, 76], "randomizedelai": [0, 57, 72, 76], "randomizesynapsedynam": [0, 57, 72, 76], "randomizeweight": [0, 57, 72, 76], "randomli": [49, 56, 60, 90], "randomst": [49, 58], "randomstructur": [0, 41, 43, 60, 90], "rang": [9, 11, 12, 24, 32, 58, 60, 71, 89], "rank": [0, 4, 13, 45, 51, 59, 61, 71, 89], "ranlux": 49, "ranlxd2": 49, "rast": 47, "raster": 26, "rate": [3, 11, 19, 21, 25, 26, 27, 41, 46, 53, 70, 91, 92], "rate_gener": 32, "rate_incr": 32, "rather": [9, 11, 13, 39, 40, 43, 44, 46, 49, 70, 71, 72, 74, 75, 76], "ratio": [60, 90], "raw": 70, "rc50": 55, "rconn": 21, "rcparam": [11, 24], "rd": [24, 58], "rd1": [75, 76], "rd2": [75, 76], "re": 39, "reach": 16, "read": [10, 13, 26, 33, 41, 51, 71, 85], "readabl": [51, 53, 55, 56, 57, 60], "reader": 41, "readi": 15, "readthedoc": [36, 71], "real": [11, 43, 49, 54, 72, 76, 88], "realiz": 53, "realli": [71, 75], "reappear": 74, "reason": [10, 16, 39, 46, 49, 71, 72, 76], "rebuild": 61, "receiv": [45, 57, 71], "recent": [3, 15, 36, 42, 64, 72, 83], "receptor": [3, 43, 56, 73, 76], "receptor_typ": [3, 4, 9, 11, 20, 21, 28, 29, 30, 31, 40, 41, 43, 53, 56, 57, 72, 76], "recherch": 10, "rechristen": 71, "recogn": 44, "recommend": [18, 36, 40, 42], "recompil": 36, "record": [0, 3, 4, 8, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 40, 41, 44, 45, 53, 56, 59, 70, 71, 74, 75, 84, 89], "record_from": 71, "record_gsyn": [13, 56, 72, 76], "record_v": [13, 56, 71, 72, 76], "record_x": 71, "recording_precis": 71, "recording_tim": 4, "recov": [3, 43], "rectifi": 91, "recurr": 55, "redistribut": 10, "redrawn": [49, 58], "reduc": [17, 25, 70, 84], "ref": 70, "refactor": [17, 65, 72, 76], "refer": [4, 9, 10, 35, 40, 43, 49, 56], "reference_project": 51, "reflect": [43, 56, 71, 74, 76], "refrac": [4, 42, 84], "refractori": [3, 26, 53, 71, 75, 79, 91], "refractory_period": 43, "regard": [10, 16, 43, 87], "regardless": 16, "region": [9, 51, 58], "registri": 15, "regular": 26, "reimplement": [71, 75], "reintroduc": [72, 76], "reinvent": [39, 40], "reject": 16, "rel": [4, 9, 26, 53, 55, 59, 75], "relai": 43, "relat": [10, 34, 39, 44, 71], "releas": [11, 17, 34, 36, 37, 39, 42, 44, 53, 90, 91], "relev": 10, "reli": 4, "religion": 16, "reload": 70, "remain": [10, 87], "rememb": [72, 76], "remot": [10, 15], "remov": [4, 10, 16, 38, 54, 65, 70, 71, 72, 76], "renam": [81, 84], "renew": 53, "reorder": 13, "rep": 53, "repeat": 25, "repercuss": 16, "repetit": [11, 75], "replac": [10, 11, 15, 20, 21, 22, 23, 25, 26, 27, 30, 37, 45, 51, 70, 72, 76], "replace_axon": 41, "report": [15, 16, 17, 34, 38, 70], "report_tim": [74, 76, 89], "repositori": [15, 37, 44, 72], "repres": [3, 8, 9, 10, 16, 33, 35, 40, 43, 46, 53, 54, 55, 60, 85], "represent": [11, 16, 33, 40, 44, 54, 61, 64, 85], "reproduc": [10, 39, 49, 52], "reproduct": 10, "request": [9, 15, 16, 17, 34, 37, 49, 50, 54, 58, 88], "requir": [4, 9, 10, 13, 17, 36, 37, 39, 42, 43, 44, 46, 49, 51, 52, 54, 59, 63, 64, 69, 71, 74, 82, 83, 89], "research": [10, 72], "reserv": 10, "reset": [0, 3, 11, 42, 50, 59, 61, 70, 71, 72, 76, 89, 91], "reshap": [28, 46], "resist": 21, "resolv": 13, "respect": [10, 15, 16, 26, 72, 76], "respond": 16, "respons": [3, 9, 10, 17, 19, 41, 47, 53, 56, 64, 65], "rest": [13, 46, 91], "restart": 61, "restor": 72, "restrict": [10, 37], "restructur": 13, "result": [3, 10, 11, 15, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 40, 44, 45, 49, 53, 70, 72, 74, 76], "retain": 64, "retina": 9, "retriev": [3, 8, 9, 30, 32, 59], "return": [3, 4, 9, 11, 26, 27, 28, 32, 43, 46, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 70, 71, 72, 74, 76, 81, 83, 84, 89, 90], "revers": [9, 91], "reversal_potenti": 41, "reverse_transl": [53, 55], "revert": 71, "review": 16, "rewir": [51, 71], "rewrit": [71, 75], "rewritten": [72, 76, 80], "rewrot": 71, "rgrid": 90, "right": [3, 10, 16, 51, 84], "rise": [21, 91], "risk": [10, 74, 76], "rm": 21, "rnd": 27, "rng": [0, 3, 9, 21, 24, 25, 27, 43, 45, 46, 51, 52, 56, 57, 58, 60, 71, 72, 75, 76, 84, 90], "rng_seed": 3, "rng_type": 3, "rnglist": 24, "rngseed": 21, "robust": 70, "rocquencourt": 10, "roessert": 10, "room": 15, "root": [36, 56], "rossum": 53, "rotat": 90, "roth": 53, "rough": 74, "round": 21, "routin": 51, "row": [9, 24, 54], "rset": [56, 72, 76], "rtol": [4, 59, 71], "rue": 10, "rule": [9, 10, 74, 76, 84], "run": [0, 3, 4, 10, 11, 15, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 37, 39, 41, 42, 43, 44, 49, 59, 61, 71, 72, 74, 76, 77, 80, 82, 83, 84, 87, 88], "run_all_exampl": 15, "run_for": [74, 76, 89], "run_until": [0, 59, 74, 76, 89], "rv": 24, "r\u00e9my": 10, "r\u00f4le": 88, "s00422": 47, "s1": 47, "s2": 47, "s_": 21, "s_exc": 21, "s_np": 21, "s_per_cm2": 41, "saclai": 10, "safe": [10, 44, 45, 51, 58, 71, 84], "safest": 89, "said": 10, "same": [3, 9, 10, 11, 16, 25, 26, 36, 37, 38, 39, 40, 42, 43, 45, 49, 51, 53, 54, 55, 56, 57, 58, 60, 70, 71, 72, 76, 88, 89], "sampl": [11, 25, 40, 41, 43, 50, 51, 56, 60, 71, 72, 75, 76, 90], "sampling_interv": [26, 43, 50, 56, 75, 76], "sampling_period": 26, "sampling_r": 28, "save": [0, 9, 11, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 41, 44, 54, 56, 57, 61, 70, 71, 74], "save_popul": [0, 61], "save_posit": [56, 71, 79], "saveconnect": [0, 21, 57, 70, 71, 72, 76], "savecputim": 21, "savefig": 24, "scalar": 54, "scale": [9, 13, 24, 47, 58, 60, 71, 92], "scale_factor": [9, 53, 60], "scaled_paramet": [53, 55], "scaled_pdf": 24, "scatterplot": 26, "scenario": [15, 40], "schema": [53, 54, 55], "scheme": [3, 9], "schemmel": 47, "schill": 47, "schmidt": 10, "schmuker": [10, 47], "scholz": 47, "schuch": 47, "schwartz": 47, "sch\u00fccker": 10, "sch\u00fcffny": 47, "scienc": [10, 47], "scientif": [10, 36, 49], "scientifiqu": 10, "scipi": [24, 45, 60], "scope": [9, 10, 17, 39], "screen": 38, "script": [3, 15, 25, 33, 36, 47, 54, 59, 61, 70, 72, 74, 75, 82, 85, 88], "script_nam": [20, 21, 22, 23, 26, 27, 28, 29, 30, 31], "search": 34, "sebastian": 47, "second": [9, 30, 40, 43, 54, 56, 57, 60, 61, 72, 73, 75, 76, 89], "secondli": 10, "section": [1, 4, 9, 17, 33, 40, 41, 43], "secur": 10, "sedml": 44, "see": [4, 5, 9, 10, 11, 15, 16, 18, 33, 35, 36, 40, 42, 43, 45, 46, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 66, 70, 71, 72, 73, 74, 75, 76, 77, 81, 82, 83, 85], "seed": [3, 4, 9, 21, 24, 25, 27, 43, 45, 46, 49, 58, 59, 75, 76, 90], "seek": 10, "seem": [71, 72], "seen": [40, 55, 71], "seg": 4, "segment": [3, 9, 11, 20, 22, 23, 26, 27, 28, 29, 30, 31, 32, 40, 41, 43, 59, 74, 76, 81], "select": [19, 43, 51, 71, 89], "selector": 56, "self": [4, 26, 32, 90], "send": [38, 61], "sens": [43, 70, 72, 76, 79], "sensit": 49, "sent": [10, 45], "separ": [9, 10, 11, 13, 16, 21, 40, 44, 53, 55, 72, 76, 91], "septemb": [66, 67], "sequenc": [0, 26, 27, 40, 45, 46, 49, 52, 53, 72, 76, 91], "sequenti": [12, 60, 90], "sergio": 47, "serial": [33, 70], "server": [10, 15], "servic": 10, "session": 15, "set": [0, 3, 10, 13, 16, 17, 21, 24, 25, 26, 30, 32, 37, 39, 40, 41, 43, 45, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 70, 71, 74, 84, 89], "set_level": [0, 51, 61], "set_paramet": [0, 43, 52], "set_trac": 41, "set_xlabel": 3, "set_xlim": 3, "set_ylabel": 3, "set_ylim": 3, "setdelai": [0, 57, 70, 72, 76], "setp": 11, "setrat": 32, "setsynapsedynam": [0, 57, 72, 76], "setup": [0, 3, 4, 11, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 41, 42, 44, 49, 59, 65, 70, 71, 75, 76, 82, 84, 88, 89], "setweight": [0, 57, 70, 72, 76], "seventh": 10, "sever": [16, 17, 26, 43, 49, 50, 54, 72, 75, 76, 89], "sexual": 16, "sga1": 10, "sga2": 10, "sga3": 10, "shailesh": 10, "shall": 10, "shape": [0, 11, 51, 53, 54, 57, 58, 65, 74, 76, 90, 91], "share": [11, 43, 45], "sharma": 10, "sharon": 47, "shell": 61, "ship": 43, "short": [0, 43, 72, 76], "shortcut": [11, 38], "shorter": 40, "should": [4, 9, 10, 11, 13, 15, 17, 21, 26, 30, 36, 39, 40, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 69, 71, 72, 74, 75, 76, 83, 84, 89], "show": [3, 11, 16, 21, 22, 23, 25, 26, 27, 30, 31, 32, 89], "show_fit": 26, "shown": [10, 11], "side": [51, 60], "side_length": 90, "sigma": [24, 25, 49, 58, 75, 76], "sigmoid_rate_gg_1998_ipn": 36, "sigmoid_rate_ipn": 36, "sign": [10, 15], "signal": [11, 26, 47, 49, 57, 58, 72, 75, 76, 83], "signatur": [47, 72, 76], "signific": [72, 76], "significantli": 26, "silicon": 47, "silver": 47, "sim": [11, 12, 15, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 40, 41, 42, 43, 44, 61, 65, 72, 76, 80, 83, 88, 91], "sim1": 88, "sim2": 88, "sim_tim": 3, "simcputim": 21, "similar": [21, 71], "similarli": [4, 9, 10, 40, 43, 54, 81], "simpl": [0, 9, 14, 19, 38, 40, 43, 56, 61, 71, 82, 89, 90], "simple_paramet": [53, 55], "simple_stdp": 26, "simpleneuron": 4, "simpleneurontyp": 4, "simpler": [71, 72, 76], "simplest": [9, 90], "simplestochasticsynaps": [29, 82], "simplic": 71, "simplif": [71, 72, 76], "simplifi": [54, 56, 71, 72, 76, 81], "simtim": [27, 46, 59], "simul": [0, 1, 3, 4, 9, 10, 11, 15, 17, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 64, 70, 71, 72, 74, 75, 79, 80, 82, 84, 85, 87, 91], "simulation_config": 33, "simulation_plan": 33, "simulation_result": [11, 74, 76], "simulaton": 21, "simulatorspecificopt": 71, "sin": [43, 46], "sinc": [9, 11, 13, 37, 40, 43, 56, 58, 61, 69, 70, 71, 72, 74, 75, 76], "sine": [35, 52], "sine_wav": 43, "singl": [9, 13, 15, 21, 26, 40, 43, 45, 46, 49, 50, 51, 52, 54, 55, 56, 57, 65, 70, 71, 72, 75, 76, 91], "singular": 10, "sinha": 10, "site": [15, 36, 82], "situat": [39, 46, 49], "six": 47, "sixth": 10, "size": [0, 3, 9, 11, 12, 16, 21, 24, 27, 30, 32, 43, 46, 51, 54, 56, 57, 58, 61, 70, 71, 72, 74, 76, 84], "size_loc": 12, "skim": 15, "skip": 51, "slice": [43, 54, 56, 71], "slightli": 9, "slope": 91, "slow": [72, 76], "slower": [49, 54], "small": [4, 11, 13, 15, 19, 24, 26, 36, 37, 51, 63, 64, 65, 74, 76, 85, 86, 87], "small_network": 27, "smallworldconnector": [0, 51, 71], "smart": 41, "smtphost": 61, "so": [10, 11, 13, 15, 26, 40, 42, 43, 45, 49, 51, 53, 70, 71, 72, 76, 87, 90], "social": 16, "socket": 21, "sodium": [41, 91], "softwar": [10, 11, 17, 47, 84], "sole": [10, 55], "solut": [10, 65], "solver": [59, 71], "soma": [4, 9, 40, 41, 56], "some": [3, 9, 11, 15, 17, 36, 40, 41, 44, 46, 53, 54, 59, 64, 71, 74, 75, 82, 83, 84, 89], "someth": [36, 38, 42, 45, 90], "sometim": 46, "somewhat": 45, "somewher": [3, 15], "son": 10, "sonata": 36, "sonata_output_dir": 33, "sonataio": 33, "song": 55, "soon": 33, "sophia": 10, "sophist": 9, "sort": [15, 75], "sourc": [0, 4, 10, 13, 15, 17, 23, 26, 30, 34, 35, 36, 39, 40, 41, 42, 43, 46, 51, 54, 55, 56, 57, 58, 59, 60, 61, 65, 70, 72, 76, 84], "source_id": 11, "source_sect": 4, "space": [0, 9, 10, 12, 15, 16, 40, 41, 43, 46, 54, 56, 57, 70, 71, 72, 76, 90], "spam": 90, "sparse_connect": 9, "spatial": [0, 8, 9, 34, 40, 43, 56, 70, 71], "special": 40, "specif": [1, 9, 10, 15, 16, 36, 37, 40, 42, 43, 50, 53, 54, 55, 59, 70, 72, 76, 83, 89, 92], "specifi": [3, 4, 5, 10, 11, 13, 25, 30, 40, 41, 43, 44, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 71, 74, 84, 90], "speed": [4, 9, 25, 51, 52, 70, 75, 76], "speedup": [75, 76], "sphere": [0, 41, 43, 60, 90], "spheric": 60, "sphinx": 15, "spike": [0, 4, 11, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 41, 43, 44, 45, 46, 47, 54, 55, 56, 70, 74, 75, 82, 85], "spike_count": 32, "spike_dur": 3, "spike_precis": [3, 71], "spike_sequence_gener": 26, "spike_sourc": [20, 27, 28, 29, 31], "spike_tim": [3, 20, 26, 27, 28, 29, 30, 31, 46, 53, 56, 61, 72, 76, 91], "spike_time_gen": 26, "spikepairrul": [9, 26, 55], "spikes_in": 11, "spikesourcearrai": [3, 20, 26, 27, 28, 29, 30, 31, 45, 46, 53, 61, 72, 76], "spikesourcegamma": 79, "spikesourceinhgamma": 53, "spikesourcepoisson": [3, 4, 11, 19, 21, 25, 41, 45, 46, 53, 59, 70], "spikesourcepoissonrefractori": 79, "spiketrain": [11, 26, 27, 32, 41, 43, 64, 74, 76], "spiketrainlist": 64, "spinnak": 39, "split": [72, 76], "spread": 45, "spring": 65, "spykeview": 11, "sqrt": 54, "squar": 71, "src": [3, 9, 36, 42], "st": 32, "stabl": [18, 37], "staff": 10, "stage": [40, 72], "stai": 15, "standard": [0, 3, 9, 13, 17, 19, 23, 34, 37, 39, 40, 43, 44, 49, 51, 52, 56, 57, 64, 65, 71, 72, 82], "standardcelltyp": [13, 53, 70], "standardcelltypecompon": 53, "standardmodel": 13, "standardmodeltyp": [53, 55], "standardpostsynapticrespons": 53, "standardsynapsetyp": 55, "standardtextfil": 70, "start": [0, 9, 11, 15, 20, 21, 23, 35, 40, 41, 43, 51, 52, 53, 60, 61, 70, 71, 83, 91], "stat": 24, "state": [3, 10, 13, 34, 40, 41, 43, 47, 56, 57, 59, 61, 72, 76], "statement": [38, 44, 71], "static": [0, 29, 31, 36, 42, 43, 57, 61, 70], "staticmethod": 13, "staticsynaps": [3, 4, 9, 11, 20, 21, 25, 26, 27, 29, 30, 31, 40, 41, 55, 72, 76], "statu": [5, 10, 38], "std": 83, "stderr": 71, "stdev": [23, 35, 41, 52, 83], "stdp": [3, 9, 19, 55, 74, 76], "stdp_facetshw_synapse_hom": 3, "stdp_model": 26, "stdp_synaps": 3, "stdpmechan": [9, 26, 55], "stdpmechanism_default": 55, "stdptimingdepend": 55, "stdpweightdepend": 55, "stdwa_guetig": 42, "stdwa_softlimit": 42, "stdwa_songabbott": 42, "stdwa_symm": 42, "stdwa_vogels2011": 42, "step": [3, 15, 30, 35, 37, 43, 50, 52, 53, 59, 64, 75, 76, 89], "step_curr": [11, 40, 41], "step_current_dend": 41, "step_current_soma": 41, "stepcurrentsourc": [0, 23, 35, 43, 52], "steve": 47, "still": [9, 11, 36, 37, 39, 71, 72, 74, 76, 83], "stim_dur": 21, "stimul": 21, "stimulu": 30, "stochast": [9, 19], "stochastic_comparison": 28, "stochastic_comparison_": 28, "stochastic_synapses_": 29, "stochastictsodyksmarkramsynaps": [28, 82], "stockholm": 10, "stop": [11, 20, 23, 35, 40, 41, 43, 52, 74, 76, 83], "stopiter": 32, "storag": [10, 54], "store": [10, 11, 13, 33, 54, 61, 70, 71, 85], "store_tru": [20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32], "str": 11, "straight": 60, "straightforward": [4, 35, 37, 45, 49, 75, 90], "strategi": [9, 40], "strict": 70, "strike": 10, "string": [9, 11, 12, 56, 57, 60, 61, 71, 72, 74, 76], "strong": 26, "strongli": [15, 36, 42, 49], "structur": [0, 8, 9, 12, 34, 40, 41, 43, 46, 56, 59, 61, 70, 71, 81, 89], "structure_default": 60, "stub": 15, "studi": 10, "stuff": 71, "style": [17, 65], "sub": [0, 13, 21, 40, 49, 51, 53, 54, 71, 72, 76, 90], "subclass": [13, 43, 49, 53, 60, 71, 90], "subdirectori": 15, "subhasi": 10, "subject": [10, 61], "submit": [10, 17], "subplot": [3, 11, 24], "subscrib": 10, "subsequ": 10, "subset": [5, 11, 43, 46, 50, 56, 58, 84], "substrat": 47, "subthreshold": 91, "subtract": 9, "subvers": [73, 76], "success": 10, "suffer": 10, "suffic": 43, "suggest": [13, 15, 17], "suit": [10, 15, 65, 71, 74, 76], "suitabl": 10, "sum": [11, 24, 32, 57, 79], "summar": 76, "summari": 54, "superflu": [72, 76], "suppl": 47, "supplement": 10, "supplementari": 10, "suppli": [10, 49, 52, 56, 60], "support": [4, 9, 11, 13, 18, 33, 36, 37, 39, 40, 41, 42, 43, 44, 45, 49, 50, 53, 55, 56, 63, 64, 70, 71, 72, 74, 75, 77, 78, 80, 83, 86, 89, 91, 92], "suppos": 54, "suppress": 9, "sur": 10, "sure": [13, 36, 42, 45, 71], "surfac": 9, "svn": 44, "swap": [75, 76], "swc": [40, 41], "sweden": 10, "switch": [70, 73, 76], "switzerland": 10, "symbol": 15, "symmetr": 70, "syn": [4, 9, 11, 27], "syn_delai": 27, "synaps": [0, 1, 8, 13, 19, 21, 26, 30, 34, 37, 39, 40, 41, 43, 44, 50, 53, 54, 57, 59, 70, 71, 83, 91], "synapse_dynam": [0, 57, 72, 76], "synapse_model": 44, "synapse_typ": [3, 9, 28, 29, 30, 31, 40, 41, 57, 70, 72, 76], "synapse_type_n": 25, "synapse_type_python": 25, "synapsedynam": [57, 72, 76], "synapsetyp": [9, 57, 72, 76], "synapt": [1, 11, 19, 21, 25, 26, 27, 28, 29, 31, 37, 40, 41, 43, 44, 46, 51, 53, 55, 56, 57, 59, 60, 64, 70, 71, 74, 75, 79, 89, 91, 92], "synaptic_input": 30, "synchroni": 55, "syntax": [9, 41, 50, 71], "system": [9, 10, 15, 36, 37, 39, 43, 45, 47, 60, 71, 74, 77], "t": [3, 13, 25, 26, 32, 36, 37, 38, 43, 45, 46, 47, 53, 59, 70, 72, 74, 75, 76, 89], "t0": 26, "t_e_rev": 3, "t_g_peak": 3, "t_post": 26, "t_pre": 26, "t_ref": 12, "t_refrac": 21, "t_stop": [26, 32], "tab": 15, "tacit": 10, "tacitli": 10, "tag": 15, "take": [4, 9, 10, 11, 15, 16, 17, 30, 44, 45, 46, 49, 50, 51, 54, 57, 70, 72, 73, 74, 76, 88, 89], "taken": [21, 40, 55, 72, 76], "tanh_rate_ipn": 36, "tar": [36, 42], "target": [0, 15, 41, 43, 57, 71, 72, 76, 88], "tau": [4, 26, 44, 84], "tau1": 4, "tau2": 4, "tau_decai": 53, "tau_eta": 84, "tau_eta1": 84, "tau_eta2": 84, "tau_eta3": 84, "tau_exc": 21, "tau_facil": [9, 28, 31, 55, 72, 76], "tau_gamma": 46, "tau_inh": 21, "tau_m": [3, 12, 21, 23, 25, 26, 27, 30, 43, 46, 53, 54, 56, 65, 72, 76, 88, 91], "tau_minu": [9, 26, 55], "tau_plu": [9, 26, 55], "tau_psc": 71, "tau_rec": [9, 28, 31, 51, 55, 72, 76], "tau_refrac": [3, 12, 21, 23, 26, 27, 43, 46, 53, 91], "tau_ris": 53, "tau_rr": 53, "tau_sfa": 53, "tau_spik": 3, "tau_syn": [40, 41, 53, 65, 91], "tau_syn_": [3, 12, 21, 27, 43, 53, 71, 91], "tau_syn_ex": 12, "tau_syn_i": [12, 21, 27, 28, 31, 43, 53, 71, 91], "tau_syn_in": 12, "tau_theta": 3, "tau_w": [43, 53, 91], "taud": 44, "taur": 44, "taurefrac": 44, "tbin": 53, "tc_cell": 43, "tc_paramet": 43, "team": 16, "technic": 10, "technolog": 10, "technologi": 10, "telecommun": 10, "telenczuk": 70, "templat": [4, 12, 13, 36, 41, 42, 43, 51, 53, 55, 56, 57, 60, 71], "tempor": 9, "temporari": [4, 10, 16, 50], "temporarili": 16, "ten": 16, "term": [0, 10, 15, 56, 71, 72, 76], "termin": [9, 10, 32, 40, 51], "test": [10, 17, 36, 37, 42, 44, 50, 65, 70, 71, 72, 74, 76, 77, 87], "test_changing_electrod": 15, "test_electrod": 15, "test_mpi": 70, "test_sim": 3, "tetrahedron": 90, "text": [9, 10, 11, 61, 71], "tgt": 9, "th": [54, 57], "thalamocort": 43, "thalamocortical_typ": 43, "than": [9, 10, 13, 16, 39, 40, 43, 44, 45, 46, 49, 51, 53, 55, 70, 71, 72, 74, 75, 76, 91], "thank": [70, 73], "thei": [3, 9, 10, 11, 13, 15, 16, 26, 33, 43, 54, 56, 71, 72, 74, 76, 82, 85], "them": [9, 13, 15, 25, 37, 39, 40, 43, 45, 46, 54, 61, 71, 90], "themselv": 16, "theoret": 10, "theori": [47, 53], "therefor": [3, 9, 10, 11, 26, 39, 51, 54, 71, 72, 76, 87], "thereof": 10, "theta": [3, 24, 49, 58], "theta_eq": 3, "thi": [1, 3, 4, 9, 10, 11, 12, 13, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 87, 89, 91], "thin": 53, "thing": [13, 44], "think": [4, 9, 15, 70, 74, 76], "third": 10, "thirti": 10, "thoma": [10, 47], "thorough": 40, "those": [9, 10, 21, 40, 43, 45, 49, 54, 56, 57, 69, 72, 84], "thread": 21, "threaten": 16, "three": [16, 39, 40, 43, 49, 54, 58, 70, 72, 76, 82, 84], "threshold": [3, 53, 91], "through": [15, 33, 40, 58, 84, 85], "throw": 45, "thu": 40, "ticket": [14, 70, 71], "tidi": 70, "time": [10, 11, 13, 15, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 43, 45, 49, 50, 52, 53, 54, 56, 59, 61, 64, 70, 71, 74, 75, 83, 84, 89, 91, 92], "time_in_word": [0, 61], "time_point": 59, "time_slic": 30, "timer": [0, 21, 61], "timestep": [3, 4, 11, 20, 21, 22, 26, 27, 30, 41, 56, 59, 88, 89], "timing_depend": [9, 26, 55], "titl": [22, 23, 24, 26, 28, 29, 30, 31, 32, 41], "titles": 24, "tmgsyn": 42, "tmisyn": 42, "to_fil": 56, "todo": [40, 41, 59], "togeth": [15, 36, 43, 44, 56, 57, 61, 71], "togther": [51, 53, 55, 56, 57, 60], "toler": [4, 59], "tom": 73, "toml": [15, 65], "too": 75, "tool": [11, 15, 39, 40, 47], "top": [11, 28, 29, 31, 38, 43, 50], "topograph": [9, 72, 76], "topographica": 47, "topologi": [60, 70], "tort": 10, "toru": 9, "total": [9, 10, 26, 43, 54, 56, 57, 70, 71], "toward": [10, 16, 47, 72], "trac": 71, "trace": 4, "traceback": 3, "track": 71, "tracker": [15, 37, 72, 74], "trademark": 10, "tradit": 3, "train": [32, 46, 72, 75, 76], "transact": 53, "transfer": 10, "transfere": 10, "transient": 91, "transit": 43, "translat": [0, 10, 13, 47, 53, 55, 58, 91], "transmiss": [9, 10, 26], "transmit": [10, 82], "transpar": 37, "traub": 91, "travi": 77, "travisci": [74, 76], "treat": [11, 40, 43], "tree": [15, 40, 56], "trend": 47, "trigger": [46, 53, 91], "triplet": [51, 55], "trivial": 75, "troll": 16, "true": [3, 4, 9, 10, 11, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 38, 41, 43, 45, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 70, 71, 74, 76, 84], "truncat": 40, "try": [3, 9, 15, 16, 24, 30, 32, 36, 38, 40, 74], "tset": [56, 72, 76], "tsodyk": [55, 70, 71, 82], "tsodyks_synaps": 71, "tsodyksmarkram": [31, 42], "tsodyksmarkram_": 31, "tsodyksmarkrammechan": [71, 72, 76], "tsodyksmarkramsynaps": [9, 28, 31, 55, 57, 72, 76], "tsodysmarkramsynaps": 41, "tstop": 21, "tune": 47, "tupl": [4, 9, 46, 50, 51, 53, 54, 56, 57, 58, 60, 61, 84], "turn": [13, 44, 45, 54, 71, 75], "twine": 15, "twister": [49, 58], "two": [4, 9, 10, 11, 13, 15, 16, 25, 30, 32, 35, 40, 43, 44, 46, 51, 53, 54, 55, 57, 60, 72, 74, 75, 76, 79, 91], "txt": [9, 15, 38, 43, 51, 53, 55, 56, 57, 60, 72, 76], "type": [0, 3, 4, 8, 10, 12, 21, 30, 33, 35, 39, 41, 49, 52, 54, 56, 57, 58, 70, 71, 72, 73, 76, 84, 85, 91], "typic": [9, 92], "u": [9, 10, 11, 15, 20, 21, 22, 27, 28, 29, 30, 31, 40, 41, 47, 51, 53, 55, 57, 72, 74, 76, 91], "uf_per_cm2": 41, "um": 41, "unabl": 36, "unaccept": 16, "unchang": 37, "under": [10, 15, 37], "underli": [9, 37, 45], "underscor": 58, "understand": [10, 65], "understood": [9, 10, 72], "undertak": 10, "unecessari": 70, "unhind": 10, "unic": 21, "unifi": 47, "uniform": [1, 21, 24, 25, 27, 40, 41, 43, 46, 49, 54, 58, 60], "uniform_int": [0, 49, 58], "uniformdistr": 21, "uniformli": [58, 71, 90], "union": 10, "unit": [4, 9, 10, 11, 13, 15, 20, 26, 34, 41, 43, 46, 53, 55, 56, 57, 60, 70, 71, 72, 74, 76, 77, 91], "unittest": 15, "unit\u00e9": 10, "univers": [10, 47], "universit\u00e4t": 10, "universit\u00e9": 10, "unless": [10, 54, 60, 84], "unlik": [38, 54, 70, 71], "unlimit": 38, "unmodifi": 10, "unrealist": 3, "unrest": 10, "until": [11, 51, 52, 54, 59, 75, 76, 79, 89], "unwelcom": 16, "up": [9, 17, 20, 21, 22, 26, 27, 28, 29, 30, 31, 45, 50, 51, 52, 54, 56, 59, 65, 70, 75, 76], "updat": [10, 11, 13, 15, 24, 28, 29, 31, 38, 42, 43, 52, 54, 69, 70, 71, 72, 74, 76, 80], "upload": 15, "upon": 10, "upper": [11, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 41], "upstream": 15, "url": 44, "us": [1, 10, 11, 13, 15, 16, 18, 19, 21, 23, 25, 28, 29, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 70, 71, 72, 73, 74, 75, 76, 82, 83, 85, 89, 90, 91, 92], "usag": [3, 21, 22, 23, 25, 26, 27, 30, 31, 32], "use_assembli": 21, "use_csa": 21, "use_cvod": [4, 59], "use_librari": 41, "use_view": 21, "user": [3, 10, 13, 17, 40, 44, 65, 70, 71, 72, 74, 76, 81, 89], "usernam": 15, "useweav": 71, "usual": [43, 45, 54], "utf": [21, 27, 28, 29, 31, 41], "utf8": 26, "util": [0, 11, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 38, 41, 74, 76, 79], "uziel": 55, "v": [3, 4, 11, 13, 20, 21, 22, 23, 25, 26, 27, 29, 30, 31, 40, 41, 43, 44, 47, 50, 53, 56, 72, 74, 76], "v1": [9, 80], "v2": [10, 80], "v3": 36, "v8": 64, "v_init": [4, 25, 30, 43, 71], "v_m": 3, "v_mean": 21, "v_offset": 91, "v_reset": [3, 12, 21, 26, 27, 43, 46, 53, 88, 91], "v_rest": [3, 12, 21, 25, 26, 27, 43, 46, 53, 56, 65, 72, 76, 91], "v_spike": [43, 53, 91], "v_step_if": 30, "v_step_izh": 30, "v_th": 12, "v_thresh": [3, 12, 21, 23, 25, 26, 27, 43, 46, 53, 54, 88, 91], "va": 21, "va_": 21, "vabenchmark": [21, 75], "vabenchmark_": 21, "vabenchmarks_": 21, "val": 54, "valid": [3, 10, 15, 40, 51], "valu": [3, 4, 8, 9, 10, 13, 15, 21, 24, 29, 30, 31, 34, 40, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 70, 71, 74, 75, 89, 91, 92], "value_arrai": 56, "valueerror": [3, 46], "van": 53, "vari": [19, 43, 52, 54, 64], "variabl": [3, 4, 8, 9, 11, 13, 20, 29, 31, 34, 40, 41, 56, 57, 61, 71, 72, 76, 89], "variant": 75, "varieti": 11, "variou": [45, 54, 70, 71, 89], "varying_poisson": 32, "ve": [15, 71], "vecstim": 42, "veidenbaum": 47, "verbos": [11, 71], "veri": [9, 13, 15, 19, 38, 40, 45, 54, 59, 71, 72, 74, 75, 76], "verifi": [10, 37], "versa": [43, 56, 88], "version": [4, 10, 11, 15, 16, 18, 19, 25, 34, 36, 37, 39, 40, 42, 43, 44, 49, 53, 55, 63, 64, 65, 66, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 86, 87], "vi": [10, 47], "via": [15, 16, 21, 43, 53, 71, 72, 76], "vice": [43, 56, 88], "view": [0, 8, 9, 21, 34, 46, 50, 54, 71], "viewpoint": 16, "virtual": 15, "virtualenv": [15, 36, 42, 72], "viru": 10, "visibl": [11, 65], "visual": [11, 15, 39, 43, 74, 76], "vlsi": 47, "vm": [11, 23, 27, 30, 74, 76], "vm12": 30, "vmax": 25, "vmin": 25, "vogel": 21, "vogging": 47, "vol": 47, "voltag": [3, 13, 30, 40, 53, 55, 64, 92], "voltage_based_synaps": 53, "voltage_depend": 55, "voluceau": 10, "volum": [60, 90], "vonmis": [49, 58], "vote": 16, "vreset": 44, "vrest": 44, "vrev": 44, "vthresh": 44, "w": [9, 11, 22, 27, 30, 43, 50, 53, 55, 57, 72, 76, 91], "w0": 26, "w_exc": 21, "w_inh": 21, "w_max": [9, 26, 55], "w_min": [9, 26, 55], "wa": [10, 11, 39, 40, 46, 56, 57, 61, 70, 71, 72, 75, 76, 84], "wai": [9, 11, 13, 15, 16, 17, 35, 36, 37, 40, 43, 44, 45, 54, 56, 71, 72, 76, 89], "wait": 71, "waiver": 10, "want": [11, 38, 49, 57, 71, 84], "war": 10, "warn": [36, 38, 65, 71], "warrant": 10, "warranti": 10, "water": 10, "waveform": [23, 35], "we": [1, 3, 9, 11, 13, 15, 16, 21, 25, 26, 30, 36, 37, 38, 39, 40, 41, 42, 43, 45, 49, 50, 53, 54, 55, 64, 66, 71, 72, 73, 74, 75, 76, 79, 84, 87, 90], "web": 15, "weight": [3, 4, 11, 20, 21, 25, 26, 27, 28, 29, 30, 31, 40, 41, 51, 57, 59, 70, 71, 72, 73, 74, 76, 79, 88, 92], "weight_depend": [9, 26, 55], "weight_distr": [9, 41], "weight_record": [26, 36], "weighthistogram": [0, 57], "weightrecord": 26, "weights_n": 25, "weights_python": 25, "welcom": [13, 16, 17, 63, 64, 65, 66, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87], "well": [9, 10, 11, 15, 37, 43, 71, 72, 74, 76, 77], "wendt": 47, "were": [10, 11, 49, 70, 72, 76, 79], "what": [13, 16, 21, 26, 38, 43, 44, 50, 54, 73, 74, 75, 77], "whatev": 13, "whatsoev": 10, "wheel": [15, 39, 40], "when": [3, 9, 10, 11, 13, 15, 16, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 49, 53, 54, 56, 70, 71, 72, 74, 75, 76, 79, 82, 84], "whenev": [74, 76], "where": [3, 9, 10, 15, 16, 20, 25, 26, 37, 40, 45, 51, 54, 56, 57, 64, 71, 72, 74, 75, 76, 89], "wherea": [30, 38], "wherev": [39, 40], "whether": [9, 10, 11, 51, 54, 56, 70, 72, 76, 90, 92], "which": [3, 4, 9, 10, 11, 13, 15, 16, 26, 30, 32, 37, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 70, 71, 72, 73, 74, 75, 76, 79, 82, 88, 89, 90], "while": [9, 15, 37, 39, 40, 43, 49, 88], "white": 52, "who": [10, 16, 49, 74, 84], "whole": [10, 13, 74], "whole_cel": 41, "whose": [10, 13, 40, 43, 51, 53, 54, 55, 57, 72, 76], "why": 38, "wide": 10, "wider": [16, 87], "widespread": 40, "width": [21, 24, 32, 60, 61], "wiki": [16, 71], "wikipedia": [58, 75, 76], "window": [36, 42], "wire": 9, "wise": [52, 54], "wish": [4, 9, 11, 13, 36, 37, 40, 42, 45, 49, 59, 89], "with_address": [9, 26, 57, 72, 76], "with_color": 38, "with_legend": 3, "with_prefix": 54, "with_replac": [51, 75, 76], "within": [1, 9, 10, 13, 15, 16, 40, 43, 53, 54, 56, 57, 60, 70, 71, 72, 74, 76, 89, 90, 91], "without": [10, 15, 16, 37, 40, 49, 51, 54], "wmax": 3, "wn": 26, "word": [10, 37, 72, 76], "work": [0, 4, 8, 9, 10, 13, 15, 36, 37, 38, 39, 40, 42, 44, 50, 53, 54, 56, 65, 66, 69, 70, 71, 72, 74, 75, 76, 80, 83, 85], "workaround": [72, 76], "workflow": [39, 47], "world": [37, 51], "worldwid": 10, "worri": [45, 54], "worthwhil": 40, "would": [4, 9, 11, 13, 14, 36, 37, 40, 44, 45, 51, 53, 54, 55, 71, 84], "wp": 26, "wrap": [3, 4, 9, 15, 43, 46, 71, 72, 76], "wrappedrng": 58, "wrapper": 58, "write": [9, 10, 13, 15, 21, 35, 37, 38, 40, 43, 44, 45, 48, 53, 56, 58, 60, 72, 76, 84], "write_data": [11, 20, 21, 22, 26, 27, 28, 29, 30, 31, 41, 43, 45, 50, 56], "writecputim": 21, "written": [10, 11, 15, 38, 43, 44, 50, 56, 71], "wrote": 71, "www": [10, 36, 42], "x": [9, 15, 32, 36, 40, 41, 42, 46, 51, 53, 54, 56, 59, 60, 79, 90], "x0": [9, 12, 60, 90], "x86_64": 42, "x_ij": 57, "x_max": 60, "x_min": 60, "xlabel": [11, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 41, 74, 76], "xlim": [24, 26], "xml": [21, 41, 80], "xmlreader": 41, "xtick": [11, 20, 22, 23, 26, 27, 28, 29, 30, 31, 32, 41, 74, 76], "xy": [9, 60], "xyz": 60, "xz": 60, "xzf": 36, "y": [9, 11, 15, 40, 41, 46, 54, 56, 59, 60, 79, 90], "y0": [12, 60], "y_offset": 23, "yale": [36, 42], "year": 15, "yet": [4, 13, 26, 39, 44, 50, 53, 74], "yger": [10, 37, 47], "yield": 54, "ylabel": [11, 20, 22, 23, 26, 27, 28, 29, 30, 31, 41, 74, 76], "ylim": [3, 22, 23, 24, 26, 28, 30, 41], "you": [3, 4, 9, 10, 11, 13, 14, 15, 18, 25, 33, 36, 37, 38, 42, 43, 45, 49, 50, 54, 59, 61, 65, 66, 69, 70, 71, 72, 74, 76, 84, 89, 90, 91], "your": [0, 4, 9, 13, 14, 15, 35, 36, 37, 42, 45, 49, 54, 61, 72, 74, 76, 90], "yourself": 13, "ytick": [20, 22, 23, 26, 28, 29, 30, 31, 41], "yuck": 41, "yuri": 10, "yvett": 10, "yz": 60, "z": [9, 15, 40, 41, 46, 56, 60, 79, 90], "z0": 60, "z_max": 60, "z_min": 60, "zaytsev": 10, "zero": [3, 25, 51, 52, 57, 59, 61, 70, 71, 89], "zeta": 58, "zip": [9, 23, 30, 42], "z\u00fchl": 47, "\u00b5": [27, 28, 29, 31, 55, 57, 71, 92], "\u00b5f": 21, "\u00b5m": [9, 40, 41, 60], "\u00b5m\u00b2": 21, "\u00e0": 10, "\u00e5": 10, "\u03b4w": 55}, "titles": ["API reference", "Backends", "Brian", "NEST", "NEURON", "NeuroML", "NineML", "Neuromorphic hardware", "Building networks", "Building networks: connections", "Contributors, licence and funding", "Data handling", "Network descriptions", "Adding a new backend", "Bug reports and feature requests", "Contributing to PyNN", "Governance", "Developers\u2019 guide", "Downloads", "Examples", "A selection of Izhikevich neurons", "Balanced network of excitatory and inhibitory neurons", "A demonstration of the responses of different standard neuron models to current injection", "Injecting time-varying current into a cell", "Illustration of the different standard random distributions and different random number generators", "An example to illustrate random number handling in PyNN", "A very simple example of using STDP", "Small network created with the Population and Projection classes", "Example of facilitating and depressing synapses in deterministic and stochastic versions", "Example of simple stochastic synapses", "A demonstration of the responses of different standard neuron models to synaptic input", "Example of depressing and facilitating synapses", "A demonstration of the use of callbacks to vary the rate of a SpikeSourcePoisson", "Importing from and exporting to other formats", "PyNN: documentation", "Injecting current", "Installation", "Introduction", "Logging", "Multicompartmental modelling with PyNN: design goals", "Multicompartmental modelling", "Multicompartmental modelling with PyNN: examples", "Installation", "Building networks: neurons", "PyNN and NineML", "Running parallel simulations", "Model parameters and initial values", "Publications about, relating to or using PyNN", "Quickstart", "Random numbers", "Recording spikes and state variables", "Connectors", "Current sources", "Neuron models", "Parameter handling", "Synapse models", "Populations, Views and Assemblies", "Projections", "Random numbers", "Simulation control", "Spatial structure", "Utility classes and functions", "Release notes", "PyNN 0.10.0 release notes", "PyNN 0.10.1 release notes", "PyNN 0.11.0 release notes", "PyNN 0.12.0 release notes", "PyNN 0.12.1 release notes", "PyNN 0.12.2 release notes", "PyNN 0.12.3 release notes", "PyNN 0.6 release notes", "PyNN 0.7 release notes", "PyNN 0.8 alpha 1 release notes", "PyNN 0.8 alpha 2 release notes", "PyNN 0.8 beta 1 release notes", "PyNN 0.8 beta 2 release notes", "PyNN 0.8.0 release notes", "PyNN 0.8.0 release candidate 1 release notes", "PyNN 0.8.1 release notes", "PyNN 0.8.2 release notes", "PyNN 0.8.3 release notes", "PyNN 0.9.0 release notes", "PyNN 0.9.1 release notes", "PyNN 0.9.2 release notes", "PyNN 0.9.3 release notes", "PyNN 0.9.4 release notes", "PyNN 0.9.5 release notes", "PyNN 0.9.6 release notes", "Roadmap", "Simulation control", "Representing spatial structure and calculating distances", "Standard models", "Units"], "titleterms": {"0": [63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87], "1": [63, 64, 67, 71, 72, 74, 77, 78, 82, 87], "10": [63, 64, 78], "11": 65, "12": [66, 67, 68, 69, 80], "14": 83, "16": 84, "18": 86, "2": [68, 71, 73, 75, 77, 78, 79, 80, 83, 84, 86, 87], "20": 87, "3": [63, 64, 65, 66, 69, 71, 75, 80, 84], "4": [65, 71, 75, 85], "5": [71, 83, 86], "6": [66, 70, 77, 83, 87], "7": [69, 71, 83, 87], "8": [64, 72, 73, 74, 75, 76, 77, 78, 79, 80], "9": [81, 82, 83, 84, 85, 86, 87], "A": [13, 20, 22, 26, 30, 32, 41], "For": 74, "One": 9, "The": [13, 49, 54, 60], "about": [47, 89], "abstract": 44, "access": [9, 72, 76], "ad": [13, 38, 65], "adapt": [4, 53, 58], "addit": 45, "algebra": 9, "algorithm": 9, "all": [9, 46], "allow": 65, "alpha": [72, 73], "an": [9, 25, 44, 46], "api": [0, 34, 66, 69, 71, 74, 75, 88], "arbor": 36, "arrai": [46, 84], "artificial_cel": 84, "assembli": [43, 56], "attribut": 16, "backend": [1, 13, 71, 74, 76], "balanc": 21, "base": [51, 53, 55], "basic": 61, "beta": [66, 69, 74, 75, 87], "brian": [2, 13, 74, 87], "brian2": 36, "bug": [14, 37, 63, 64, 65, 82, 83, 84, 85, 86, 87], "build": [8, 9, 43], "built": 51, "calcul": [46, 90], "callback": 32, "candid": 77, "cell": [3, 4, 23, 40, 41, 43, 53], "chang": [65, 71, 74, 75, 76, 77, 78, 79, 80], "checkout": 15, "cite": 37, "class": [27, 49, 51, 53, 54, 55, 60, 61], "code": [15, 16, 18, 38, 45, 84], "codebas": 13, "common": [3, 13], "compart": [41, 43], "compartment": 88, "compat": [72, 76], "compon": 55, "compos": [13, 53, 65, 91], "condit": 43, "conduct": [16, 84], "configur": [3, 4, 38], "connect": [9, 13, 72, 76], "connector": [13, 40, 51, 74, 76], "continu": 3, "contribut": [15, 16], "contributor": [10, 16], "control": [59, 76, 89], "converg": 9, "creat": [9, 13, 27, 72, 76], "current": [22, 23, 35, 41, 43, 52, 83], "data": [11, 13, 43, 45, 72, 76], "defin": 9, "definit": 88, "delai": 9, "demonstr": [22, 30, 32], "depend": [9, 55, 64], "depress": [28, 31], "descript": 12, "design": 39, "detail": [70, 71], "determinist": 28, "develop": [15, 17, 34, 65, 74, 76], "differ": [22, 24, 30, 58], "distanc": 90, "distribut": [18, 24, 75, 76], "diverg": 9, "document": [15, 34], "download": 18, "dure": 89, "effici": 64, "eif_cond_alpha_isfa_ista": 91, "end": 87, "enforc": 16, "enhanc": 37, "entir": 44, "environ": 15, "exampl": [19, 25, 26, 28, 29, 31, 41, 46], "excitatori": 21, "explicit": 9, "export": [33, 44, 88], "extens": [66, 69], "facilit": [28, 31], "fan": 9, "featur": 14, "file": [9, 11], "finish": [13, 89], "fire": 53, "fix": [9, 55, 63, 64, 65, 82, 83, 84, 85, 86, 87], "format": 33, "from": [9, 18, 33, 46], "function": [46, 53, 61], "fund": 10, "gap": 74, "gather": 45, "gener": [3, 24, 45, 58, 84], "get": 89, "github": 18, "goal": 39, "govern": [16, 84], "guid": [17, 34], "handl": [11, 25, 54, 64], "hardwar": 7, "heterogen": [72, 76], "hh_cond_exp": 91, "if_cond_alpha": 91, "if_cond_exp": 91, "if_curr_alpha": 91, "if_curr_exp": 91, "illustr": [24, 25], "implement": [13, 60], "import": [13, 33], "improv": [74, 76, 84, 85], "indic": 34, "individu": 43, "inform": 89, "inhibitori": 21, "initi": [43, 46], "initialis": 89, "inject": [22, 23, 35, 41, 43, 83], "input": 30, "inspect": 43, "instal": [36, 42], "instrument": 13, "integr": [4, 53], "interfac": 13, "interv": 64, "introduct": 37, "irregular": 64, "izhikevich": 20, "junction": 74, "latest": 18, "layer": 44, "lazyarrai": 54, "licenc": [10, 37], "lifecycl": 13, "list": [9, 15], "log": 38, "long": 55, "mail": 15, "maintain": 16, "make": 15, "master": 45, "matrix": 9, "mechan": 55, "method": 49, "model": [3, 4, 13, 22, 30, 39, 40, 41, 44, 46, 53, 55, 64, 65, 84, 88, 91], "modif": 45, "modifi": [9, 43], "more": 64, "morphologi": 40, "multi": [41, 43, 88], "multicompart": [66, 69], "multicompartment": [39, 40, 41], "multipl": [46, 65], "music": 88, "nativ": [3, 4, 53, 55], "native_electrode_typ": 83, "neo": 11, "nest": [3, 13, 36, 44, 63, 64, 65, 66, 69, 75, 77, 78, 80, 83, 84, 86, 87], "network": [8, 9, 12, 13, 21, 27, 41, 43], "neuroml": [5, 33, 80, 88], "neuromorph": 7, "neuron": [4, 9, 13, 20, 21, 22, 30, 36, 42, 43, 44, 46, 53, 64, 66, 69, 83, 84, 91], "new": [13, 64, 74, 76, 79], "next": 49, "nineml": [6, 33, 44, 55, 88], "node": 45, "note": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87], "number": [3, 24, 25, 45, 49, 58, 84], "old": 34, "one": 9, "oper": 89, "option": [3, 4], "other": [11, 33, 71, 74, 75, 77, 78, 79, 80], "our": 16, "out": 9, "own": [38, 60], "packag": 11, "parallel": 45, "paramet": [43, 46, 54, 72, 76, 84], "parameter": 40, "parameterspac": 54, "pattern": 9, "perform": [84, 85, 89], "phase": 13, "plastic": [3, 9, 13, 55], "pledg": 16, "plot": [11, 61, 74, 76], "point": 40, "popul": [27, 43, 46, 56, 72, 76], "posit": [9, 46], "post": 65, "probabl": 9, "project": [9, 27, 40, 57, 84], "properti": [3, 72, 76], "public": 47, "pynest": 36, "pynn": [15, 25, 34, 36, 37, 39, 41, 42, 44, 47, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87], "python": [72, 75, 76, 83, 87], "question": 37, "quickstart": 48, "random": [3, 24, 25, 45, 46, 49, 58, 75, 76, 84], "randomdistribut": 49, "rate": 32, "read": 9, "receptor": 65, "record": [11, 13, 43, 50, 64, 72, 76, 83], "refer": [0, 34, 54], "region": 40, "relat": 47, "releas": [15, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87], "repeat": 89, "report": 14, "repres": 90, "request": 14, "requir": [15, 45], "reset": 13, "respons": [16, 22, 30], "retriev": [11, 13, 43, 72, 76], "rng": 49, "roadmap": 88, "run": [13, 45, 89], "same": 46, "sampl": 64, "save": [13, 72, 76], "scope": 16, "select": [20, 40], "sequenc": 54, "seri": 46, "set": [9, 15, 46, 72, 76], "setup": 13, "shape": 60, "short": [9, 55], "simpl": [11, 26, 29, 53, 74, 76], "simplif": 88, "simplifi": 84, "simul": [13, 44, 45, 59, 76, 88, 89], "small": [9, 27], "sonata": [33, 85], "sourc": [18, 52, 53, 79, 91], "space": 60, "spatial": [46, 60, 90], "specifi": [9, 72, 76], "spike": [3, 9, 50, 53, 64, 72, 76, 79, 91], "spikesourcearrai": 91, "spikesourcepoisson": [32, 49, 91], "standard": [16, 22, 24, 30, 53, 55, 75, 76, 91], "state": [50, 89], "static": 55, "stdp": 26, "step": 4, "stochast": [28, 29, 82], "structur": [13, 60, 90], "style": 15, "sub": 56, "submit": 15, "support": [65, 66, 69, 76, 84, 87], "synaps": [3, 9, 28, 29, 31, 55, 72, 76, 82], "synapt": [3, 9, 13, 30, 65, 72, 76], "tabl": 34, "term": [9, 55], "test": 15, "through": 13, "time": [3, 4, 9, 23, 41, 46, 55, 72, 76], "todo": [3, 4, 9, 11, 35, 38, 43, 44, 46, 53, 58, 60, 89], "train": 64, "two": 41, "type": [9, 40, 43, 46, 53, 55, 65], "unit": 92, "up": [13, 15, 89], "us": [3, 4, 9, 26, 32, 44, 46, 47, 84], "user": 9, "util": [53, 61], "valu": [43, 46, 72, 76, 84], "vari": [23, 32, 41], "variabl": [43, 50], "veri": 26, "version": 28, "view": [43, 56], "walk": 13, "weight": [9, 55], "work": [11, 43, 58], "world": 9, "write": 11, "xml": 44, "your": [38, 60]}})